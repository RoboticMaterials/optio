{"version":3,"sources":["components/basic/sort_dropdown/sort_dropdown.style.js","components/basic/sort_dropdown/sort_dropdown.js","components/basic/day_selector/day_selector.style.js","components/basic/day_selector/day_selector.js","components/basic/timespan_selector/time_span_selector.style.js","components/basic/timespan_selector/time_span_selector.js","components/side_bar/content/statistics/statistics_header/statistics_header.style.js","components/side_bar/content/statistics/statistics_header/statistics_header.js","methods/utils/time_utils.js","components/basic/rotate_button/rotate_button.style.js","components/basic/rotate_button/rotate_button.js","components/basic/form/time_picker_field/time_picker/time_picker.js","components/basic/form/time_picker_field/time_picker/index.js","components/basic/form/time_picker_field/time_picker_field.style.js","components/basic/form/time_picker_field/time_picker_field.js","components/basic/form/switch_field/switch_field.style.js","components/basic/form/switch_field/switch_field.js","components/side_bar/content/settings/shift_settings/shift_settings.style.js","components/side_bar/content/settings/shift_settings/shift_settings.js"],"names":["Container","styled","div","Label","p","props","theme","font","primary","fontSize","sz3","SortDropDown","labelField","valueField","options","values","onChange","mapInput","mapOutput","label","placeholder","labelStyle","dropDownSearchStyle","schema","containerCss","dropdownCss","valueCss","portal","maxDropdownWidth","orderEnabled","onChangeOrderDirection","rotateButtonContainerCss","rotateButtonIconCss","style","iconName1","iconCss","onStateOne","onStateTwo","defaultProps","val","RowContainer","DateSelectorIcon","i","bg","septenary","DateSelectorTitle","h1","sz2","LoadingIcon","DaySelector","date","dateIndex","loading","className","onClick","TimespanButton","button","selected","locations","quaternary","color","TimeSpanSelector","timeSpan","setTimeSpan","timespanDisabled","disabled","HeaderSection","commonCss","secondary","ChartTypeButton","buttonCss","statistics","solid","tertiary","HeaderLabel","ShiftSettingsContainer","HeaderBar","layoutCss","StatisticsHeader","themeContext","handleTimeSpan","handleSetShowReport","showReport","handleSelectSort","sortLevel","useState","showShiftSettings","setShowShiftSettings","newIndex","position","alignItems","marginLeft","value","minWidth","convert12hto24h","time12h","split","numericTime","modifier","hours","minutes","parseInt","convert24htoEpoch","time24h","Date","parse","convertDateto12h","settingState","store","getState","settingsReducer","settings","timezone","toLocaleString","timeZone","convertDateToLocaleTimeZone","length","convert24hto12h","getHours","getMinutes","convertHHMMSSStringToSeconds","timeStr","hour","minute","second","convertSecondsToHHMMSS","seconds","toISOString","substr","quinary","textColor","css","Icon","rotationTime","rotate","STATES","RotateButton","state","currentState","setCurrentState","setRotate","useEffect","DeliTimePicker","rest","popupClassName","StyledTimePicker","TimePicker","hexToRGBA","fg","red","sz4","DefaultContainer","DefaultErrorContainerComponent","TimePickerField","TimePickerCss","ErrorContainerComponent","containerStyle","defaultValue","defaultOpenValue","useFormikContext","setFieldValue","setFieldTouched","useField","field","meta","fieldValue","fieldName","name","touched","error","hasError","errorMessage","getMessageFromError","visible","text","ContainerComponent","SwitchField","useContext","ThemeContext","transform","checked","onColor","default","BreakContainer","BreakLabel","senary","ColumnContainer","LightenDarkenColor","octonary","ShiftSettings","enableOutput","dispatch","useDispatch","dispatchPageDataChanged","bool","pageDataChanged","settingsInReducer","useSelector","pageInfoChanged","sidebarReducer","breaksEnabled","setBreaksEnabled","shiftDetails","console","log","enabledBreaks","Object","keys","breaks","forEach","br","ind","enabled","onSubmitShift","startOfShift","endOfShift","expectedOutput","startOfBreak1","endOfBreak1","switch1","startOfBreak2","endOfBreak2","switch2","startOfBreak3","endOfBreak3","switch3","shiftSettings","break1","startOfBreak","endOfBreak","break2","break3","postSettings","dispatchPostSettings","renderBreaks","useMemo","width","margin","flex","paddingRight","map","bk","adjustedInd","breakEnabled","breakName","switchName","breakStart","breakEnd","justifyContent","marginTop","splitVal","moment","set","format","display","flexWrap","textAlign","backgroundColor","showHour","showMinute","showSecond","use12Hours","autocomplete","allowEmpty","initialValues","validationSchema","throughputSchema","validateOnChange","validateOnMount","validateOnBlur","onSubmit","a","setSubmitting","setTouched","validateForm","resetForm","formikProps","submitForm","setValidationSchema","errors","boxShadow","cardShadow","padding","borderRadius","flexDirection","marginBottom","borderBottom","paddingBottom","InputComponent","Textbox","ContentContainer","type"],"mappings":"oKAEaA,EAAYC,IAAOC,IAAV,oGAMTC,EAAQF,IAAOG,EAAV,oKAEC,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,WAC5B,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,SAASC,O,2UCDzCC,EAAe,SAACN,GAElB,MA4BIA,GAAS,GA3BTO,EADJ,EACIA,WACAC,EAFJ,EAEIA,WACAC,EAHJ,EAGIA,QACAC,EAJJ,EAIIA,OACAC,EALJ,EAKIA,SACAC,EANJ,EAMIA,SACAC,EAPJ,EAOIA,UAEAC,EATJ,EASIA,MACAC,EAVJ,EAUIA,YAEAC,EAZJ,EAYIA,WACAC,EAbJ,EAaIA,oBACAC,EAdJ,EAcIA,OACAC,EAfJ,EAeIA,aACAC,EAhBJ,EAgBIA,YACAC,EAjBJ,EAiBIA,SACAC,EAlBJ,EAkBIA,OACAC,EAnBJ,EAmBIA,iBAEAC,EArBJ,EAqBIA,aACAC,EAtBJ,EAsBIA,uBACAC,EAvBJ,EAuBIA,yBACAC,EAxBJ,EAwBIA,oBAxBJ,iBA+BA,OACI,eAAC,EAAD,WACI,cAAC,EAAD,CAAcC,MAAK,eAAOZ,GAA1B,SAAyCF,IACzC,cAAC,IAAD,CACIS,iBAAkBA,EAClBD,OAAQA,EACRP,YAAaA,EACbI,aAAcA,EACdC,YAAaA,EACbC,SAAUA,EACVZ,QAASA,EACTE,SAAU,SAACD,GACPC,EAASE,EAAUH,EAAO,MAE9BA,OAAQE,EAASF,GACjBH,WAAYA,EACZC,WAAYA,EACZU,OAAQA,EACRU,MAAK,eAAOX,KAEfO,GACG,cAAC,IAAD,CACIN,OAAQA,EACRW,UAAW,kBACXV,aAAcO,EACdI,QAASH,EAETI,WAAY,WACRN,EAAuB,cAE3BO,WAAY,WACRP,EAAuB,qBAmB/CnB,EAAa2B,aAAe,CACxBnB,MAAO,WACPU,cAAc,EACdb,SAAU,KACVC,SAAU,SAACsB,GAAD,OAASA,GACnBrB,UAAW,SAACqB,GAAD,OAASA,GACpBN,MAAO,IAIItB,O,mECrGF6B,EAAevC,IAAOC,IAAV,8MAWZuC,EAAmBxC,IAAOyC,EAAV,sKAIhB,SAAArC,GAAK,OAAIA,EAAMC,MAAMqC,GAAGC,aAOxBC,EAAoB5C,IAAO6C,GAAV,sHACb,SAAAzC,GAAK,OAAIA,EAAMC,MAAMG,SAASsC,OAC5B,SAAA1C,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,WAChC,SAAAH,GAAK,OAAIA,EAAMC,MAAMqC,GAAGC,aAKxBI,EAAc/C,IAAOyC,EAAV,oD,OC3BlBO,EAAc,SAAC5C,GAEjB,IACI6C,EAMA7C,EANA6C,KACAC,EAKA9C,EALA8C,UACAC,EAIA/C,EAJA+C,QACAnC,EAGAZ,EAHAY,SACAC,EAEAb,EAFAa,UACAF,EACAX,EADAW,SAGJ,OACI,eAAC,EAAD,WACI,cAAC,EAAD,CACIqC,UAAU,sBACVC,QAAS,WAELtC,EAASE,EADKiC,EAAY,OAIjCC,EACG,cAAC,EAAD,CAAoBC,UAAU,gCAE9B,cAAC,EAAD,UAA2BpC,EAASiC,KAKzB,IAAdC,EACG,cAAC,EAAD,CACIE,UAAU,uBACVC,QAAS,WAELtC,EAASE,EADKiC,EAAY,OAKlC,cAAC,EAAD,QAUhBF,EAAYX,aAAe,CACvBY,KAAM,GACNE,SAAS,EACTnC,SAAU,SAACsB,GAAD,OAASA,GACnBrB,UAAW,SAACqB,GAAD,OAASA,IAGTU,O,+DCzDFjD,EAAYC,IAAOC,IAAV,oRAcTqD,EAAiBtD,IAAOuD,OAAV,2hBAUd,SAAAnD,GAAK,OAAIA,EAAMoD,SAAWpD,EAAMC,MAAMiB,OAAOmC,UAAYrD,EAAMC,MAAMqC,GAAGgB,cAIlE,SAAAtD,GAAK,OAAIA,EAAMoD,SAAW,IAAM,OAChC,SAAApD,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,WAExB,SAAAH,GAAK,OAAIA,EAAMoD,SAAW,UAAY,aAAmB,SAAApD,GAAK,OAAIA,EAAMoD,SAAWpD,EAAMuD,MAAQvD,EAAMC,MAAMqD,cASjH,SAAAtD,GAAK,OAAIA,EAAMuD,S,OClBjBC,IApBU,SAACxD,GAEtB,IACIyD,EAGAzD,EAHAyD,SACAC,EAEA1D,EAFA0D,YACAC,EACA3D,EADA2D,iBAGJ,OACI,eAAC,EAAD,WAEI,cAAC,EAAD,CAAuBC,SAAUD,EAAkBP,SAAwB,QAAbK,GAAmC,SAAbA,EAAsBR,QAAS,kBAAMS,EAAY,QAArI,iBACA,cAAC,EAAD,CAAuBE,SAAUD,EAAkBP,SAAuB,SAAbK,EAAqBR,QAAS,kBAAMS,EAAY,SAA7G,kBACA,cAAC,EAAD,CAAuBE,SAAUD,EAAkBP,SAAuB,UAAbK,EAAsBR,QAAS,kBAAMS,EAAY,UAA9G,qBACA,cAAC,EAAD,CAAuBE,SAAUD,EAAkBP,SAAuB,SAAbK,EAAqBR,QAAS,kBAAMS,EAAY,SAA7G,uB,mHCZCG,EAAgBjE,IAAOC,IAAV,uNACpBiE,KACkB,SAAA9D,GAAK,OAAIA,EAAMC,MAAMqC,GAAGyB,aASnCC,EAAkBpE,IAAOuD,OAAV,2HACtBc,KAEkB,SAAAjE,GAAK,OAAMA,EAAMoD,SAAWpD,EAAMC,MAAMiB,OAAOgD,WAAWC,MAAQnE,EAAMC,MAAMqC,GAAG8B,YAM5FC,EAAczE,IAAOG,EAAV,gHAEL,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,WAC5B,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,SAASsC,OAIlC4B,EAAyB1E,IAAOC,IAAV,qEAKtB0E,EAAY3E,IAAOC,IAAV,wMACnB2E,KAGqB,SAAAxE,GAAK,OAAIA,EAAMC,MAAMqC,GAAGnC,WAOnCgC,EAAevC,IAAOC,IAAV,kEACnBiE,K,8CC8ESW,UAnHU,SAACzE,GAEtB,MAWIA,GAAS,GAVT0E,EADJ,EACIA,aACA3B,EAFJ,EAEIA,QACA4B,EAHJ,EAGIA,eACAlB,EAJJ,EAIIA,SACAmB,EALJ,EAKIA,oBACAC,EANJ,EAMIA,WACAhC,EAPJ,EAOIA,KACAC,EARJ,EAQIA,UACAgC,EATJ,EASIA,iBACAC,EAVJ,EAUIA,UAUJ,EAAkDC,oBAAS,GAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KAUA,OACI,eAAC,EAAD,WACI,eAAC,EAAD,WACI,cAAC,IAAD,CAEIxB,YAAa,SAACD,GAAD,OAAckB,EAAelB,EAAU,IACpDA,SAAUA,EACVE,iBAA+B,SAAbF,IAEtB,cAAC,IAAD,CACIZ,KAAMA,EACNC,UAAWA,EACXC,QAASA,EACTpC,SAAU,SAACwE,GACPR,EAAelB,EAAU0B,SAKrC,eAAC,EAAD,WACI,cAAC,EAAD,yBACA,eAAC,EAAD,WACI,cAAC,EAAD,CACI/B,UAAWyB,GAA2B,SAAbpB,EACzBR,QAAS,WACL2B,GAAoB,GACpBD,EAA4B,SAAblB,EAAsB,MAAQA,EAAUX,IAJ/D,iBAUA,cAAC,EAAD,CACIM,UAAWyB,GAA2B,SAAbpB,EACzBR,QAAS,WACL2B,GAAoB,GACpBD,EAAe,OAAQ7B,IAJ/B,kBAUA,cAAC,EAAD,CACIM,WAAYyB,GAA2B,SAAbpB,EAC1BR,QAAS,WACL2B,GAAoB,GACpBD,EAA4B,SAAblB,EAAsB,MAAQA,EAAUX,IAJ/D,4BAYN+B,GAA2B,SAAbpB,GACZ,eAAE,EAAF,CAAuB7B,MAAO,CAAEwD,SAAU,YAA1C,UACI,eAAC,EAAD,CAAqBxD,MAAO,CAAEyD,WAAY,UAAYpC,QAAS,kBAAMiC,GAAsBD,IAA3F,UACI,cAAC,EAAD,6BACA,mBAAGrD,MAAO,CAAE0D,WAAY,SAAWtC,UAAWiC,EAAoB,oBAAsB,2BAE3FA,GAlET,cAAC,EAAD,UACI,cAAC,IAAD,CAAeP,aAAcA,UAqE/BG,GAA2B,SAAbpB,GACZ,cAAC,EAAD,UACI,cAAC,IAAD,CACIhD,QApFI,CACpB,CAAEK,MAAO,gBAAiByE,MAAO,oBACjC,CAAEzE,MAAO,MAAOyE,MAAO,UACvB,CAAEzE,MAAO,QAASyE,MAAO,aAkFThF,WAAY,QACZC,WAAY,QACZS,oBAAqB,CAAEuE,SAAU,SACjC7E,SAAU,SAACuB,GACP4C,EAAiB5C,IAErBxB,OAAQ,CAACqE,Y,+NC1GpBU,G,OAAkB,SAACC,GAC5B,MAAgCA,EAAQC,MAAM,KAA9C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,EAAuBD,EAAYD,MAAM,KAAzC,mBAAKG,EAAL,KAAYC,EAAZ,KAWA,MATc,OAAVD,GAAgC,OAAbD,GAAkC,OAAbA,EAEvB,OAAVC,GAAgC,OAAbD,GAAkC,OAAbA,IAC/CC,EAAQ,MAFRA,EAAQ,KAKM,OAAbD,GAAkC,OAAbA,GAAgC,OAAVC,IAC5CA,EAAQE,SAASF,EAAO,IAAM,IAE5B,GAAN,OAAUA,EAAV,YAAmBC,KAiIVE,EAAoB,SAACC,EAASrD,GAGvC,OAFkBsD,KAAKC,MAAL,UAAcvD,EAAd,YAAsBqD,KAS/BG,EAAmB,SAACxD,GAAU,IAAD,IAGS,IAFzCyD,EAAeC,IAAMC,WAAWC,iBAEjC,OAACH,QAAD,IAACA,GAAD,UAACA,EAAcI,gBAAf,iBAAC,EAAwBC,gBAAzB,aAAC,EAAkC7F,SACpC+B,EARmC,SAACA,EAAM8D,GAC9C,OAAO,IAAIR,KAAKtD,EAAK+D,eAAe,QAAS,CAAEC,SAAUF,KAO9CG,CAA4BjE,EAAD,OAAOyD,QAAP,IAAOA,GAAP,UAAOA,EAAcI,gBAArB,iBAAO,EAAwBC,gBAA/B,aAAO,EAAkC7F,QAG/E,OA1I2B,SAACoF,GAC5B,IAAIL,EAAW,KAEf,EAAuBK,EAAQP,MAAM,KAArC,mBAAKG,EAAL,KAAYC,EAAZ,KAeA,OAbAD,EAAQE,SAASF,KAEJ,KACLA,EAAQ,KACRA,GAAgB,IAEpBD,EAAW,MAGQ,IAAnBE,EAAQgB,SACRhB,EAAO,WAAOA,IAGZ,GAAN,OAAUD,EAAV,YAAmBC,EAAnB,YAA8BF,GAwHvBmB,CAAgB,GAAD,OAAInE,EAAKoE,WAAT,YAAuBpE,EAAKqE,gBA6CzCC,EAA+B,SAACC,GACzC,MAA6BA,EAAQzB,MAAM,KAA3C,mBAAK0B,EAAL,KAAWC,EAAX,KAAmBC,EAAnB,KAOA,OAD4B,IAJ5BF,EAAOrB,SAASqB,IAIiB,GAAc,IAH/CC,EAAStB,SAASsB,KAClBC,EAASvB,SAASuB,KAOTC,EAAyB,SAACC,GAEnC,OADa,IAAItB,KAAe,IAAVsB,GAAgBC,cAAcC,OAAO,GAAI,K,wECrOtDhI,EAAYC,IAAOuD,OAAV,wWAKN,SAAAnD,GAAK,OAAIA,EAAMC,MAAMqC,GAAGyB,aAGb,SAAA/D,GAAK,OAAIA,EAAMC,MAAMqC,GAAGgB,cACpB,SAAAtD,GAAK,OAAIA,EAAMC,MAAMqC,GAAGsF,WAG5C,SAAA5H,GAAK,OAAIA,EAAMC,MAAM4H,aAGD,SAAA7H,GAAK,OAAIA,EAAMC,MAAMiB,OAAOlB,EAAMkB,QAAQiD,SAC5D,SAAAnE,GAAK,OAAIA,EAAMC,MAAMiB,OAAOlB,EAAMkB,QAAQiD,SAGnD,SAAAnE,GAAK,OAAIA,EAAM8H,KAAO9H,EAAM8H,OAGnBC,EAAOnI,IAAOyC,EAAV,kGAED,SAAArC,GAAK,0BAAiBA,EAAMgI,aAAvB,cACjB,SAAAhI,GAAK,OAAIA,EAAMiI,QAAN,+BAET,SAAAjI,GAAK,OAAIA,EAAM8H,KAAO9H,EAAM8H,O,OCtB1BI,EACM,YADNA,EAEM,YAGNC,EAAe,SAAAnI,GACpB,IACC6B,EAQG7B,EARH6B,UACAuG,EAOGpI,EAPHoI,MACAJ,EAMGhI,EANHgI,aACAjG,EAKG/B,EALH+B,WACAC,EAIGhC,EAJHgC,WACAb,EAGGnB,EAHHmB,aACAW,EAEG9B,EAFH8B,QACAZ,EACGlB,EADHkB,OAGD,EAAwC8D,mBAAkB,GAAToD,EAAaF,EAAmBA,GAAjF,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA4BtD,oBAAS,GAArC,mBAAOiD,EAAP,KAAeM,EAAf,KACA,EAAwBvD,oBAAS,GAAjC,6BAiBA,OAZAwD,qBAAU,WACNH,IAAiBH,GACnBK,GAAU,GACVxG,MAIAwG,GAAU,GACVvG,OAEC,CAACqG,IAGH,cAAC,EAAD,CACCP,IAAK3G,EACLD,OAAQA,EACR+B,QAAS,WACRqF,EAAgBD,IAAiBH,EAAmBA,EAAmBA,IAJzE,SAOC,cAAC,EAAD,CACChH,OAAQA,EACR4G,IAAKhG,EACLmG,OAAQA,EACRD,aAAcA,EACdhF,UAAWnB,OAcfsG,EAAalG,aAAe,CAC3BJ,UAAW,GACXmG,aAAc,IACdjG,WAAY,aACZC,WAAY,aACZd,OAAQ,WAGMiH,O,qNC1DAM,EAdQ,SAAC,GAAD,IAAGzF,EAAH,EAAGA,UAAc0F,EAAjB,wBACrB,cAAC,IAAD,2BACMA,GADN,IAEE1F,UAAWA,EACX2F,eAAgB3F,M,QCuCL4F,EA7CUhJ,YAAOiJ,EAAPjJ,CAAH,ouBAGE,SAAAI,GAAK,OAAIA,EAAMkB,OAAS4H,YAAU9I,EAAMC,MAAMiB,OAAOlB,EAAMkB,QAAQiD,MAAO,IAAO2E,YAAU9I,EAAMC,MAAM8I,GAAGC,IAAK,OAMtH,SAAAhJ,GAAK,OAAIA,EAAMC,MAAMG,SAAS6I,OAI5B,SAAAjJ,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,WAKjB,SAAAH,GAAK,OAAIA,EAAMkB,OAAS4H,YAAU9I,EAAMC,MAAMiB,OAAOlB,EAAMkB,QAAQiD,MAAO,IAAO2E,YAAU9I,EAAMC,MAAM8I,GAAGC,IAAK,OAKxH,SAAAhJ,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,WAC5B,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,SAAS6I,OAK5B,SAAAjJ,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,WAC5B,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,SAAS6I,OAG7B,SAAAjJ,GAAK,OAAIA,EAAMC,MAAMqC,GAAGyB,a,SChC7BmF,EAAmBtJ,IAAOC,IAAV,mDAIhBsJ,EAAiCvJ,IAAOC,IAAV,mN,gKCMrCuJ,EAAkB,SAACpJ,GAExB,IACCqJ,EAWGrJ,EAXHqJ,cACA1J,EAUGK,EAVHL,UACA2J,EASGtJ,EATHsJ,wBACAC,EAQGvJ,EARHuJ,eACA3H,EAOG5B,EAPH4B,MACAjB,EAMGX,EANHW,SAEA6I,GAIGxJ,EALHyJ,iBAKGzJ,EAJHwJ,cACA3I,EAGGb,EAHHa,UACAD,EAEGZ,EAFHY,SACG8H,EAXJ,YAYI1I,EAZJ,GAcA,EAA2C0J,cAAnCC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,gBACvB,EAAsBC,YAAS7J,GAA/B,mBAAO8J,EAAP,KAAcC,EAAd,KAGQC,EAEJF,EAFHvE,MACM0E,EACHH,EADHI,KAIAC,EAEGJ,EAFHI,QACAC,EACGL,EADHK,MAGKC,EAAWF,GAAWC,EACtBE,EAAeC,YAAoBH,GAEzC,OACE,eAACzK,EAAD,CACCiC,MAAO2H,EADR,UAGC,cAAC,EAAD,mDACK3H,GACAkI,GACApB,GAHL,IAICZ,IAAKuB,EACLgB,SAAUA,EAGV9E,MAAsB3E,EAAboJ,GAA6CR,GACtD7I,SAAU,SAACuB,GAENiI,GAASP,EAAgBK,GAAW,GACxCN,EAAcM,EAAWpJ,EAAUqB,IAEnCvB,GAAYA,EAASuB,OAGvB,cAAC,IAAD,CACCsI,QAASH,EACTI,KAAMH,EACNI,mBAAoBpB,QAkBzBF,EAAgBnH,aAAe,CAC9BtC,UAAWC,EACX0J,wBAAyB1J,EACzB2J,eAAgB,GAChB3H,MAAO,GACPjB,SAAU,aACVE,UAAW,SAAAqB,GAAG,OAAIA,GAClBtB,SAAU,SAAAsB,GAAG,OAAIA,IAGHkH,I,IAAAA,I,kBCjGFF,EAAmBtJ,IAAOC,IAAV,mDAIhBsJ,EAAiCvJ,IAAOC,IAAV,iN,8GCGrC8K,EAAc,SAAC3K,GAEjB,IACIL,EASAK,EATAL,UACA4J,EAQAvJ,EARAuJ,eAEA3H,GAMA5B,EAPAsJ,wBAOAtJ,EANA4B,OACAjB,EAKAX,EALAW,SACAE,EAIAb,EAJAa,UACAD,EAGAZ,EAHAY,SACAM,EAEAlB,EAFAkB,OACGwH,EATP,YAUI1I,EAVJ,GAYA,EAA2C0J,cAAnCC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,gBACvB,EAAsBC,YAAS7J,GAA/B,mBAAO8J,EAAP,KAAcC,EAAd,KAEMrF,EAAekG,qBAAWC,KAGrBb,EAEPF,EAFAvE,MACM0E,EACNH,EADAI,KAIAC,EAEAJ,EAFAI,QACAC,EACAL,EADAK,MAIiBG,YAAoBH,GAEzC,OACI,cAACzK,EAAD,CACIiC,MAAK,2BAAM2H,GAAN,IAAsBuB,UAAW,eAD1C,SAGI,cAAC,IAAD,yBACIC,QAASnK,EAASoJ,GAClBgB,QAAW9J,GAAYwD,EAAaxD,OAAOA,GAAUwD,EAAaxD,OAAOA,GAAQiD,MAAQO,EAAaxD,OAAO+J,QAAQ9G,OACjHuE,GAHR,IAII/H,SAAU,SAAAuB,GACFiI,GAASP,EAAgBK,GAAW,GACxCN,EAAcM,EAAWpJ,EAAUqB,IAEnCvB,GAAYA,EAASuB,IAEzBN,MAAK,eAAMA,SAwB3B+I,EAAY1I,aAAe,CACvBtC,UAAWC,EACX0J,wBAAyB1J,EACzB2J,eAAgB,GAChB3H,MAAO,GACPjB,SAAU,aACVC,SAAU,SAACsB,GAAD,OAASA,GACnBrB,UAAW,SAACqB,GAAD,OAASA,IAGTyI,I,YAAAA,I,2BCpFFO,EAAiBtL,IAAOC,IAAV,wLAKH,SAAAG,GAAK,OAAIA,EAAMC,MAAMqC,GAAGyB,aAInCoH,GAAavL,IAAOkB,MAAV,mFACR,SAAAd,GAAK,OAAIA,EAAMC,MAAMG,SAAS6I,OAC5B,SAAAjJ,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,WAChC,SAAAH,GAAK,OAAIA,EAAMC,MAAMqC,GAAG8I,UAiBtBC,IAdczL,IAAOuD,OAAV,yOAClBc,KACiB,SAAAjE,GAAK,OAAIA,EAAMC,MAAMiB,OAAOgD,WAAWC,SACjD,SAAAnE,GAAK,OAAIA,EAAMC,MAAMqC,GAAGnC,WAOZ,SAAAH,GAAK,OAAIsL,YAAmBtL,EAAMC,MAAMiB,OAAOgD,WAAWC,OAAQ,MAI5DvE,IAAOC,IAAV,qCACtBiE,MAGO3B,GAAevC,IAAOC,IAAV,2HACnBiE,KAMOhE,GAAQF,IAAOkB,MAAV,oFAED,SAAAd,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,WAChC,SAAAH,GAAK,OAAIA,EAAMC,MAAMqC,GAAGiJ,Y,wCCzB7BC,GAAgB,SAACxL,GAEnB,IACI0E,EAEA1E,EAFA0E,aACA+G,EACAzL,EADAyL,aAIEC,EAAWC,cAEXC,EAA0B,SAACC,GAAD,OAAUH,EAASI,aAAgBD,KAE7DE,EAAoBC,aAAY,SAAA5D,GAAK,OAAIA,EAAM3B,gBAAgBC,YAE/DuF,EAAkBD,aAAY,SAAA5D,GAAK,OAAIA,EAAM8D,eAAeJ,mBAClE,EAA+B9G,mBAAS+G,GAAxC,mBAAOrF,EAAP,KACA,GADA,KAC0C1B,mBAAS,KAAnD,mBAAOmH,EAAP,KAAsBC,EAAtB,KACMC,EAAe3F,EAAS2F,aAI9B7D,qBAAU,WAIN,GAHF8D,QAAQC,IAAI,aAGJ7F,EAAS2F,aAAc,CACzB,IAAIG,EAAgB,GACpBC,OAAOC,KAAKhG,EAAS2F,aAAaM,QAAQC,SAAQ,SAACC,EAAIC,GACnD,IAAMC,EAAUrG,EAAS2F,aAAaM,OAAOE,GAAIE,QAChC,eAAWD,GAC5BN,EAAcM,GAAOC,KAEzBX,EAAiBI,QAGjBJ,EAAiB,MAErB,OAAO,eAER,CAAC1F,IAGJ,IAAMsG,EAAgB,SAACtM,GAEnB,IACIuM,EAYAvM,EAZAuM,aACAC,EAWAxM,EAXAwM,WACAC,EAUAzM,EAVAyM,eACAC,EASA1M,EATA0M,cACAC,EAQA3M,EARA2M,YACAC,EAOA5M,EAPA4M,QACAC,EAMA7M,EANA6M,cACAC,EAKA9M,EALA8M,YACAC,EAIA/M,EAJA+M,QACAC,EAGAhN,EAHAgN,cACAC,EAEAjN,EAFAiN,YACAC,EACAlN,EADAkN,QAGEC,EAAgB,CAClBZ,aAAcA,EACdC,WAAYA,EACZC,eAAgBA,EAChBR,OAAQ,CACJmB,OAAQ,CACJf,QAASO,EACTS,aAAcX,EACdY,WAAYX,GAEhBY,OAAO,2BACA5B,EAAaM,OAAOsB,QADrB,IAEFlB,QAASU,EACTM,aAAcR,EACdS,WAAYR,IAEhBU,OAAQ,CACJnB,QAASa,EACTG,aAAcL,EACdM,WAAYL,MArEC,SAACjH,GAAagF,EAASyC,aAAazH,IA0E7D0H,CAAqB,2BACd1H,GADa,IAEhB2F,aAAcwB,MAMhBQ,EAAeC,mBAAQ,WAIzB,OACI,qCACQ,eAAC,GAAD,CAAqB1M,MAAS,CAAC2M,MAAO,QAAtC,UACE,cAAC,GAAD,CAAwB3M,MAAO,CAAE4M,OAAQ,SAAUC,KAAM,KAAzD,SACI,cAAC,GAAD,wBAIF,cAAC,GAAD,CAAwB7M,MAAO,CAAE4M,OAAQ,SAAUE,aAAc,QAAjE,SACI,cAAC,GAAD,2BAIJ,cAAC,GAAD,CAAwB9M,MAAO,CAAE4M,OAAQ,SAAUE,aAAc,UAAjE,SACI,cAAC,GAAD,4BAhBG,CAAC,EAAG,EAAG,GAsBHC,KAAI,SAACC,EAAI9B,GACpB,IAAM+B,EAAc/B,EAAM,EAKpBgC,EAAe3C,EAAcW,GAE7BiC,EAAS,UAAMF,GACfG,EAAU,gBAAYH,GACtBI,EAAU,sBAAkBJ,GAC5BK,EAAQ,oBAAgBL,GAC9B,OACI,eAAC,GAAD,CAAqBjN,MAAO,CAAC2M,MAAM,OAAQ/I,SAAU,SAArD,UAEI,eAAC,GAAD,CAAqB5D,MAAO,CAAEuN,eAAgB,gBAAiBZ,MAAO,OAAQa,UAAW,UAAzF,UACI,cAAC,GAAD,UAAeL,IACf,cAAC,EAAD,CACI7E,KAAM8E,EACN9N,OAAQ,aACR6J,QAASoB,EAAcW,GACvBnM,SAAU,WACNyL,EAAiB,2BACVD,GADS,kBAEXW,GAAOgC,WAKxB,eAAC,GAAD,WACI,cAAC,GAAD,CAAwBlN,MAAO,CAAE4M,OAAQ,UAAzC,SAII,cAAC,EAAD,CACI5K,UAAWkL,EACX5N,OAAQ,aACRN,SACI,SAAC2E,GACG,GAAIA,EAAO,CACP,IAAM8J,EAAW9J,EAAMI,MAAM,KAC7B,OAAO2J,MAASC,IAAI,CAAE,KAAQF,EAAS,GAAI,OAAUA,EAAS,OAI1ExO,UAAW,SAAC0E,GACR,OAAOE,aAAgBF,EAAMiK,OAAO,aAExCtF,KAAM+E,EACNrN,MAAO,CAAE6M,KAAM,WAAYgB,QAAS,OAAQC,SAAU,OAAQC,UAAW,SAAUC,gBAAiB,WACpGrG,eAAgB,CAAEgF,MAAO,UACzBsB,UAAU,EACVC,YAAY,EACZC,YAAY,EACZ/M,UAAU,MACVgN,YAAU,EACVR,OAAQ,UACRS,aAAc,MACdC,YAAY,EACZzG,iBAAkB6F,MAASC,IAAI,CAAE,KAAQ,EAAG,OAAU,IACtD/F,aAAc8F,MAASC,IAAI,CAAE,KAAQ,EAAG,OAAU,QAG1D,cAAC,GAAD,CAAwB3N,MAAO,CAAE4M,OAAQ,UAAzC,SAII,cAAC,EAAD,CACI5K,UAAWkL,EACX5N,OAAQ,aACRN,SACI,SAAC2E,GACG,GAAIA,EAAO,CACP,IAAM8J,EAAW9J,EAAMI,MAAM,KAC7B,OAAO2J,MAASC,IAAI,CAAE,KAAQF,EAAS,GAAI,OAAUA,EAAS,OAI1ExO,UAAW,SAAC0E,GACR,OAAOE,aAAgBF,EAAMiK,OAAO,aAExCtF,KAAMgF,EACNtN,MAAO,CAAE6M,KAAM,WAAYgB,QAAS,OAAQC,SAAU,OAAQC,UAAW,SAAUC,gBAAiB,WACpGrG,eAAgB,CAAEgF,MAAO,OAAQjJ,WAAY,QAC7CuK,UAAU,EACVC,YAAY,EACZC,YAAY,EACZ/M,UAAU,MACVgN,YAAU,EACVR,OAAQ,UACRS,aAAc,MACdC,YAAY,EACZzG,iBAAkB6F,MAASC,IAAI,CAAE,KAAQ,EAAG,OAAU,IACtD/F,aAAc8F,MAASC,IAAI,CAAE,KAAQ,EAAG,OAAU,sBAWvF,CAAClD,EAAcF,IAElB,OACI,cAAC,IAAD,CACIgE,cAAe,CACXlD,aAAcZ,EAAaY,aAC3BC,WAAYb,EAAaa,WACzBE,cAAef,EAAaM,OAAOmB,OAAOC,aAC1CV,YAAahB,EAAaM,OAAOmB,OAAOE,WACxCV,QAASjB,EAAaM,OAAOmB,OAAOf,QACpCQ,cAAelB,EAAaM,OAAOsB,OAAOF,aAC1CP,YAAanB,EAAaM,OAAOsB,OAAOD,WACxCP,QAASpB,EAAaM,OAAOsB,OAAOlB,QACpCW,cAAerB,EAAaM,OAAOuB,OAAOH,aAC1CJ,YAAatB,EAAaM,OAAOuB,OAAOF,WACxCJ,QAASvB,EAAaM,OAAOuB,OAAOnB,QACpCI,eAAgBd,EAAac,gBAIjCiD,iBAAkBC,KAClBC,kBAAkB,EAClBC,iBAAiB,EACjBC,gBAAgB,EAEhBC,SAAQ,uCAAE,WAAO/P,EAAP,oBAAAgQ,EAAA,sDAAiBC,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,WAAhC,EAA4CC,aAA5C,EAA0DC,UAEhEH,GAAc,GACd3D,EAActM,GACdiQ,GAAc,GACdC,EAAW,IACXhF,GAAwB,GANlB,2CAAF,wDAtBZ,SA+BK,SAAAmF,GAWOA,EARAC,WAQAD,EAPAE,oBAOAF,EANArQ,OAMAqQ,EALAG,OAJJ,IAKI/G,EAIA4G,EAJA5G,QAIA4G,EAHAZ,cAGAY,EAFAJ,cAEAI,EADAF,aAOJ,OAJIpE,OAAOC,KAAKvC,GAASpD,OAAS,GAC9B6E,GAAwB,GAIxB,eAAC,IAAD,CACIhK,MAAO,CACHgO,gBAAiBlL,EAAapC,GAAGnC,QACjCgR,UAAWzM,EAAa0M,WACxBC,QAAS,QACTC,aAAc,QACd7B,QAAS,OACT8B,cAAe,UAPvB,UAUI,eAAC,GAAD,WACI,eAAC,GAAD,CAAqB3P,MAAO,CAAEuN,eAAgB,gBAAiBqC,aAAc,UAA7E,UACI,cAAC,GAAD,6BAGA,cAAC,EAAD,CACItQ,OAAQ,aACRN,SACI,SAAC2E,GACG,GAAIA,EAAO,CACP,IAAM8J,EAAW9J,EAAMI,MAAM,KAC7B,OAAO2J,MAASC,IAAI,CAAE,KAAQF,EAAS,GAAI,OAAUA,EAAS,OAI1ExO,UAAW,SAAC0E,GACR,OAAOE,aAAgBF,EAAMiK,OAAO,aAExCtF,KAAM,eACNtI,MAAO,CAAE6M,KAAM,WAAYgB,QAAS,OAAQC,SAAU,OAAQC,UAAW,SAAUC,gBAAiB,WACpGrG,eAAgB,CAAEgF,MAAO,QACzBsB,UAAU,EACVkB,aAAW,EACXhB,YAAY,EACZ/M,UAAU,MACVgN,YAAU,EACVR,OAAQ,UACRS,aAAc,MACdC,YAAY,EACZzG,iBAAkB6F,MAASC,IAAI,CAAE,KAAQ,EAAG,OAAU,IACtD/F,aAAc8F,MAASC,IAAI,CAAE,KAAQ,EAAG,OAAU,SAG1D,eAAC,GAAD,CAAqB3N,MAAO,CAAEuN,eAAgB,gBAAiBsC,aAAc,oBAAqBD,aAAc,SAAUE,cAAe,UAAzI,UACI,cAAC,GAAD,2BAGA,cAAC,EAAD,CACIxQ,OAAQ,aACRN,SACI,SAAC2E,GACG,GAAIA,EAAO,CACP,IAAM8J,EAAW9J,EAAMI,MAAM,KAC7B,OAAO2J,MAASC,IAAI,CAAE,KAAQF,EAAS,GAAI,OAAUA,EAAS,OAI1ExO,UAAW,SAAC0E,GACR,OAAOE,aAAgBF,EAAMiK,OAAO,aAExCtF,KAAM,aACNX,eAAgB,CAAEgF,MAAO,QACzB3M,MAAO,CAAE6M,KAAM,WAAYgB,QAAS,OAAQC,SAAU,OAAQC,UAAW,SAAUC,gBAAiB,WACpGC,UAAU,EACVE,YAAY,EACZ/M,UAAU,MACVgN,YAAU,EACVR,OAAQ,UACRS,aAAc,MACdC,YAAY,EACZzG,iBAAkB6F,MAASC,IAAI,CAAE,KAAQ,EAAG,OAAU,IACtD/F,aAAc8F,MAASC,IAAI,CAAE,KAAQ,EAAG,OAAU,SAI1D,cAAC,GAAD,CAAqB3N,MAAO,CAAEuN,eAAgB,iBAA9C,SACI,cAAC,GAAD,yBAID1D,GACC,eAAC,GAAD,CAAqB7J,MAAO,CAAEuN,eAAgB,iBAA9C,UACI,cAAC,GAAD,8BAGA,cAAC,IAAD,CACIjF,KAAM,iBACNnJ,YAAY,MACZ4Q,eAAgBC,IAChBC,iBAAkBjS,GAClBgC,MAAO,CACH,SAAY,OACZ,WAAc,MACd,aAAgB,QAChB,UAAa,IACb,MAAS,gBAO7B,cAAC,EAAD,UACKyM,IAKL,cAAC,IAAD,CAAQnN,OAAQ,WAAY0C,UAAaqI,EAAiB6F,KAAM,SAAUlQ,MAAS,CAAC4M,OAAQ,wBAA5F,SAAwH/C,EAAe,qBAAuB,8BAStLD,GAAcvJ,aAAe,CACzBwJ,cAAc,GAGHD","file":"static/js/30.78d4ede6.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`\n\nexport const Label = styled.p`\n    margin: 0;\n    font-family: ${props => props.theme.font.primary};\n    font-size: ${props => props.theme.fontSize.sz3};\n    user-select: none;\n    margin-right: .5rem;\n    white-space: nowrap;\n`","import React, { useState, } from 'react';\nimport PropTypes from 'prop-types';\n\n// Import styles\nimport * as styled from './sort_dropdown.style'\n\n// Import components\nimport DropDownSearch from '../drop_down_search_v2/drop_down_search'\nimport RotateButton from '../rotate_button/rotate_button'\n\nconst SortDropDown = (props) => {\n\n    const {\n        labelField,\n        valueField,\n        options,\n        values,\n        onChange,\n        mapInput,\n        mapOutput,\n\n        label,\n        placeholder,\n\n        labelStyle,\n        dropDownSearchStyle,\n        schema,\n        containerCss,\n        dropdownCss,\n        valueCss,\n        portal,\n        maxDropdownWidth,\n\n        orderEnabled,\n        onChangeOrderDirection,\n        rotateButtonContainerCss,\n        rotateButtonIconCss,\n\n\n        ...rest\n    } = props || {}\n\n\n    return (\n        <styled.Container>\n            <styled.Label style={{ ...labelStyle }}>{label}</styled.Label>\n            <DropDownSearch\n                maxDropdownWidth={maxDropdownWidth}\n                portal={portal}\n                placeholder={placeholder}\n                containerCss={containerCss}\n                dropdownCss={dropdownCss}\n                valueCss={valueCss}\n                options={options}\n                onChange={(values) => {\n                    onChange(mapOutput(values[0]))\n                }}\n                values={mapInput(values)}\n                labelField={labelField}\n                valueField={valueField}\n                schema={schema}\n                style={{ ...dropDownSearchStyle }}\n            />\n            {orderEnabled &&\n                <RotateButton\n                    schema={schema}\n                    iconName1={\"fas fa-arrow-up\"}\n                    containerCss={rotateButtonContainerCss}\n                    iconCss={rotateButtonIconCss}\n\n                    onStateOne={() => {\n                        onChangeOrderDirection('ascending')\n                    }}\n                    onStateTwo={() => {\n                        onChangeOrderDirection('descending')\n                    }}\n                />\n            }\n\n        </styled.Container >\n    )\n\n}\n\n// Specifies propTypes\nSortDropDown.propTypes = {\n    style: PropTypes.object,\n    mapInput: PropTypes.func,\n    mapOutput: PropTypes.func,\n    orderEnabled: PropTypes.bool,\n};\n\n// Specifies the default values for props:\nSortDropDown.defaultProps = {\n    label: 'Sort By:',\n    orderEnabled: false,\n    onChange: null,\n    mapInput: (val) => val,\n    mapOutput: (val) => val,\n    style: {}\n};\n\n\nexport default SortDropDown","import styled from 'styled-components'\n\nexport const RowContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n\n    // width: 100%;\n    min-width: 25rem;\n    max-width: 45rem;\n`\n\nexport const DateSelectorIcon = styled.i`\n    font-size: 1.5rem;\n    margin-right: 1rem;\n    margin-left: 1rem;\n    color: ${props => props.theme.bg.septenary};\n\n    &:hover{\n        cursor:pointer;\n    }\n`\n\nexport const DateSelectorTitle = styled.h1`\n    font-size: ${props => props.theme.fontSize.sz2};\n    font-family: ${props => props.theme.font.primary};\n    color: ${props => props.theme.bg.septenary};\n\n    margin: 0rem .5rem;\n\n`\nexport const LoadingIcon = styled.i`\n    font-size: 1.5rem;\n`","import React from 'react';\n\n// Import Styles\nimport * as styled from './day_selector.style'\n\nconst DaySelector = (props) => {\n\n    const {\n        date,\n        dateIndex,\n        loading,\n        mapInput,\n        mapOutput,\n        onChange,\n    } = props\n\n    return (\n        <styled.RowContainer>\n            <styled.DateSelectorIcon\n                className='fas fa-chevron-left'\n                onClick={() => {\n                    const index = dateIndex + 1\n                    onChange(mapOutput(index))\n                }}\n            />\n            {loading ?\n                <styled.LoadingIcon className=\"fas fa-circle-notch fa-spin\" />\n                :\n                <styled.DateSelectorTitle>{mapInput(date)}</styled.DateSelectorTitle>\n\n            }\n\n            {/* If the current dateIndex is 0, then have a blank icon that does nothing. Can't go to the future now can we dummy */}\n            {dateIndex !== 0 ?\n                <styled.DateSelectorIcon\n                    className='fas fa-chevron-right'\n                    onClick={() => {\n                        const index = dateIndex - 1\n                        onChange(mapOutput(index))\n                    }}\n                />\n                :\n                <styled.DateSelectorIcon />\n\n            }\n        </styled.RowContainer>\n    )\n}\n\nDaySelector.propTypes = {\n}\n\nDaySelector.defaultProps = {\n    date: '',\n    loading: false,\n    mapInput: (val) => val,\n    mapOutput: (val) => val,\n}\n\nexport default DaySelector","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    /* position: absolute; */\n    /* left: 12rem; */\n    /* bottom: 3rem; */\n    /* right: 12rem; */\n    /* border-bottom: 0.02rem solid white; */\n    z-index: 1;\n    margin-bottom: 1rem;\n    display: flex;\n    justify-content:center;\n\n\n`;\n\nexport const TimespanButton = styled.button`\n    background: none;\n    border: none;\n    position: relative;\n\n    display: inline-block;\n    width: 5rem;\n    height: 2rem;\n    // margin: 0rem .25rem;\n    \n    color: ${props => props.selected ? props.theme.schema.locations : props.theme.bg.quaternary};\n    line-height: 2rem;\n    text-align: center;\n    font-size: 1rem;\n    font-weight: ${props => props.selected ? 600 : 400};\n    font-family: ${props => props.theme.font.primary};\n\n    border-bottom: ${props => props.selected ? '0.14rem' : '0.02rem'} solid ${props => props.selected ? props.color : props.theme.quaternary};\n    box-sizing: border-box;\n\n    transition: color 0.25s;\n\n    cursor: pointer;\n    z-index: 2;\n    &:focus {outline:0;}\n    &:hover {\n        color: ${props => props.color};\n    }\n`;","import React from 'react';\n\nimport * as styled from './time_span_selector.style'\n\nconst TimeSpanSelector = (props) => {\n\n    const {\n        timeSpan,\n        setTimeSpan,\n        timespanDisabled,\n    } = props\n\n    return (\n        <styled.Container>\n            {/* <styled.TimespanButton selected={timeSpan == 'live'} onClick={() => setTimeSpan('live')}>Live</styled.TimespanButton> */}\n            <styled.TimespanButton disabled={timespanDisabled} selected={(timeSpan === 'day' || timeSpan === 'line')} onClick={() => setTimeSpan('day')}>Day</styled.TimespanButton>\n            <styled.TimespanButton disabled={timespanDisabled} selected={timeSpan === 'week'} onClick={() => setTimeSpan('week')}>Week</styled.TimespanButton>\n            <styled.TimespanButton disabled={timespanDisabled} selected={timeSpan === 'month'} onClick={() => setTimeSpan('month')}>6 Weeks</styled.TimespanButton>\n            <styled.TimespanButton disabled={timespanDisabled} selected={timeSpan === 'year'} onClick={() => setTimeSpan('year')}>Year</styled.TimespanButton>\n            {/* <styled.TimespanButton schema={schema} selected={timeSpan == 'all'} onClick={() => setTimeSpan('all')}>ALL</styled.TimespanButton> */}\n        </styled.Container>\n    )\n}\n\nexport default TimeSpanSelector","import styled, { css } from \"styled-components\";\n\nimport * as layoutCss from '../../../../../common_css/layout';\nimport * as commonCss from '../../../../../common_css/common_css'\nimport * as buttonCss from '../../../../../common_css/button_css'\n\nexport const HeaderSection = styled.div`\n    ${commonCss.columnContainer}\n    background-color: ${props => props.theme.bg.secondary};\n    margin: .25rem;\n    border-radius: .5rem;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    padding: .25rem;\n`\n\nexport const ChartTypeButton = styled.button`\n    ${buttonCss.button}\n    margin: .5rem;\n    background-color: ${props => !!props.selected ? props.theme.schema.statistics.solid : props.theme.bg.tertiary};\n    width: 5rem;\n    height: 2rem;\n\n`\n\nexport const HeaderLabel = styled.p`\n    margin: 0;\n    font-family: ${props => props.theme.font.primary};\n    font-size: ${props => props.theme.fontSize.sz2};\n    user-select: none;\n`\n\nexport const ShiftSettingsContainer = styled.div`\n    position: absolute;\n    top: 6rem;\n`\n\nexport const HeaderBar = styled.div`\n\t${layoutCss.headerStyle};\n    width: 100%;\n    max-height: 7rem;\n    background-color: ${props => props.theme.bg.primary};\n    display: flex;\n    flex-direction: row;\n    justify-content: start;\n    padding: .5rem;\n`\n\nexport const RowContainer = styled.div`\n    ${commonCss.rowContainer}\n    justify-content: center;\n`","import React, { useState, } from 'react';\n\n// Import Styles\nimport * as styled from './statistics_header.style'\n\n// Import basic components\nimport SortDropdown from '../../../../basic/sort_dropdown/sort_dropdown'\n\n// Import Components\nimport ShiftSettings from '../../../content/settings/shift_settings/shift_settings'\nimport DaySelector from '../../../../basic/day_selector/day_selector'\nimport TimeSpanSelector from '../../../../basic/timespan_selector/time_span_selector'\n\nconst StatisticsHeader = (props) => {\n\n    const {\n        themeContext,\n        loading,\n        handleTimeSpan,\n        timeSpan,\n        handleSetShowReport,\n        showReport,\n        date,\n        dateIndex,\n        handleSelectSort,\n        sortLevel,\n    } = props || {}\n\n    const dropDownOptions = [\n        { label: 'Product Group', value: 'product_group_id' },\n        { label: 'Lot', value: 'lot_id' },\n        { label: 'Route', value: 'route_id' }\n\n    ]\n\n    const [showShiftSettings, setShowShiftSettings] = useState(false)\n\n    const renderShiftSettings = () => {\n        return (\n            <styled.ShiftSettingsContainer>\n                <ShiftSettings themeContext={themeContext} />\n            </styled.ShiftSettingsContainer>\n        )\n    }\n\n    return (\n        <styled.HeaderBar>\n            <styled.HeaderSection>\n                <TimeSpanSelector\n                    // timespanDisabled={timespanDisabled}\n                    setTimeSpan={(timeSpan) => handleTimeSpan(timeSpan, 0)}\n                    timeSpan={timeSpan}\n                    timespanDisabled={timeSpan === 'line'}\n                />\n                <DaySelector\n                    date={date}\n                    dateIndex={dateIndex}\n                    loading={loading}\n                    onChange={(newIndex) => {\n                        handleTimeSpan(timeSpan, newIndex)\n                    }}\n                />\n            </styled.HeaderSection>\n\n            <styled.HeaderSection>\n                <styled.HeaderLabel>Chart Type</styled.HeaderLabel>\n                <styled.RowContainer>\n                    <styled.ChartTypeButton\n                        selected={!showReport && timeSpan !== 'line'}\n                        onClick={() => {\n                            handleSetShowReport(false)\n                            handleTimeSpan(timeSpan === 'line' ? 'day' : timeSpan, dateIndex)\n                        }}\n                    >\n                        Bar\n                </styled.ChartTypeButton>\n\n                    <styled.ChartTypeButton\n                        selected={!showReport && timeSpan === 'line'}\n                        onClick={() => {\n                            handleSetShowReport(false)\n                            handleTimeSpan('line', dateIndex)\n                        }}\n                    >\n                        Line\n                </styled.ChartTypeButton>\n\n                    <styled.ChartTypeButton\n                        selected={!!showReport && timeSpan !== 'line'}\n                        onClick={() => {\n                            handleSetShowReport(true)\n                            handleTimeSpan(timeSpan === 'line' ? 'day' : timeSpan, dateIndex)\n                        }}\n                    >\n                        Reports\n                </styled.ChartTypeButton>\n                </styled.RowContainer>\n            </styled.HeaderSection>\n\n            {!showReport && timeSpan === 'line' &&\n                < styled.HeaderSection style={{ position: 'relative' }}>\n                    <styled.RowContainer style={{ alignItems: 'center' }} onClick={() => setShowShiftSettings(!showShiftSettings)}>\n                        <styled.HeaderLabel>Shift Settings</styled.HeaderLabel>\n                        <i style={{ marginLeft: '.5rem' }} className={showShiftSettings ? 'fas fa-chevron-up' : 'fas fa-chevron-down'} />\n                    </styled.RowContainer>\n                    {showShiftSettings && renderShiftSettings()}\n                </styled.HeaderSection>\n            }\n\n            {!showReport && timeSpan !== 'line' &&\n                <styled.HeaderSection>\n                    <SortDropdown\n                        options={dropDownOptions}\n                        labelField={'label'}\n                        valueField={'label'}\n                        dropDownSearchStyle={{ minWidth: '10rem' }}\n                        onChange={(val) => {\n                            handleSelectSort(val)\n                        }}\n                        values={[sortLevel]}\n                    />\n                </styled.HeaderSection>\n            }\n\n        </styled.HeaderBar >\n    )\n}\n\nexport default StatisticsHeader","// Import Store\nimport store from '../../redux/store/index'\nimport moment from 'moment';\n\nexport const getMinutesFromMoment = (m) => {\n    return m.minutes() + m.hours() * 60;\n}\n\n/**\n * Takes in time12h which is a string: 1:30 pm\n * Converts that string into a 24h string: 13:30\n * @param {*} time12h \n */\nexport const convert12hto24h = (time12h) => {\n    const [numericTime, modifier] = time12h.split(' ');\n\n    let [hours, minutes] = numericTime.split(':');\n\n    if (hours === '12' && (modifier === 'AM' || modifier === 'am')) {\n        hours = '00';\n    } else if (hours === '12' && (modifier === 'PM' || modifier === 'pm')) {\n        hours = '12';\n    }\n\n    if ((modifier === 'PM' || modifier === 'pm') && hours !== '12') {\n        hours = parseInt(hours, 10) + 12;\n    }\n    return `${hours}:${minutes}`\n}\n\n/**\n * Takes in a string time24h: 13:30\n * Converts that string into a 12h string: 1:30 pm\n * @param {*} time24h \n */\nexport const convert24hto12h = (time24h) => {\n    let modifier = 'am'\n\n    let [hours, minutes] = time24h.split(':');\n\n    hours = parseInt(hours)\n\n    if (hours >= 12) {\n        if (hours > 12) {\n            hours = hours - 12\n        }\n        modifier = 'pm'\n    }\n\n    if (minutes.length === 1) {\n        minutes = `0${minutes}`\n    }\n\n    return `${hours}:${minutes} ${modifier}`\n\n}\n\n/**\n * Takes in a string: 1 pm\n * Converts that string to 24 hours: 13:000\n * @param {*} string \n */\nexport const convertTimeStringto24h = (string) => {\n    let [hour, modifier] = string.split(' ');\n    hour = parseInt(hour)\n\n    // If pm and not 12pm then add 12\n    if (modifier === 'pm' && hour !== 12) {\n        hour = hour + 12\n    }\n\n    // If hour is 12pmm, then set to 0\n    if (hour === 12 && modifier === 'pm') {\n        hour = 0\n    }\n\n    // Convert back to string\n    // Add 0 to front if need be\n    if (hour < 10) {\n        hour = hour.toString()\n        hour = `0${hour}`\n    }\n    else {\n        hour = hour.toString()\n    }\n\n    return `${hour}:00`\n\n}\n\nexport const convertEpochTo12h = (epoch) => {\n\n    let convertedTime = new Date(epoch * 1000)\n    let hour = convertedTime.getHours()\n    let minute = convertedTime.getMinutes()\n\n    hour = parseInt(hour)\n    minute = parseInt(minute)\n\n    if (hour < 10) {\n        hour = hour.toString()\n        hour = `0${hour}`\n    }\n    else {\n        hour = hour.toString()\n    }\n\n    if (minute < 10) {\n        minute = minute.toString()\n        minute = `0${minute}`\n    }\n    else {\n        minute = minute.toString()\n    }\n\n    return `${hour}:${minute}`\n}\n\n/**\n * Converts 24h string to int\n * '13:00' is converted to 1300\n * @param {*} time24h \n */\nexport const convert24htoInt = (time24h) => {\n    const [hour, minute] = time24h.split(':')\n    return parseInt(`${hour}${minute}`)\n}\n\n/**\n * Converts into to 24h\n * 1300 is converted to '13:00'\n * @param {*} int \n */\nexport const convertIntto24h = (int) => {\n    let hour\n    let minute\n\n    // If the string length is 3, then the hour must start with a 0\n    if (int.toString().length === 3) {\n        hour = `0${int.toString()[0]}`\n        minute = `${int.toString()[1]}${int.toString()[2]}`\n    }\n    else {\n        hour = `${int.toString()[0]}${int.toString()[1]}`\n        minute = `${int.toString()[2]}${int.toString()[3]}`\n    }\n    return `${hour}:${minute}`\n}\n\n/**\n * Converts strings into time\n * time24h string format: 13:00\n * date string format: May 13, 1993\n * @param {*} time24h \n * @param {*} date \n */\nexport const convert24htoEpoch = (time24h, date) => {\n    const epochTime = Date.parse(`${date} ${time24h}`)\n\n    return epochTime\n}\n\nexport const convertDateToLocaleTimeZone = (date, timezone) => {\n    return new Date(date.toLocaleString(\"en-US\", { timeZone: timezone }))\n}\n\nexport const convertDateto12h = (date) => {\n    const settingState = store.getState().settingsReducer\n\n    if (!!settingState?.settings?.timezone?.label) {\n        date = convertDateToLocaleTimeZone(date, settingState?.settings?.timezone?.label)\n    }\n\n    return convert24hto12h(`${date.getHours()}:${date.getMinutes()}`)\n\n}\n\n\nexport const isDateToday = (date) => {\n    const today = new Date()\n    const incomingDate = new Date(date)\n    // call setHours to take the time out of the comparison\n    if (incomingDate.setHours(0, 0, 0, 0) === today.setHours(0, 0, 0, 0)) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n// Takes shift details and returns total work time in seconds\nexport const convertShiftDetailsToWorkingTime = (shiftDetails) => {\n    let totalBreakTime = 0\n\n    Object.values(shiftDetails.breaks)\n        .sort((a, b) => a.startOfBreak - b.startOfBreak)\n        .forEach(br => {\n            if (br.enabled) {\n\n                const start = moment.duration(br.startOfBreak).asSeconds()\n                const end = moment.duration(br.endOfBreak).asSeconds()\n\n                const breakLength = end - start\n                totalBreakTime += breakLength\n\n            }\n        })\n\n\n    const startOfShift = moment.duration(shiftDetails.startOfShift).asSeconds()\n    const endOfShift = moment.duration(shiftDetails.endOfShift).asSeconds()\n\n    const workingTime = endOfShift - startOfShift - totalBreakTime\n    return workingTime\n\n}\n\n// Converts time string to \nexport const convertHHMMSSStringToSeconds = (timeStr) => {\n    let [hour, minute, second] = timeStr.split(':')\n\n    hour = parseInt(hour)\n    minute = parseInt(minute)\n    second = parseInt(second)\n\n    const totalSeconds = hour * 60 * 60 + minute * 60 + second\n    return totalSeconds\n}\n\n// Convert Seconds to HHMMSS\nexport const convertSecondsToHHMMSS = (seconds) => {\n    const date = new Date(seconds * 1000).toISOString().substr(11, 8)\n    return date\n}","import styled, {css} from 'styled-components'\n\nexport const Container = styled.button`\n  transition: all 0.2s ease;\n  \n  align-self: stretch;\n  padding: 0 1rem;\n  background: ${props => props.theme.bg.secondary};\n  width: 3.5rem;\n  border: none;\n  border-left: 1px solid ${props => props.theme.bg.quaternary};\n  //border-bottom: 1px solid ${props => props.theme.bg.quinary};\n  outline: none !important;\n  \n  color: ${props => props.theme.textColor};\n\n  &:active {\n    border-bottom: 1px solid ${props => props.theme.schema[props.schema].solid};\n    color: ${props => props.theme.schema[props.schema].solid};\n  }\n  \n  ${props => props.css && props.css};\n`\n\nexport const Icon = styled.i`\n  transition: all 0.2s ease;\n  transition: ${props => `transform ${props.rotationTime}ms ease`};\n  ${props => props.rotate && `transform: rotate(180deg)`};\n  \n  ${props => props.css && props.css};\n`","import React, {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\n\n// styles\nimport * as styled from \"./rotate_button.style\"\n\n// component constant\nconst STATES = {\n\tSTATE_ONE: \"STATE_ONE\",\n\tSTATE_TWO: \"STATE_TWO\"\n}\n\nconst RotateButton = props => {\n\tconst {\n\t\ticonName1,\n\t\tstate,\n\t\trotationTime,\n\t\tonStateOne,\n\t\tonStateTwo,\n\t\tcontainerCss,\n\t\ticonCss,\n\t\tschema\n\t} = props\n\n\tconst [currentState, setCurrentState] = useState(state == 1 ? STATES.STATE_ONE : STATES.STATE_TWO)\t// rotation state\n\tconst [rotate, setRotate] = useState(false)\n\tconst [call, setCall] = useState(false)\n\n\t/*\n\t* sets rotate when currentState changes and calls appropriate callback funcs\n\t* */\n\tuseEffect(() => {\n\t\tif(currentState === STATES.STATE_ONE) {\n\t\t\tsetRotate(false)\n\t\t\tonStateOne()\n\n\t\t}\n\t\telse {\n\t\t\tsetRotate(true)\n\t\t\tonStateTwo()\n\t\t}\n\t}, [currentState])\n\n\treturn (\n\t\t<styled.Container\n\t\t\tcss={containerCss}\n\t\t\tschema={schema}\n\t\t\tonClick={() => {\n\t\t\t\tsetCurrentState(currentState === STATES.STATE_ONE ? STATES.STATE_TWO : STATES.STATE_ONE)\n\t\t\t}}\n\t\t>\n\t\t\t<styled.Icon\n\t\t\t\tschema={schema}\n\t\t\t\tcss={iconCss}\n\t\t\t\trotate={rotate}\n\t\t\t\trotationTime={rotationTime}\n\t\t\t\tclassName={iconName1}\n\t\t\t>\n\t\t\t</styled.Icon>\n\t\t</styled.Container>\n\t)\n}\n\nRotateButton.propTypes = {\n\ticonName1: PropTypes.string,\n\trotationTime: PropTypes.number,\n\tonStateOne: PropTypes.func,\n\tonStateTwo: PropTypes.func,\n}\n\nRotateButton.defaultProps = {\n\ticonName1: \"\",\n\trotationTime: 500,\n\tonStateOne: () => {},\n\tonStateTwo: () => {},\n\tschema: \"default\"\n}\n\nexport default RotateButton\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport TimePicker from \"rc-time-picker\";\nimport \"rc-time-picker/assets/index.css\";\n\nconst DeliTimePicker = ({ className, ...rest }) => (\n  <TimePicker\n    {...rest}\n    className={className}\n    popupClassName={className}\n  />\n);\n\nDeliTimePicker.propTypes = {\n  className: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.instanceOf(moment)\n};\n\nexport default DeliTimePicker;\n","import styled from \"styled-components\";\nimport TimePicker from \"./time_picker\";\nimport { hexToRGBA } from '../../../../../methods/utils/color_utils'\n\nconst StyledTimePicker = styled(TimePicker)`\n\n  & .rc-time-picker-panel-select-option-selected {\n    background-color: ${props => props.schema ? hexToRGBA(props.theme.schema[props.schema].solid, 0.5) : hexToRGBA(props.theme.fg.red, 0.5)};\n    font-weight: normal;\n  }\n\n  & .rc-time-picker-clear,\n  & .rc-time-picker-clear-icon:after {\n    font-size: ${props => props.theme.fontSize.sz4};\n  }\n\n  & .rc-time-picker-panel-select {\n    font-family: ${props => props.theme.font.primary};\n    font-size: 16px;\n    cursor: pointer;\n\n    li:hover {\n        background-color: ${props => props.schema ? hexToRGBA(props.theme.schema[props.schema].solid, 0.1) : hexToRGBA(props.theme.fg.red, 0.1)};\n    }\n  }\n\n  & .rc-time-picker-panel-input {\n    font-family: ${props => props.theme.font.primary};\n    font-size: ${props => props.theme.fontSize.sz4};\n    cursor: pointer;\n  }\n\n  & .rc-time-picker-input {\n    font-family: ${props => props.theme.font.primary};\n    font-size: ${props => props.theme.fontSize.sz4};\n    cursor: pointer;\n    \n    background: ${props => props.theme.bg.secondary};\n\n    ::-webkit-scrollbar {\n      width: 0;\n      height: 0;\n    }\n\n    transition: none;\n  }\n\n`;\n\nexport default StyledTimePicker;\n","import styled from 'styled-components';\nimport TimePicker from './time_picker_field';\nimport {css} from 'styled-components'\n\n\nexport const DefaultContainer = styled.div`\n\tposition: relative;\n`;\n\nexport const DefaultErrorContainerComponent = styled.div`\n    width: auto;\n    height: auto;\n    position: absolute;\n    top: 50%;\n    right: 0.5rem;\n    transform: translateY(-50%);\n    margin: 0;\n    padding: 0;\n    z-index: 500;\n`;\n","// import external modules\nimport React from \"react\";\nimport { useField, useFormikContext } from \"formik\";\nimport TimePicker from './time_picker';\nimport moment from 'moment';\nimport 'rc-time-picker/assets/index.css';\n\n// import components\nimport ErrorTooltip from \"../error_tooltip/error_tooltip\";\n\n// import styles\nimport * as styled from './time_picker_field.style'\nimport PropTypes from \"prop-types\";\nimport {getMessageFromError} from \"../../../../methods/utils/form_utils\";\n\nconst TimePickerField = (props) => {\n\n\tconst {\n\t\tTimePickerCss,\n\t\tContainer,\n\t\tErrorContainerComponent,\n\t\tcontainerStyle,\n\t\tstyle,\n\t\tonChange,\n\t\tdefaultOpenValue,\n\t\tdefaultValue,\n\t\tmapOutput,\n\t\tmapInput,\n\t\t...rest\n\t} = props\n\n\tconst { setFieldValue, setFieldTouched } = useFormikContext();\n\tconst [field, meta] = useField(props);\n\n\tconst {\n\t\tvalue: fieldValue,\n\t\tname: fieldName\n\t} = field\n\n\tconst {\n\t\ttouched,\n\t\terror\n\t} = meta\n\n\tconst hasError = touched && error;\n\tconst errorMessage = getMessageFromError(error);\n\n\treturn (\n\t\t\t<Container\n\t\t\t\tstyle={containerStyle}\n\t\t\t>\n\t\t\t\t<TimePicker\n\t\t\t\t\t{...style}\n\t\t\t\t\t{...field}\n\t\t\t\t\t{...rest}\n\t\t\t\t\tcss={TimePickerCss}\n\t\t\t\t\thasError={hasError}\n\t\t\t\t\t// showSecond={false}\n                    // defaultValue={moment().format()}\n\t\t\t\t\tvalue={!!fieldValue ? mapInput(fieldValue) : mapInput(defaultValue)}\n\t\t\t\t\tonChange={(val) => {\n\n\t\t\t\t\t\tif(!touched) setFieldTouched(fieldName, true)\n\t\t\t\t\t\tsetFieldValue(fieldName, mapOutput(val))\n\n\t\t\t\t\t\tonChange && onChange(val)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<ErrorTooltip\n\t\t\t\t\tvisible={hasError}\n\t\t\t\t\ttext={errorMessage}\n\t\t\t\t\tContainerComponent={ErrorContainerComponent}\n\t\t\t\t/>\n\t\t\t</Container>\n\t)\n}\n\n// Specifies propTypes\nTimePickerField.propTypes = {\n\tContainer: PropTypes.elementType,\n\tErrorContainerComponent: PropTypes.elementType,\n\tcontainerStyle: PropTypes.object,\n\tstyle: PropTypes.object,\n\tonChange: PropTypes.func,\n\tmapOutput: PropTypes.func,\n\tmapInput: PropTypes.func,\n};\n\n// Specifies the default values for props:\nTimePickerField.defaultProps = {\n\tContainer: styled.DefaultContainer,\n\tErrorContainerComponent: styled.DefaultErrorContainerComponent,\n\tcontainerStyle: {},\n\tstyle: {},\n\tonChange: () => {},\n\tmapOutput: val => val,\n\tmapInput: val => val,\n};\n\nexport default TimePickerField;\n","import styled from \"styled-components\";\n\nexport const DefaultContainer = styled.div`\n\tposition: relative;\n`;\n\nexport const DefaultErrorContainerComponent = styled.div`\n    width: auto;\n    height: auto;\n    position: absolute;\n    top: 50%;\n    right: 2rem;\n    transform: translateY(-50%);\n    margin: 0;\n    padding: 0;\n    z-index: 500;\n`;","import React, { useContext } from \"react\";\nimport { useField, useFormikContext } from \"formik\";\nimport Switch from 'react-ios-switch';\nimport ErrorTooltip from \"../error_tooltip/error_tooltip\";\nimport PropTypes from \"prop-types\";\nimport * as styled from \"./switch_field.style\";\nimport {getMessageFromError} from \"../../../../methods/utils/form_utils\";\nimport { ThemeContext } from \"styled-components\";\n\nconst SwitchField = (props) => {\n\n    const {\n        Container,\n        containerStyle,\n        ErrorContainerComponent,\n        style,\n        onChange,\n        mapOutput,\n        mapInput,\n        schema,\n        ...rest\n    } = props\n\n    const { setFieldValue, setFieldTouched } = useFormikContext();\n    const [field, meta] = useField(props);\n\n    const themeContext = useContext(ThemeContext);\n\n    const {\n        value: fieldValue,\n        name: fieldName\n    } = field\n\n    const {\n        touched,\n        error\n    } = meta\n\n    const hasError = touched && error;\n    const errorMessage = getMessageFromError(error);\n\n    return (\n        <Container\n            style={{...containerStyle, transform: 'scale(0.9)'}}\n        >\n            <Switch\n                checked={mapInput(fieldValue)}\n                onColor={!!schema && !!themeContext.schema[schema] ? themeContext.schema[schema].solid : themeContext.schema.default.solid}\n                {...rest}\n                onChange={val => {\n                    if(!touched) setFieldTouched(fieldName, true);\n                    setFieldValue(fieldName, mapOutput(val))\n\n                    onChange && onChange(val)\n                }}\n                style={{...style}}\n            />\n            {/*<ErrorTooltip*/}\n            {/*    visible={hasError}*/}\n            {/*    text={errorMessage}*/}\n            {/*    ContainerComponent={ErrorContainerComponent}*/}\n            {/*/>*/}\n\n        </Container>\n    );\n};\n\n// Specifies propTypes\nSwitchField.propTypes = {\n    Container: PropTypes.elementType,\n    ErrorContainerComponent: PropTypes.elementType,\n    containerStyle: PropTypes.object,\n    style: PropTypes.object,\n    onChange: PropTypes.func,\n    mapInput: PropTypes.func,\n    mapOutput: PropTypes.func,\n};\n\n// Specifies the default values for props:\nSwitchField.defaultProps = {\n    Container: styled.DefaultContainer,\n    ErrorContainerComponent: styled.DefaultErrorContainerComponent,\n    containerStyle: {},\n    style: {},\n    onChange: () => {},\n    mapInput: (val) => val,\n    mapOutput: (val) => val\n};\n\nexport default SwitchField;\n","import styled from 'styled-components'\nimport * as buttonCss from '../../../../../common_css/button_css'\nimport * as commonCss from '../../../../../common_css/common_css'\nimport { LightenDarkenColor } from '../../../../../methods/utils/color_utils'\n\nexport const BreakContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    height: fit-content;\n    background-color: ${props => props.theme.bg.secondary};\n    border-radius: .5rem;\n`\n\nexport const BreakLabel = styled.label`\n  font-size: ${props => props.theme.fontSize.sz4};\n  font-family: ${props => props.theme.font.primary};\n  color: ${props => props.theme.bg.senary};\n`\n\nexport const ChartButton = styled.button`\n    ${buttonCss.button};\n    background-color:${props => props.theme.schema.statistics.solid};\n    color: ${props => props.theme.bg.primary};\n    margin-top: .5rem;\n    margin-bottom: 0.1rem;\n    font-size: 1.25rem;\n    padding: .25rem;\n\n    &:hover {\n      background-color:${props => LightenDarkenColor(props.theme.schema.statistics.solid, -5)};\n    }\n`\n\nexport const ColumnContainer = styled.div`\n    ${commonCss.columnContainer};\n`\n\nexport const RowContainer = styled.div`\n    ${commonCss.rowContainer};\n    justify-content: space-around;\n    position: relative;\n    padding-left: .5rem\n`\n\nexport const Label = styled.label`\n  font-size: 1rem;\n  font-family: ${props => props.theme.font.primary};\n  color: ${props => props.theme.bg.octonary};\n`\n","import React, { useState, useEffect, useMemo} from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment';\nimport { Formik, Form } from 'formik'\n\n// Import Components\nimport TextField from '../../../../basic/form/text_field/text_field.js'\nimport Textbox from '../../../../basic/textbox/textbox'\nimport TimePickerField from '../../../../basic/form/time_picker_field/time_picker_field'\nimport Switch from '../../../../basic/form/switch_field/switch_field'\nimport Button from '../../../../basic/button/button'\n\n// Import Styles\nimport * as styled from './shift_settings.style'\n\n// Import utils\nimport { throughputSchema } from '../../../../../methods/utils/form_schemas'\nimport { convert12hto24h } from '../../../../../methods/utils/time_utils'\n\n// Import actions\nimport { postSettings } from '../../../../../redux/actions/settings_actions'\nimport { pageDataChanged } from '../../../../../redux/actions/sidebar_actions'\n\nconst ShiftSettings = (props) => {\n\n    const {\n        themeContext,\n        enableOutput,\n    } = props\n\n\n    const dispatch = useDispatch()\n    const dispatchPostSettings = (settings) => dispatch(postSettings(settings))\n    const dispatchPageDataChanged = (bool) => dispatch(pageDataChanged(bool))\n\n    const settingsInReducer = useSelector(state => state.settingsReducer.settings)\n\n    const pageInfoChanged = useSelector(state => state.sidebarReducer.pageDataChanged)\n    const [settings,setSettings] = useState(settingsInReducer)\n    const [breaksEnabled, setBreaksEnabled] = useState({})\n    const shiftDetails = settings.shiftDetails;\n\n    // Settings local state here because enabled breaks needs to access breaks outside of formik\n    // See the Switch below for more details\n    useEffect(() => {\n      console.log('QQQQ here')\n\n        // If there's shift details\n        if (!!settings.shiftDetails) {\n            let enabledBreaks = {}\n            Object.keys(settings.shiftDetails.breaks).forEach((br, ind) => {\n                const enabled = settings.shiftDetails.breaks[br].enabled\n                const breakString = `break${ind}`\n                enabledBreaks[ind] = enabled\n            })\n            setBreaksEnabled(enabledBreaks)\n        }\n        else {\n            setBreaksEnabled(null)\n        }\n        return () => {\n        }\n    }, [settings])\n\n    // Submits the shift details to the backend via settings\n    const onSubmitShift = (values) => {\n\n        let {\n            startOfShift,\n            endOfShift,\n            expectedOutput,\n            startOfBreak1,\n            endOfBreak1,\n            switch1,\n            startOfBreak2,\n            endOfBreak2,\n            switch2,\n            startOfBreak3,\n            endOfBreak3,\n            switch3,\n        } = values\n\n        const shiftSettings = {\n            startOfShift: startOfShift,\n            endOfShift: endOfShift,\n            expectedOutput: expectedOutput,\n            breaks: {\n                break1: {\n                    enabled: switch1,\n                    startOfBreak: startOfBreak1,\n                    endOfBreak: endOfBreak1,\n                },\n                break2: {\n                    ...shiftDetails.breaks.break2,\n                    enabled: switch2,\n                    startOfBreak: startOfBreak2,\n                    endOfBreak: endOfBreak2,\n                },\n                break3: {\n                    enabled: switch3,\n                    startOfBreak: startOfBreak3,\n                    endOfBreak: endOfBreak3,\n                },\n            },\n        }\n\n        dispatchPostSettings({\n            ...settings,\n            shiftDetails: shiftSettings,\n        })\n\n\n    }\n\n    const renderBreaks = useMemo(() => {\n\n        const numberOfBreaks = [0, 1, 2]\n\n        return (\n            <>\n                    <styled.RowContainer style = {{width: '100%'}}>\n                      <styled.ColumnContainer style={{ margin: '.25rem', flex: '3'}}>\n                          <styled.BreakLabel>\n                              Break #\n                      </styled.BreakLabel>\n                      </styled.ColumnContainer>\n                        <styled.ColumnContainer style={{ margin: '.25rem', paddingRight: '2rem'}}>\n                            <styled.BreakLabel>\n                                Start Time\n                        </styled.BreakLabel>\n                        </styled.ColumnContainer>\n                        <styled.ColumnContainer style={{ margin: '.25rem', paddingRight: '1.5rem'}}>\n                            <styled.BreakLabel>\n                                End Time\n                        </styled.BreakLabel>\n                        </styled.ColumnContainer>\n                    </styled.RowContainer>\n                {\n                    numberOfBreaks.map((bk, ind) => {\n                        const adjustedInd = ind + 1\n\n                        // This uses useState\n                        // The reasoning behind this, is to be able to enable/disable switches without going through formik submit\n                        // This also allows to enable a break, but not effect the graph until submitted\n                        const breakEnabled = breaksEnabled[ind]\n\n                        const breakName = `${adjustedInd}`\n                        const switchName = `switch${adjustedInd}`\n                        const breakStart = `startOfBreak${adjustedInd}`\n                        const breakEnd = `endOfBreak${adjustedInd}`\n                        return (\n                            <styled.RowContainer style={{width:'100%', minWidth: '20rem' }}>\n\n                                <styled.RowContainer style={{ justifyContent: 'space-between', width: '100%', marginTop: '.25rem'}}>\n                                    <styled.Label>{breakName}</styled.Label>\n                                    <Switch\n                                        name={switchName}\n                                        schema={'statistics'}\n                                        checked={breaksEnabled[ind]}\n                                        onChange={() => {\n                                            setBreaksEnabled({\n                                                ...breaksEnabled,\n                                                [ind]: !breakEnabled\n                                            })\n                                        }}\n                                    />\n                                </styled.RowContainer>\n                                <styled.RowContainer>\n                                    <styled.ColumnContainer style={{ margin: '.25rem' }}>\n                                        {/* <styled.BreakLabel>\n                                        Start of Break\n                                </styled.BreakLabel> */}\n                                        <TimePickerField\n                                            disabled={!breakEnabled}\n                                            schema={'statistics'}\n                                            mapInput={\n                                                (value) => {\n                                                    if (value) {\n                                                        const splitVal = value.split(':')\n                                                        return moment().set({ 'hour': splitVal[0], 'minute': splitVal[1] })\n                                                    }\n                                                }\n                                            }\n                                            mapOutput={(value) => {\n                                                return convert12hto24h(value.format('hh:mm a'))\n                                            }}\n                                            name={breakStart}\n                                            style={{ flex: '0 0 7rem', display: 'flex', flexWrap: 'wrap', textAlign: 'center', backgroundColor: '#6c6e78' }}\n                                            containerStyle={{ width: '6.5rem' }}\n                                            showHour={true}\n                                            showMinute={true}\n                                            showSecond={false}\n                                            className=\"xxx\"\n                                            use12Hours\n                                            format={'hh:mm a'}\n                                            autocomplete={\"off\"}\n                                            allowEmpty={false}\n                                            defaultOpenValue={moment().set({ 'hour': 1, 'minute': 0 })}\n                                            defaultValue={moment().set({ 'hour': 1, 'minute': 0 })}\n                                        />\n                                    </styled.ColumnContainer>\n                                    <styled.ColumnContainer style={{ margin: '.25rem' }}>\n                                        {/* <styled.BreakLabel>\n                                        End of Break\n                                    </styled.BreakLabel> */}\n                                        <TimePickerField\n                                            disabled={!breakEnabled}\n                                            schema={'statistics'}\n                                            mapInput={\n                                                (value) => {\n                                                    if (value) {\n                                                        const splitVal = value.split(':')\n                                                        return moment().set({ 'hour': splitVal[0], 'minute': splitVal[1] })\n                                                    }\n                                                }\n                                            }\n                                            mapOutput={(value) => {\n                                                return convert12hto24h(value.format('hh:mm a'))\n                                            }}\n                                            name={breakEnd}\n                                            style={{ flex: '0 0 7rem', display: 'flex', flexWrap: 'wrap', textAlign: 'center', backgroundColor: '#6c6e78' }}\n                                            containerStyle={{ width: '6rem', marginLeft: '1rem' }}\n                                            showHour={true}\n                                            showMinute={true}\n                                            showSecond={false}\n                                            className=\"xxx\"\n                                            use12Hours\n                                            format={'hh:mm a'}\n                                            autocomplete={\"off\"}\n                                            allowEmpty={false}\n                                            defaultOpenValue={moment().set({ 'hour': 1, 'minute': 0 })}\n                                            defaultValue={moment().set({ 'hour': 1, 'minute': 0 })}\n                                        />\n                                    </styled.ColumnContainer>\n                                </styled.RowContainer>\n                            </styled.RowContainer>\n                        )\n                    })\n                }\n            </>\n        )\n\n    }, [shiftDetails, breaksEnabled])\n\n    return (\n        <Formik\n            initialValues={{\n                startOfShift: shiftDetails.startOfShift,\n                endOfShift: shiftDetails.endOfShift,\n                startOfBreak1: shiftDetails.breaks.break1.startOfBreak,\n                endOfBreak1: shiftDetails.breaks.break1.endOfBreak,\n                switch1: shiftDetails.breaks.break1.enabled,\n                startOfBreak2: shiftDetails.breaks.break2.startOfBreak,\n                endOfBreak2: shiftDetails.breaks.break2.endOfBreak,\n                switch2: shiftDetails.breaks.break2.enabled,\n                startOfBreak3: shiftDetails.breaks.break3.startOfBreak,\n                endOfBreak3: shiftDetails.breaks.break3.endOfBreak,\n                switch3: shiftDetails.breaks.break3.enabled,\n                expectedOutput: shiftDetails.expectedOutput,\n            }}\n\n            // validation control\n            validationSchema={throughputSchema}\n            validateOnChange={true}\n            validateOnMount={false}\n            validateOnBlur={true}\n\n            onSubmit={async (values, { setSubmitting, setTouched, validateForm, resetForm }) => {\n\n                setSubmitting(true)\n                onSubmitShift(values)\n                setSubmitting(false)\n                setTouched({})\n                dispatchPageDataChanged(false)\n            }}\n        >\n            {formikProps => {\n\n                const {\n                    submitForm,\n                    setValidationSchema,\n                    values,\n                    errors,\n                    touched,\n                    initialValues,\n                    setSubmitting,\n                    validateForm\n                } = formikProps\n\n                if (Object.keys(touched).length > 0) {\n                    dispatchPageDataChanged(true)\n                }\n\n                return (\n                    <Form\n                        style={{\n                            backgroundColor: themeContext.bg.primary,\n                            boxShadow: themeContext.cardShadow,\n                            padding: '.5rem',\n                            borderRadius: '.5rem',\n                            display: 'flex',\n                            flexDirection: 'column',\n                        }}\n                    >\n                        <styled.ColumnContainer>\n                            <styled.RowContainer style={{ justifyContent: 'space-between', marginBottom: '0.5rem' }}>\n                                <styled.Label>\n                                    Start of Shift\n                            </styled.Label>\n                                <TimePickerField\n                                    schema={'statistics'}\n                                    mapInput={\n                                        (value) => {\n                                            if (value) {\n                                                const splitVal = value.split(':')\n                                                return moment().set({ 'hour': splitVal[0], 'minute': splitVal[1] })\n                                            }\n                                        }\n                                    }\n                                    mapOutput={(value) => {\n                                        return convert12hto24h(value.format('hh:mm a'))\n                                    }}\n                                    name={'startOfShift'}\n                                    style={{ flex: '0 0 7rem', display: 'flex', flexWrap: 'wrap', textAlign: 'center', backgroundColor: '#6c6e78' }}\n                                    containerStyle={{ width: '7rem' }}\n                                    showHour={true}\n                                    formikProps\n                                    showSecond={false}\n                                    className=\"xxx\"\n                                    use12Hours\n                                    format={'hh:mm a'}\n                                    autocomplete={\"off\"}\n                                    allowEmpty={false}\n                                    defaultOpenValue={moment().set({ 'hour': 1, 'minute': 0 })}\n                                    defaultValue={moment().set({ 'hour': 1, 'minute': 0 })}\n                                />\n                            </styled.RowContainer>\n                            <styled.RowContainer style={{ justifyContent: 'space-between', borderBottom: '1px solid #b8b9bf', marginBottom: '0.5rem', paddingBottom: '0.5rem'}}>\n                                <styled.Label>\n                                    End of Shift\n                            </styled.Label>\n                                <TimePickerField\n                                    schema={'statistics'}\n                                    mapInput={\n                                        (value) => {\n                                            if (value) {\n                                                const splitVal = value.split(':')\n                                                return moment().set({ 'hour': splitVal[0], 'minute': splitVal[1] })\n                                            }\n                                        }\n                                    }\n                                    mapOutput={(value) => {\n                                        return convert12hto24h(value.format('hh:mm a'))\n                                    }}\n                                    name={'endOfShift'}\n                                    containerStyle={{ width: '7rem' }}\n                                    style={{ flex: '0 0 7rem', display: 'flex', flexWrap: 'wrap', textAlign: 'center', backgroundColor: '#6c6e78' }}\n                                    showHour={true}\n                                    showSecond={false}\n                                    className=\"xxx\"\n                                    use12Hours\n                                    format={'hh:mm a'}\n                                    autocomplete={\"off\"}\n                                    allowEmpty={false}\n                                    defaultOpenValue={moment().set({ 'hour': 1, 'minute': 0 })}\n                                    defaultValue={moment().set({ 'hour': 1, 'minute': 0 })}\n                                />\n                            </styled.RowContainer>\n\n                            <styled.RowContainer style={{ justifyContent: 'space-between', }}>\n                                <styled.Label>\n                                    Breaks\n                            </styled.Label>\n                            </styled.RowContainer>\n                            {!!enableOutput &&\n                                <styled.RowContainer style={{ justifyContent: 'space-between' }}>\n                                    <styled.Label>\n                                        Expected Output\n                                </styled.Label>\n                                    <TextField\n                                        name={\"expectedOutput\"}\n                                        placeholder='Qty'\n                                        InputComponent={Textbox}\n                                        ContentContainer={styled.RowContainer}\n                                        style={{\n                                            'fontSize': '1rem',\n                                            'fontWeight': '600',\n                                            'marginBottom': '.5rem',\n                                            'marginTop': '0',\n                                            'width': '6rem',\n                                        }}\n                                    />\n                                </styled.RowContainer>\n                            }\n\n                        </styled.ColumnContainer>\n                        <styled.BreakContainer>\n                            {renderBreaks}\n                        </styled.BreakContainer>\n                        {/* <styled.RowContainer>\n\n        </styled.RowContainer> */}\n                        <Button schema={'settings'} disabled = {!pageInfoChanged} type={'submit'} style = {{margin: '.5rem 0rem 0rem 0rem'}}>{!!enableOutput ? 'Calculate and Save' : 'Save Shift Details'}</Button>\n\n                    </Form>\n                )\n            }}\n        </Formik>\n    )\n}\n\nShiftSettings.defaultProps = {\n    enableOutput: true\n};\n\nexport default ShiftSettings\n"],"sourceRoot":""}