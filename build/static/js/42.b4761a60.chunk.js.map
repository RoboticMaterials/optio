{"version":3,"sources":["components/map/amrs/mir100/mir100.js"],"names":["MiR100","props","device","d3","params","useParams","dispatch","useDispatch","useEffect","info","undefined","stationID","_id","widgetPage","id","hoverStationInfo","type","color","DeviceTypes","primaryColor","state_text","style","fill","stroke","strokeWidth","opacity","transform","position","x","y","orientation","scale","imgResolution","width","height","viewBox","svgPath"],"mappings":"sHAAA,0DAgEeA,UAvDA,SAACC,GAAW,IAGnBC,EAEAD,EAFAC,OACAC,EACAF,EADAE,GAGEC,EAASC,cACTC,EAAWC,cAKjBC,qBAAU,WAJuB,IAACC,OAKLC,IAArBN,EAAOO,WAA2BP,EAAOO,YAAcV,EAAMC,OAAOU,KAASR,EAAOS,aAL1DJ,EAMD,CAAEK,GAAIZ,EAAOU,KANHN,EAASS,YAAiBN,OASlE,IAEH,IAGIO,EAAO,OAEPd,EAAM,eAAqB,IAC3Bc,EAAO,SAGX,IAAIC,EAAQC,IAAYF,GAAMG,aAQ9B,MAN0B,kBAAtBjB,EAAOkB,aACPH,EAAQ,OAMR,mBACII,MAAO,CAAEC,KAAML,EAAOM,OAAQN,EAAOO,YAAa,IAAKC,QAAS,OAChEC,UAAS,oBAAexB,EAAOyB,SAASC,EAA/B,YAAoC1B,EAAOyB,SAASE,EAApD,oBAAiE,IAAM3B,EAAOyB,SAASG,YAAc,GAArG,mBAAkH3B,EAAG4B,MAAQ5B,EAAG6B,cAAhI,aAAkJ7B,EAAG4B,MAAQ5B,EAAG6B,cAAhK,KAFb,SAKI,qBAAKJ,EAAE,MAAMC,EAAE,MAAMI,MAAM,KAAKC,OAAO,KAAKC,QAAQ,cAApD,SAEKjB,IAAYF,GAAMoB","file":"static/js/42.b4761a60.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useParams } from 'react-router-dom'\n\nimport { DeviceTypes } from '../../../../constants/device_constants'\n\n// Import Actions\nimport { hoverStationInfo } from '../../../../redux/actions/widget_actions'\n\nconst MiR100 = (props) => {\n\n    const {\n        device,\n        d3\n    } = props\n\n    const params = useParams()\n    const dispatch = useDispatch()\n    const dispatchHoverStationInfo = (info) => dispatch(hoverStationInfo(info))\n\n    // On Load, see if the stationID in the url matches this device and if its showing a widget page\n    // If so, then disptach info to show that widget page\n    useEffect(() => {\n        if (params.stationID !== undefined && params.stationID === props.device._id && !!params.widgetPage) {\n            dispatchHoverStationInfo({ id: device._id })\n\n        }\n    }, [])\n\n    const shouldGlow = false\n\n\n    let type = 'cart'\n\n    if (device['shelf_attached'] > 0) {\n        type = 'shelf'\n    }\n\n    let color = DeviceTypes[type].primaryColor\n\n    if (device.state_text === 'EmergencyStop') {\n        color = 'red'\n    }\n\n\n\n    return (\n        <g\n            style={{ fill: color, stroke: color, strokeWidth: '0', opacity: '0.8' }}\n            transform={`translate(${device.position.x},${device.position.y}) rotate(${360 - device.position.orientation - 90}) scale(${d3.scale / d3.imgResolution},${-d3.scale / d3.imgResolution})`}\n        >\n\n            <svg x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" viewBox=\"0 0 400 400\">\n\n                {DeviceTypes[type].svgPath}\n\n            </svg>\n\n\n        </g>\n    )\n\n}\n\nexport default MiR100"],"sourceRoot":""}