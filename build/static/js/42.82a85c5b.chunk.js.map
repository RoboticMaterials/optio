{"version":3,"sources":["components/side_bar/side_bar_buttons/side_bar_button.style.js","components/side_bar/side_bar_buttons/side_bar_button.js","redux/actions/locations_actions.js","redux/types/locations_types.js","components/side_bar/side_bar_switcher/side_bar_switcher.style.js","components/side_bar/side_bar_switcher/side_bar_switcher.js"],"names":["SideBarButtonWrapper","styled","div","props","mode","currentMode","theme","bg","primary","SideBarButtonIcon","i","schema","solid","quaternary","gradient","widthBreakpoint","tablet","SideBarButtonText","h1","font","locations","SideBarButton","history","useHistory","editingStation","useSelector","state","stationsReducer","editingPosition","positionsReducer","pageInfoChanged","sidebarReducer","pageDataChanged","taskEditing","tasksReducer","editingTask","processEditing","processesReducer","editingProcess","dispatch","useDispatch","dispatchLocationEditing","type","payload","dispatchTaskEditing","tasksActions","dispatchProcessEditing","processesActions","dispatchSetPageDataChanged","bool","useState","confirmDeleteModal","setConfirmDeleteModal","useEffect","handleConfirmationModal","isOpen","title","button_1_text","button_2_text","handleClose","handleOnClick1","location","pathname","push","setShowSideBarPage","handleOnClick2","className","onClick","style","justifyContent","flexGrow","SideBarContainer","SideBarSwitcher","dispatchSetSelectedStation","station","setSelectedStation","dispatchSetSelectedPosition","position","setSelectedPosition","wrapperRef","localReducer","localSettings","MiRMapEnabled","settingsReducer","settings","useRef","url","useLocation","split","ref","page","setMode","deselectTask"],"mappings":"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","file":"static/js/42.82a85c5b.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { hexToRGBA, LightenDarkenColor } from '../../../methods/utils/color_utils';\n\nexport const SideBarButtonWrapper = styled.div`\n\n    // background-color: ${props => props.mode == props.currentMode && props.theme.bg.primary};\n    // box-shadow: ${props => props.mode == props.currentMode && '0px 5px 15px 8px rgba(0,0,0,0.05)'};\n\n    width: 5rem;\n    height: 5rem;\n    border-radius: 2.5rem;\n\n    margin-top: 0.6rem;\n`\n\nexport const SideBarButtonIcon = styled.i`\n    font-size: 1.8rem;\n    padding: 1rem;\n    cursor: pointer;\n    display: flex;\n    flex-direction:column;\n    align-items: center;\n\n    /* THIS METHOD OF USING GRADIENTS DOES NOT WORK ON SAFARI */\n    // You cant stack a color on a gradient, but you CAN stack a gradient on a gradient\n    /* background: ${props => props.mode == props.currentMode ?\n        props.theme.schema[props.mode].solid\n        :\n        props.theme.bg.quaternary};\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent; */\n\n\n    color: ${props => props.mode == props.currentMode ?\n        props.theme.schema[props.mode].solid\n        :\n        props.theme.bg.quaternary};;\n\n    transition: color 0.15s ease;\n\n    &:hover{\n        /* background: ${props => `linear-gradient(rgba(255,255,255,0.2),rgba(255,255,255,0.2)), ` + props.theme.schema[props.mode].gradient}; */\n        /* -webkit-background-clip: text; */\n        /* -webkit-text-fill-color: transparent; */\n        color:${props => props.theme.schema[props.mode].solid};\n    }\n\n    @media (max-width: ${props => props.theme.widthBreakpoint.tablet}){\n        font-size: 2rem;\n        padding: 1rem;\n\n\n    }\n`\nexport const SideBarButtonText = styled.h1`\n  padding-top:.3rem;\n  font-family: ${props => props.theme.font.primary};\n  font-weight: 500;\n  font-size: 0.8rem;\n  color: ${props => props.theme.schema.locations};\n  text-align: center;\n\n  @media (max-width: ${props => props.theme.widthBreakpoint.tablet}){\n      font-size: .7rem;\n\n`\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport * as style from './side_bar_button.style'\n\nimport * as locationActions from '../../../redux/actions/locations_actions'\nimport * as tasksActions from '../../../redux/actions/tasks_actions'\nimport * as processesActions from '../../../redux/actions/processes_actions'\n\nimport { pageDataChanged } from '../../../redux/actions/sidebar_actions'\n\n\nimport ConfirmDeleteModal from '../../basic/modals/confirm_delete_modal/confirm_delete_modal'\n\n\nconst SideBarButton = (props) => {\n\n    const {\n        mode,\n        currentMode\n    } = props\n    const history = useHistory()\n\n    const editingStation = useSelector(state => state.stationsReducer.editingStation)\n    const editingPosition = useSelector(state => state.positionsReducer.editingPosition)\n    const pageInfoChanged = useSelector(state => state.sidebarReducer.pageDataChanged)\n    const taskEditing = useSelector(state => state.tasksReducer.editingTask)\n    const processEditing = useSelector(state => state.processesReducer.editingProcess)\n\n    const dispatch = useDispatch()\n    const dispatchLocationEditing = (props) => dispatch(locationActions.editing(props))\n    const dispatchTaskEditing = (props) => dispatch(tasksActions.editingTask(props))\n    const dispatchProcessEditing = (props) => dispatch(processesActions.editingProcess(props))\n    const dispatchSetPageDataChanged = (bool) => dispatch(pageDataChanged(bool))\n\n\n    const [confirmDeleteModal, setConfirmDeleteModal] = useState(false);\n\n    const locationEditing = !!editingStation ? editingStation : editingPosition\n\n    useEffect(() => {\n        if (taskEditing !== true && processEditing !== true) {\n            dispatchSetPageDataChanged(false)\n        }\n    }, [processEditing, taskEditing, editingStation, editingPosition])\n\n    const handleConfirmationModal = () => {\n        return (\n            <ConfirmDeleteModal\n                isOpen={!!confirmDeleteModal}\n                title={\"Are you sure you want to leave this page? Any changes will not be saved\"}\n                button_1_text={\"Yes\"}\n                button_2_text={\"No\"}\n                handleClose={() => setConfirmDeleteModal(null)}\n                handleOnClick1={() => {\n                    if (props.mode === 'lots') {\n                        const currentPath = history.location.pathname\n                        history.push('/lots/summary')\n\n                        setConfirmDeleteModal(null)\n                        dispatchLocationEditing(false)\n                        dispatchTaskEditing(false)\n                        dispatchProcessEditing(false)\n                        dispatchSetPageDataChanged(false)\n                    }\n\n                    if (props.mode === 'statistics') {\n                        const currentPath = history.location.pathname\n                        history.push('/statistics/summary')\n\n                        setConfirmDeleteModal(null)\n                        dispatchLocationEditing(false)\n                        dispatchTaskEditing(false)\n                        dispatchProcessEditing(false)\n                        dispatchSetPageDataChanged(false)\n                    }\n\n                    else {\n                        props.setShowSideBarPage(props.mode)\n                        setConfirmDeleteModal(null)\n                        dispatchLocationEditing(false)\n                        dispatchTaskEditing(false)\n                        dispatchProcessEditing(false)\n                        dispatchSetPageDataChanged(false)\n                    }\n\n                }}\n                handleOnClick2={() => {\n                    setConfirmDeleteModal(null)\n                }}\n            />\n        )\n    }\n\n\n\n    if (mode === 'locations') {\n\n        return (\n            <>\n                {handleConfirmationModal()}\n                <style.SideBarButtonWrapper\n                    currentMode={currentMode}\n                    mode={mode}\n                >\n                    <style.SideBarButtonIcon\n                        className='fas fa-map-marker-alt'\n                        onClick={() => {\n                            if (currentMode === 'lots') {\n                                props.setShowSideBarPage(mode)\n                                dispatchSetPageDataChanged(false)\n                            }\n\n                            else if (pageInfoChanged) {\n                                setConfirmDeleteModal(true)\n                            }\n                            else { props.setShowSideBarPage(mode) }\n                        }}\n                        currentMode={currentMode}\n                        mode={mode}\n                    >\n                        <style.SideBarButtonText>Locations</style.SideBarButtonText>\n                    </style.SideBarButtonIcon>\n                </style.SideBarButtonWrapper>\n            </>\n        )\n    }\n\n    else if (mode === 'devices') {\n        return (\n            <>\n                {handleConfirmationModal()}\n                <style.SideBarButtonWrapper\n                    currentMode={currentMode}\n                    mode={mode}\n                >\n                    <style.SideBarButtonIcon\n                        className={'icon-rmLogo'}\n                        onClick={() => {\n                            if (currentMode === 'lots') {\n                                props.setShowSideBarPage(mode)\n                                dispatchSetPageDataChanged(false)\n                            }\n\n                            else if (pageInfoChanged) {\n                                setConfirmDeleteModal(true)\n                            }\n                            else { props.setShowSideBarPage(mode) }\n                        }}\n                        currentMode={currentMode}\n                        mode={mode}\n                    >\n                        <style.SideBarButtonText>Devices</style.SideBarButtonText>\n                    </style.SideBarButtonIcon>\n                </style.SideBarButtonWrapper>\n            </>\n        )\n    }\n\n    else if (mode === 'lots') {\n        return (\n            <>\n                {handleConfirmationModal()}\n                <style.SideBarButtonWrapper\n                    currentMode={currentMode}\n                    mode={mode}\n                >\n                    <style.SideBarButtonIcon\n                        className={'fas fa-layer-group'}\n                        onClick={() => {\n                            if (currentMode === 'lots') {\n                                props.setShowSideBarPage(mode)\n                                dispatchSetPageDataChanged(false)\n                            }\n\n                            else if (pageInfoChanged) {\n                                setConfirmDeleteModal(true)\n                            }\n                            else {\n                                const currentPath = history.location.pathname\n                                history.push('/lots/summary')\n                            }\n                        }}\n                        currentMode={currentMode}\n                        mode={mode}\n                    >\n                        <style.SideBarButtonText>Lots</style.SideBarButtonText>\n                    </style.SideBarButtonIcon>\n                </style.SideBarButtonWrapper>\n            </>\n        )\n    }\n\n    else if (mode === 'statistics') {\n        return (\n            <>\n                {handleConfirmationModal()}\n                <style.SideBarButtonWrapper\n                    currentMode={currentMode}\n                    mode={mode}\n                >\n                    <style.SideBarButtonIcon\n                        className={'icon-statistics'}\n                        onClick={() => {\n                            if (currentMode === 'statisticcs') {\n                                props.setShowSideBarPage(mode)\n                                dispatchSetPageDataChanged(false)\n                            }\n\n                            else if (pageInfoChanged) {\n                                setConfirmDeleteModal(true)\n                            }\n                            else {\n                                const currentPath = history.location.pathname\n                                history.push('/statistics/summary')\n                            }\n                        }}\n                        currentMode={currentMode}\n                        mode={mode}\n                    >\n                        <style.SideBarButtonText>Statistics</style.SideBarButtonText>\n                    </style.SideBarButtonIcon>\n                </style.SideBarButtonWrapper>\n            </>\n        )\n    }\n\n\n    else if (mode === 'processes') {\n        return (\n            <>\n                {handleConfirmationModal()}\n                <style.SideBarButtonWrapper\n                    currentMode={currentMode}\n                    mode={mode}\n                >\n                    <style.SideBarButtonIcon\n                        className={'fas fa-route'}\n                        onClick={() => {\n                            if (currentMode === 'lots') {\n                                props.setShowSideBarPage(mode)\n                                dispatchSetPageDataChanged(false)\n                            }\n\n                            else if (pageInfoChanged) {\n                                setConfirmDeleteModal(true)\n                            }\n                            else { props.setShowSideBarPage(mode) }\n                        }}\n                        currentMode={currentMode}\n                        mode={mode}\n                    >\n                        <style.SideBarButtonText>Processes</style.SideBarButtonText>\n                    </style.SideBarButtonIcon>\n                </style.SideBarButtonWrapper>\n            </>\n        )\n    }\n\n    else if (mode === 'scheduler') {\n        return (\n            <>\n                <style.SideBarButtonWrapper\n                    currentMode={currentMode}\n                    mode={mode}\n                >\n                    <style.SideBarButtonIcon\n                        className={'far fa-calendar-alt'}\n                        onClick={() => {\n                            if (currentMode === 'lots') {\n                                props.setShowSideBarPage(mode)\n                                dispatchSetPageDataChanged(false)\n                            }\n\n                            else if (pageInfoChanged) {\n                                setConfirmDeleteModal(true)\n                            }\n                            else { props.setShowSideBarPage(mode) }\n                        }}\n                        currentMode={currentMode}\n                        mode={mode}\n                    >\n                        <style.SideBarButtonText>Schedules</style.SideBarButtonText>\n                    </style.SideBarButtonIcon>\n                </style.SideBarButtonWrapper>\n            </>\n        )\n    }\n\n    else if (mode === 'tasks') {\n        return (\n            <>\n                {handleConfirmationModal()}\n                <style.SideBarButtonWrapper\n                    currentMode={currentMode}\n                    mode={mode}\n                >\n                    <style.SideBarButtonIcon\n                        className={'fa fa-tasks'}\n                        onClick={() => {\n                            if (currentMode === 'lots') {\n                                props.setShowSideBarPage(mode)\n                                dispatchSetPageDataChanged(false)\n                            }\n\n                            else if (pageInfoChanged) {\n                                setConfirmDeleteModal(true)\n                            }\n                            else { props.setShowSideBarPage(mode) }\n                        }}\n                        currentMode={currentMode}\n                        mode={mode}\n                    >\n                        <style.SideBarButtonText>Routes</style.SideBarButtonText>\n                    </style.SideBarButtonIcon>\n                </style.SideBarButtonWrapper>\n            </>\n        )\n    }\n\n    else if (mode === 'settings') {\n        return (\n            <>\n                {handleConfirmationModal()}\n                <div style={{ justifyContent: 'flex-end', flexGrow: '1' }} />\n                <style.SideBarButtonWrapper\n                    currentMode={currentMode}\n                    mode={mode}\n                >\n                    <style.SideBarButtonIcon\n\n                        className={'fas fa-cog'}\n                        onClick={() => {\n                            if (currentMode === 'lots') {\n                                props.setShowSideBarPage(mode)\n                                dispatchSetPageDataChanged(false)\n                            }\n\n                            else if (pageInfoChanged) {\n                                setConfirmDeleteModal(true)\n                            }\n                            else { props.setShowSideBarPage(mode) }\n                        }}\n                        currentMode={currentMode}\n                        mode={mode}\n\n                    >\n                        <style.SideBarButtonText>Settings</style.SideBarButtonText>\n                    </style.SideBarButtonIcon>\n                </style.SideBarButtonWrapper>\n            </>\n        )\n    }\n\n    else {\n        return (\n            <style.SideBarButtonIcon\n                className={\"icon-\" + mode}\n                onClick={() => {\n                    props.setShowSideBarPage(mode)\n                }}\n                currentMode={currentMode}\n                mode={mode}\n            />\n        )\n    }\n\n}\n\nexport default SideBarButton\n","\nimport {\n    EDITING_LOCATION,\n} from '../types/locations_types'\n\nexport const editing = (bool) => {\n    return { type: EDITING_LOCATION, payload: bool }\n}","export const SELECT_LOCATION = 'SELECT_LOCATION'\nexport const DESELECT_LOCATION = 'DESELECT_LOCATION'\nexport const SET_SELECTED_LOCATION = 'SET_SELECTED_LOCATION'\nexport const SET_SELECTED_LOCATION_COPY = 'SET_SELECTED_LOCATION_COPY'\nexport const SET_SELECTED_LOCATION_CHILDREN_COPY = 'SET_SELECTED_LOCATION_CHILDREN_COPY'\nexport const EDITING_LOCATION = 'EDITING_LOCATION'\n","import styled from 'styled-components'\n\nexport const SideBarContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 6rem;\n    margin-top: 0rem;\n\n    transition: width 0.25s ease-in-out;\n\n    @media (max-width: ${props => props.theme.widthBreakpoint.tablet}){\n        width: 4.5rem;\n\n    }\n`","import React, { useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport SideBarButton from '../side_bar_buttons/side_bar_button';\n\nimport * as styled from './side_bar_switcher.style'\nimport { setMode } from '../../../redux/actions/sidebar_actions'\n\nimport { setSelectedStation } from '../../../redux/actions/stations_actions'\nimport { setSelectedPosition } from '../../../redux/actions/positions_actions'\nimport { deselectTask } from '../../../redux/actions/tasks_actions'\nimport { editingTask } from '../../../redux/actions/tasks_actions'\nimport { editingProcess } from '../../../redux/actions/processes_actions'\n\n\n\nconst SideBarSwitcher = (props) => {\n\n    const dispatch = useDispatch()\n    const dispatchSetSelectedStation = (station) => dispatch(setSelectedStation(station))\n    const dispatchSetSelectedPosition = (position) => dispatch(setSelectedPosition(position))\n\n    const dispatchTaskEditing = (props) => dispatch(editingTask(props))\n    const dispatchProcessEditing = (props) => dispatch(editingProcess(props))\n\n    const MiRMapEnabled = useSelector(state => state.localReducer.localSettings.MiRMapEnabled)\n    const mode = useSelector(state => state.sidebarReducer.mode)\n    const serverSettings = useSelector(state => state.settingsReducer.settings)\n    const deviceEnabled = false\n    const wrapperRef = useRef(null)\n\n    const history = useHistory()\n    const url = useLocation().pathname.split('/')[1]\n\n    return (\n        <styled.SideBarContainer ref={wrapperRef}>\n\n            <SideBarButton\n                mode={'locations'}\n                setShowSideBarPage={(page) => {\n                    dispatch(setMode(page));\n                    history.push(`/${page}`)\n                    dispatchTaskEditing(false)\n                    dispatchProcessEditing(false)\n                }}\n                currentMode={url}\n            />\n\n          {/*  <SideBarButton\n                mode={'tasks'}\n                setShowSideBarPage={(page) => {\n                    dispatch(setMode(page));\n                    history.push(`/${page}`)\n                    dispatchSetSelectedStation(null)\n                    dispatchSetSelectedPosition(null)\n                    dispatch(deselectTask())\n                    dispatchProcessEditing(false)\n                    dispatchTaskEditing(false)\n                }}\n                currentMode={url}\n            /> */}\n\n            <SideBarButton\n                mode={'processes'}\n                setShowSideBarPage={(page) => {\n                    dispatch(setMode(page));\n                    history.push(`/${page}`)\n                    dispatchSetSelectedStation(null)\n                    dispatchSetSelectedPosition(null)\n                    dispatch(deselectTask())\n                    dispatchTaskEditing(false)\n                    dispatchProcessEditing(false)\n                }}\n                currentMode={url}\n            />\n\n            {/* Commented out for now, probably going to delete */}\n            {/* <SideBarButton\n                mode={'objects'}\n                setShowSideBarPage={(page) => {\n                    dispatch(setMode(page));\n                    history.push(`/${page}`)\n                    dispatchSetSelectedStation(null)\n                    dispatchSetSelectedPosition(null)\n                    dispatch(deselectTask())\n                }}\n                currentMode={url}\n            /> */}\n            {/* {MiRMapEnabled &&\n              <SideBarButton\n                  mode={'scheduler'}\n                  setShowSideBarPage={(page) => {\n                      dispatch(setMode(page));\n                      history.push(`/${page}`)\n                    dispatchSetSelectedStation(null)\n                    dispatchSetSelectedPosition(null)\n                      dispatch(deselectTask())\n                  }}\n                  currentMode={url}\n              />\n            } */}\n\n            <SideBarButton\n                mode={'lots'}\n                setShowSideBarPage={(page) => {\n                    dispatch(setMode(page));\n                    dispatchTaskEditing(false)\n                }}\n                currentMode={url}\n            />\n\n            <SideBarButton\n                mode={'statistics'}\n                setShowSideBarPage={(page) => {\n                    dispatch(setMode(page));\n                    dispatchTaskEditing(false)\n                }}\n                currentMode={url}\n            />\n\n            {!!deviceEnabled &&\n                <SideBarButton\n                    mode={'devices'}\n                    setShowSideBarPage={(page) => {\n                        dispatch(setMode(page));\n                        history.push(`/${page}`)\n                        dispatchTaskEditing(false)\n                    }}\n                    currentMode={url}\n                />\n            }\n\n            <SideBarButton\n                mode={'settings'}\n                setShowSideBarPage={(page) => {\n                    dispatch(setMode(page));\n                    history.push(`/${page}`)\n                    dispatchSetSelectedStation(null)\n                    dispatchSetSelectedPosition(null)\n                    dispatch(deselectTask())\n                    dispatchTaskEditing(false)\n                }}\n                currentMode={url}\n            />\n\n\n        </styled.SideBarContainer>\n    )\n\n}\n\nexport default SideBarSwitcher\n"],"sourceRoot":""}