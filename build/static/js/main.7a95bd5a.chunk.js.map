{"version":3,"sources":["redux/types/prefixes.js","api/local_api.js","api/stations_api.js","redux/actions/card_actions.js","redux/actions/processes_actions.js","redux/types/data_types.js","api/positions_api.js","redux/actions/positions_actions.js","redux/types/widget_types.js","constants/local_settings_constants.js","api/processes_api.js","methods/utils/string_utils.js","constants/form_constants.js","methods/utils/locations_utils.js","settings/settings.js","redux/types/stations_types.js","components/basic/advanced_calendar_placeholder_button/control_button/control_button.style.js","components/basic/advanced_calendar_placeholder_button/control_button/control_button.js","components/basic/advanced_calendar_placeholder_button/advanced_calendar_placeholder_button.style.js","components/basic/advanced_calendar_placeholder_button/advanced_calendar_placeholder_button.js","redux/types/positions_types.js","methods/utils/number_utils.js","methods/utils/lot_utils.js","redux/types/suffixes.js","methods/utils/card_utils.js","constants/dashboard_constants.js","methods/utils/map_utils.js","common_css/button_css.js","redux/reducers/lot_templates_reducer.js","constants/lot_contants.js","components/basic/button/button.style.js","components/basic/button/button.js","components/basic/textbox/textbox.style.js","components/basic/textbox/textbox.js","theme.js","hooks/useWindowSize.js","api/lot_templates.js","redux/actions/lot_template_actions.js","api/settings_api.js","redux/actions/settings_actions.js","constants/common_contants.js","api/map_api.js","redux/actions/map_actions.js","components/basic/calendar_placeholder_button/calendar_placeholder_button.style.js","components/basic/calendar_placeholder_button/calendar_placeholder_button.js","redux/types/processes_types.js","redux/types/local_types.js","normalizr/schedules_schema.js","redux/types/dashboards_types.js","methods/utils/array_utils.js","constants/scheduler_constants.js","redux/types/map_types.js","redux/types/setting_types.js","methods/utils/object_utils.js","methods/utils/route_utils.js","App.style.js","graphics/icons/optio.svg","components/misc/splash_screen/splash_screen.style.js","components/misc/splash_screen/splash_screen.js","containers/api_container/api_container.js","App.js","serviceWorker.js","index.js","redux/actions/index.js","api/dashboards_api.js","redux/actions/dashboards_actions.js","methods/utils/station_utils.js","logger.js","redux/actions/local_actions.js","methods/utils/color_utils.js","constants/device_constants.js","api/helpers.js","redux/types/ui_types.js","methods/utils/utils.js","normalizr/schema.js","redux/types/touch_events_types.js","redux/actions/stations_actions.js","redux/types/sidebar_types.js","constants/route_constants.js","redux/reducers/stations_reducer.js","redux/reducers/positions_reducer.js","redux/reducers/dashboards_reducer.js","redux/reducers/tasks_reducer.js","redux/reducers/settings_reducer.js","redux/reducers/local_reducer.js","redux/reducers/map_reducer.js","redux/reducers/sidebar_reducer.js","redux/reducers/widget_reducer.js","redux/types/notifications_types.js","redux/reducers/notifications_reducer.js","redux/reducers/touch_events_reducer.js","redux/reducers/processes_reducer.js","redux/reducers/report_events_reducer.js","redux/reducers/cards_reducer.js","redux/reducers/card_page_reducer.js","redux/reducers/index.js","redux/store/index.js","api/cards_api.js","api/tasks_api.js","redux/actions/tasks_actions.js","methods/utils/processes_utils.js","redux/types/tasks_types.js"],"names":["GET","POST","DELETE","PUT","SET","getLoggers","a","loggerConfig","localStorage","getItem","JSON","parse","postLoggers","settings","setItem","stringify","postLocalSettings","locStorage","ls","set","getLocalSettings","localSettings","get","locSettings","defaultLocalSettings","operator","getStations","currMapId","store","getState","localReducer","currentMapId","axios","method","url","apiIPAddress","headers","getHeaders","response","data","dataJson","handleError","deleteStation","ID","postStation","station","map_id","created_at","Date","getTime","putStation","getStationStatistics","id","startDate","endDate","startUTC","endUTC","log","getLogger","setLevel","getCard","cardId","dispatch","callback","api","card","actionName","CARD","api_action","payload","getCards","cards","cardsObj","convertArrayToObject","CARDS","getProcessCards","processId","PROCESS_CARDS","postCard","createdCard","process_id","deleteCard","deleteProcessCards","state","processCards","cardsReducer","currentProcessCards","Object","keys","forEach","currCardId","putCard","cardID","putCardAttributes","attributes","showEditor","bool","type","SHOW_EDITOR","showBarcodeModal","SHOW_BARCODE_MODAL","getProcesses","onStart","onSuccess","onError","error","GET_PROCESSES_FAILURE","GET_PROCESSES_SUCCESS","GET_PROCESSES_STARTED","processes","undefined","normalizedProcesses","normalize","processesSchema","entities","postProcesses","process","POST_PROCESSES_FAILURE","POST_PROCESSES_SUCCESS","POST_PROCESSES_STARTED","new","changed","newProcesses","putProcesses","PUT_PROCESSES_FAILURE","PUT_PROCESSES_SUCCESS","PUT_PROCESSES_STARTED","deepCopy","_id","updateProcesses","deleteProcess","DELETE_PROCESSES_FAILURE","DELETE_PROCESSES_SUCCESS","DELETE_PROCESSES_STARTED","deleteProcessClean","cardActions","removeRouteFromAllProcesses","routeId","routes","tasksReducer","tasks","routeProcesses","getRouteProcesses","currProcess","processRoutes","map","currRoute","willBreak","willRouteDeleteBreakProcess","console","broken","filter","setEditingValues","setSelectedProcess","setProcessAttributes","attr","editingProcess","EDITING_PROCESS","SHOW_FORM_EDITOR","LOT_TEMPLATE","LOT_TEMPLATES","CARD_HISTORY","REPORT_EVENT","REPORT_EVENTS","DASHBOARD","postPosition","position","putPosition","POST_POSITION_FAILURE","POST_POSITION_SUCCESS","POST_POSITION_STARTED","uuid","v4","temp","change_key","postedPosition","PUT_POSITION_FAILURE","PUT_POSITION_SUCCESS","PUT_POSITION_STARTED","positionCopy","updatePosition","deletePosition","stationDelete","DELETE_POSITION_FAILURE","DELETE_POSITION_SUCCESS","DELETE_POSITION_STARTED","onDeletePosition","addPosition","ADD_POSITION","updatePositions","positions","selectedPosition","childrenPositions","d3","UPDATE_POSITIONS","removePosition","REMOVE_POSITION","setPositionAttributes","SET_POSITION_ATTRIBUTES","setSelectedPosition","SET_SELECTED_POSITION","setEditingPosition","EDITING_POSITION","setSelectedStationChildrenCopy","SET_SELECTED_STATION_CHILDREN_COPY","stationsState","stationsReducer","positionsState","positionsReducer","tasksState","parent","selectedStation","positionIndex","children","indexOf","splice","updateStation","setStationAttributes","newChildIndex","child","selectedStationChildrenCopy","newChildInd","push","reverse","putStationWithoutSavingChildren","copyOfCopy","values","task","load","unload","relevantTask","deleteTask","WIDGET_PAGE_LOADED","WIDGET_XY_COORDINATES","WIDGET_LOADED","HOVER_STATION_INFO","non_local_api_ip","non_local_api","mapViewEnabled","isMobile","toggleDevOptions","authenticated","refreshToken","accessToken","getProcessStatistics","isString","value","isEqualCI","string1","string2","toLowerCase","capitalizeFirstLetter","string","charAt","toUpperCase","slice","newlines","str","split","s","replace","LOT_TEMPLATES_RESERVED_FIELD_NAMES","BASIC_FIELD_DEFAULTS","TEXT_FIELD","NUMBER_FIELD","CALENDAR_FIELD","CALENDAR_FIELD_RANGE","DATA_TYPE_DEFAULTS","FIELD_DATA_TYPES","STRING","INTEGER","DATE_RANGE","DATE","EMAIL","URL","locationsSortedAlphabetically","locations","locationsCopy","sort","b","name","length","Math","max","i","editing","editingPosition","editingStation","compareExistingVsIncomingLocations","incomingLocations","existingLocations","existingLocation","incomingLocation","pos_x","pos_y","convertRealToD3","x","y","assign","parsedLocalSettings","hostServerIpAddress","window","location","hostname","subscribe","GET_STATIONS_STARTED","GET_STATIONS_SUCCESS","GET_STATIONS_FAILURE","POST_STATION_STARTED","POST_STATION_SUCCESS","POST_STATION_FAILURE","PUT_STATION_STARTED","PUT_STATION_SUCCESS","PUT_STATION_FAILURE","DELETE_STATION_STARTED","DELETE_STATION_SUCCESS","DELETE_STATION_FAILURE","ADD_STATION","UPDATE_STATION","UPDATE_STATIONS","REMOVE_STATION","EDITING_STATION","SET_STATION_ATTRIBUTES","SET_SELECTED_STATION","Container","styled","button","buttonCss","props","theme","bg","tertiary","textColor","Content","span","ControlButton","content","on","onClick","schema","defaultProps","div","ControlsContainer","quaternary","FILTER_DATE_OPTIONS","LESS_THAN","EQUAL","GREATER_THAN","AdvancedCalendarPlaceholderButton","usable","label","onOptionClick","index","filterValue","useState","containsLessThan","setContainsLessThan","containsGreaterThan","setContainsGreaterThan","containsEquals","setContainsEquals","useEffect","isNonEmptyArray","options","includes","containerStyle","alignSelf","minWidth","width","borderBottomLeftRadius","borderBottomRightRadius","GET_POSITIONS_STARTED","GET_POSITIONS_SUCCESS","GET_POSITIONS_FAILURE","UPDATE_POSITION","REVERT_CHILDREN","toIntegerOrZero","Number","isInteger","parseInt","getDisplayName","lotTemplate","fieldName","fallback","returnVal","isObject","displayNames","testFilterOption","filterOptions","testValue","currOption","toDateString","stringifyFilter","optionsStr","fieldStr","operatorStr","dataType","text","num","p","join","isRelative","relativeDays","jsDateToString","date","COMPARITOR_FUNCTIONS","prototype","addDays","days","this","valueOf","setDate","getDate","checkCardMatchesFilter","lot","lotFields","fields","fieldArr","field","flags","every","filterFlagId","some","quantity","totalQuantity","compareDate","getMatchesFilter","filterMode","filterDataType","filterFieldName","filterTemplateId","lotTemplateId","LOT_FILTER_OPTIONS","lotNumber","formatLotNumber","lotNum","isArray","currFilterId","fieldInLot","fieldValue","lotField","getLotField","matchesFilter","filterValue1","filterOptions1","filterValue2","filterOptions2","searchKey","searchValue","flat","toLocaleString","minimumIntegerDigits","useGrouping","getLotTotalQuantity","getBinQuantity","binId","bins","reduce","pv","cv","getBinCount","count","getIsCardAtBin","getAllTemplateFields","lotTemplates","lotTemplatesReducer","templateFields","currLotTemplate","currRow","currField","component","key","item","alreadyExists","currTemplateField","currExistingLabel","currExistingDataType","getCustomFields","dashboardID","includeNonPreview","lotSelected","stationBasedLots","settingsReducer","currentDashboard","dashboardsReducer","dashboards","customFieldValues","syncWithTemplate","template","showInPreview","getLotAfterBinMerge","lotToMove","currentBinId","destinationBinId","oldBins","unchangedLotAttributes","movedBin","destinationBin","unchangedBins","oldCount","movedCount","handleGenerateSplitChoiceArray","row","subArray","existingArrLength","rowLength","subArrayCopy","idx","ind","j","k","m","n","handleMergeParts","bin","processesReducer","iDs","stations","option","startOption","involveSplitChoice","recursiveParse","splitToChoice","Array","precursor","pathArray","handleMergeExpression","handleGetPathArray","minCount","prt","handleNextStationBins","loadStationId","unloadStationId","unloadStations","route","mergingRoutes","tempBin","currentBin","traveledRoute","find","existingQuantity","handleCurrentStationBins","createPastePayload","table","fieldMapping","rangeIndex","parsedDate","dateArr","STARTED","SUCCESS","FAILURE","SELECTED","KICK_OFF_ENABLED","FINISH_ENABLED","convertCardDate","cardDate","year","month","day","getFormCustomFields","initialValues","currRowIndex","newRow","currItem","currItemIndex","fieldId","currVal","convertValue","String","toString","updatedValues","convertPastePayloadToLot","excel","remainingExcel","REQUIRED_FIELDS","primaryField","primaryFieldId","fieldPath","extractedPrimaryField","rest","constrcutedValue","currentPath","currPathIndex","sortBy","arr","sortMode","sortDirection","isAscending","SORT_DIRECTIONS","ASCENDING","primary","itemA","itemB","fieldA","fieldB","valA","valB","jsDate","trimmed","getUTCMonth","getUTCDate","getUTCFullYear","jsDateToObjDate","startYear","startMonth","startDay","dateRangeToStrings","dateRange","startDateText","endDateText","ADD_TASK_ALERT_TYPE","TASK_EXISTS","TASK_ADDED","ADDING","REPORT_SEND_SUCCESS","REPORT_SEND_FAILURE","KICK_OFF_SUCCESS","KICK_OFF_FAILURE","FINISH_SUCCESS","FINISH_FAILURE","DASHBOARD_BUTTON_COLORS","hex","OPERATION_TYPES","REPORT","KICK_OFF","FINISH","TYPES","ROUTES","iconName","OPERATIONS","convertD3ToReal","mapResolution","translate","scale","naturalDims","height","css","activeButtonCss","solid","onButtonCss","hoverButtonCss","basicButtonCss","defaultState","selectedLotTemplatesId","action","pending","QUEUE_BIN_ID","FINISH_BIN_ID","BIN_IDS","QUEUE","BIN_THEMES","ICON","COLOR","DISPLAY_NAME","FIELD_COMPONENT_NAMES","TEXT_BOX","TEXT_BOX_BIG","INPUT_BOX","NUMBER_INPUT","CALENDAR_SINGLE","CALENDAR_START_END","CONTENT","HISTORY","CALENDAR","MOVE","FORM_BUTTON_TYPES","SAVE","ADD","ADD_AND_NEXT","MOVE_OK","ADD_AND_MOVE","LOT_EDITOR_SIDEBAR_OPTIONS","SIDE_BAR_MODES","FIELDS","color","TEMPLATES","TEMPLATE_FIELD_KEYS","FIELD_NAME","REQUIRED","SHOW_IN_PREVIEW","BASIC_DEFAULT_DESCIPTION_FIELD","IGNORE_LOT_SYNC_WARNING","BASIC_DEFAULT_DATES_FIELD","getDefaultFields","uuidv4","BASIC_LOT_TEMPLATE","DEFAULT_NAME_DISPLAY_NAME","DEFAULT_COUNT_DISPLAY_NAME","DEFAULT_DISPLAY_NAMES","NAME_FIELD_ID","COUNT_FIELD_ID","NAME_FIELD","displayName","COUNT_FIELD","FORM_STATUS","VALIDATION_START","VALIDATION_SUCCESS","VALIDATION_ERROR","CREATE_START","CREATE_SUCCESS","CREATE_ERROR","WAITING","CANCELLED","NOT_STARTED","MERGE_START","MERGE_SUCCESS","MERGE_ERROR","createBin","getDefaultBins","initialBin","FLAG_OPTIONS","0","1","2","3","4","5","iconClassName","DESCENDING","LOT_SORT_OPTIONS","SmallButton","fontSize","sz3","font","disabled","senary","secondary","octonary","fg","hexToRGBA","active","gradient","LightenDarkenColor","buttonTheme","Button","style","TextboxContainer","flex","TextboxLabel","h1","sz2","TextboxInput","input","sz4","default","TextboxArea","textarea","Textbox","InputComponent","lines","inputAreaComponent","inputComponent","inputRef","useRef","focus","current","keepFocus","Fragment","inline","labelStyle","className","ref","placeholder","inputStyle","onChange","onKeyPress","rows","defaultValue","readOnly","onBlur","onFocus","autoFocus","tooltip","autofocus","size","main","quinary","septenary","nonary","denary","red","borderColor","good","okay","bad","warn","radioButton","inactive","hover","RGB_Linear_Shade","fontWeight","hoverHighlightPer","basicButton","backgroundColor","cardShadow","cardShadowBold","sz6","sz5","sz7","sz1","sz8","bold","normal","widthBreakpoint","tiny","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","users","objects","all","lots","merge","statistics","kick_off","finish","ok","operations","report","devices","scheduler","taskQueue","delete","warehouse","funky","useWindowSize","windowSize","setWindowSize","handleResize","innerWidth","innerHeight","addEventListener","passive","removeEventListener","getLotTemplate","getLotTemplates","deleteLotTemplate","postLotTemplate","putLotTemplate","lotTemplatesObj","createdLotTemplate","setSelectedLotTemplate","getSettings","postSettings","GET_SETTINGS_FAILURE","GET_SETTINGS_SUCCESS","GET_SETTINGS_STARTED","POST_SETTINGS_FAILURE","POST_SETTINGS_SUCCESS","POST_SETTINGS_STARTED","newSettings","deviceEnabled","DEVICE_ENABLED","SORT_OPTIONS","description","getMaps","getMap","GET_MAPS_FAILURE","GET_MAPS_SUCCESS","GET_MAPS_STARTED","maps","GET_MAP_FAILURE","GET_MAP_SUCCESS","GET_MAP_STARTED","setCurrentMap","SET_CURRENT_MAP","usableCss","notUsableCss","DateItem","DateText","CalendarPlaceholderButton","GET_PROCESSES","POST_PROCESSES","PUT_PROCESSES","DELETE_PROCESSES","SET_EDITING_VALUES","GET_LOGGERS","GET_LOGGERS_STARTED","GET_LOGGERS_SUCCESS","GET_LOGGERS_FAILURE","POST_LOGGERS","POST_LOGGERS_STARTED","POST_LOGGERS_SUCCESS","POST_LOGGERS_FAILURE","GET_LOCAL_SETTINGS","GET_LOCAL_SETTINGS_STARTED","GET_LOCAL_SETTINGS_SUCCESS","GET_LOCAL_SETTINGS_FAILURE","POST_LOCAL_SETTINGS","POST_LOCAL_SETTINGS_STARTED","POST_LOCAL_SETTINGS_SUCCESS","POST_LOCAL_SETTINGS_FAILURE","STOP_API_CALLS","Entity","idAttribute","$oid","processStrategy","days_on","friday","monday","saturday","sunday","thursday","tuesday","wednesday","interval_on","time_interval","schedule_on","start_time","stop_time_on","stop_time","task_id","GET_DASHBOARDS","GET_DASHBOARDS_STARTED","GET_DASHBOARDS_SUCCESS","GET_DASHBOARDS_FAILURE","POST_DASHBOARD","POST_DASHBOARD_STARTED","POST_DASHBOARD_SUCCESS","POST_DASHBOARD_FAILURE","PUT_DASHBOARD","PUT_DASHBOARD_STARTED","PUT_DASHBOARD_SUCCESS","PUT_DASHBOARD_FAILURE","DELETE_DASHBOARD","DELETE_DASHBOARD_STARTED","DELETE_DASHBOARD_SUCCESS","DELETE_DASHBOARD_FAILURE","DASHBOARD_OPEN","immutableDelete","immutableReplace","ele","immutableSet","arrCopy","FORM_MODES","CREATE","UPDATE","GET_MAPS","GET_MAP","SET_MAP_ATTRIBUTES","GET_SETTINGS","POST_SETTINGS","isEmpty","obj","prop","hasOwnProperty","pathStringToObject","path","delimitter","pathItems","generateDefaultRoute","defaultTask","buildDefaultRouteName","nameA","nameB","currIndex","getUnloadStationId","getUnloadPositionId","getLoadStationId","getLoadPositionId","getRouteStart","hasStart","getRouteEnd","hasEnd","getHasStartAndEnd","isPositionAtLoadStation","positionId","isPositionAtUnloadStation","isPositionInRoutes","getRouteIndexInRoutes","processRouteIds","ContentContainer","HeaderContainer","BodyContainer","_excluded","_extends","target","arguments","source","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","_ref7","_ref8","_ref9","_ref10","SvgOptio","_ref","svgRef","title","titleId","xmlns","xmlnsXlink","viewBox","enableBackground","xmlSpace","xlinkHref","overflow","gradientUnits","x1","y1","x2","y2","gradientTransform","offset","stopColor","ForwardRef","SwitchContainer","SwitchContainerLabel","ToggleMapViewSwitch","checked","switchContainerStyle","margin","SplashScreen","isApiLoaded","apiError","useDispatch","useSelector","apiAddress","apiIpAddress","setApiIpAddress","localSettingsState","setLocalSettingsState","dispatchPostLocalSettings","handleSubmitApiIpAddress","then","toggleMapViewEnabled","updatedLocalSettings","paddingTop","display","alignItems","flexDirection","preserveAspectRatio","onSubmit","event","border","bottom","transform","justifyContent","ApiContainer","onGetMaps","onGetStations","onGetDashboards","getDashboards","onGetTasks","getTasks","onGetCards","onGetProcesses","MiRMapEnabled","stopAPICalls","currentPage","setCurrentPage","setApiError","pageDataIntervals","setPageDataIntervals","criticalDataInterval","params","useParams","loadInitialData","interval","clearInterval","updateCurrentPage","currentPageRouter","getIsEquivalent","setDataInterval","pageParams","pageName","data1","data2","sidebar","widgetPage","setDashboardPageIntervals","setLocationPageIntervals","setSettingsPageIntervals","setKanbanIntervals","setProcessPageIntervals","mapValues","onLoad","apiLoaded","setInterval","ListView","lazy","Widgets","Authentication","Logger","MapView","StatusHeader","SideBar","PageErrorBoundary","App","widgetPageLoaded","widgetReducer","hoveringInfo","hoverStationInfo","mapReducer","sideBarOpen","sidebarReducer","open","loaded","setLoaded","setApiLoaded","setShowSideBar","mobileMode","handleLoadLocalData","styleMode","apiMode","mode","logMode","showSideBar","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","catch","rootElement","document","getElementById","ReactDOM","render","href","origin","fetch","contentType","status","ready","unregister","reload","checkValidServiceWorker","args","deleteDashboards","postDashboards","dashboard","putDashboards","normalizedDashboards","postDashboard","newDashboard","putDashboard","dashbaordCopy","updatedDashboard","updateDashboard","putDashboardAttributes","deleteDashboard","removeRouteFromAllDashboards","selectedTask","currDashboard","currButtons","buttons","addRouteToDashboards","routeType","stationId","ROUTE_TYPES","PULL","newDashboardButton","defaultDashboard","locked","postedDashboard","alert","stationActions","findIndex","currButton","removeRouteFromWrongDashboards","currDashboardButtons","currDashboardIdObj","currStationId","currDashboardId","filteredButtons","currButtonIndex","dashboardOpen","bol","setDashboardKickOffProcesses","dashboardId","kickOffEnabled","setDashboardFinishProcesses","finishEnabled","category","logger","defineProperty","writable","getCategoryLoggers","loggers","categoryLoggers","newLoggers","updateLocalSettingsState","alpha","RR","GG","BB","col","amt","usePound","r","g","c","round","t","P","defaultWidgetPages","DEVICE_CONSTANTS","HUMAN","MIR_100","idToken","debug","request","message","LOT_DRAGGING","LOT_DROPPING","FIELD_DRAGGING","COLUMN_HOVERING","LOT_HOVERING","SET_SIZE","DRAGGING_STATION_ID","DRAG_FROM_BIN","LOT_DIV_HEIGHT","HIDE_CARD","array","arraysEqual","_arr1","_arr2","arr1","concat","arr2","random","aProps","getOwnPropertyNames","bProps","propName","upperCaseFirstLetterInString","word","substr","setAcceleratingInterval","factor","initialRate","times","minRate","timeoutRef","tick","counter","internalCallback","newRate","clearTimeout","setTimeout","positionsSchema","stationsSchema","GET_LOT_TOUCH_EVENTS","GET_LOT_TOUCH_EVENTS_STARTED","GET_LOT_TOUCH_EVENTS_SUCCESS","GET_LOT_TOUCH_EVENTS_FAILURE","POST_TOUCH_EVENTS","POST_TOUCH_EVENTS_STARTED","POST_TOUCH_EVENTS_SUCCESS","POST_TOUCH_EVENTS_FAILURE","normalizedStations","stationCopy","onPostStation","newStation","onSaveChildren","onDeleteStation","addStation","updateStations","removeStation","onRemoveStation","updatedId","setSelectedStation","setEditingStation","SET_MODE","SET_ACTION","SET_WIDTH","SET_OPEN","PAGE_DATA_CHANGED","SET_CONFIRM_DELETE","SHOW_LOT_SCAN_MODAL","CUSTOM_TASK_ID","CUSTOM_CHARGE_TASK_ID","CUSTOM_IDLE_TASK_ID","CUSTOM_IDLE_TASK_NAME","PUSH","handoff","part","inOutRatio","timeout","isNew","positionsCopy","onUpdatePosition","updatedPosition","parsedPositions","kickOffEnabledDashboards","finishEnabledDashboards","selectedHoveringTask","showRouteConfirmation","routeConfirmationLocation","autoAddRoute","Dashboards","Scheduler","Tasks","Objects","ModelViewer","Api","ReduxLogger","All","shiftDetails","startOfShift","endOfShift","expectedOutput","breaks","break1","enabled","startOfBreak","endOfBreak","break2","break3","enableLogger","muteReducer","apiSim","mapApps","heatmap","ratsnest","labels","emailNotifications","emailAddress","addresseeName","devicesEnabled","disableAll","enableAll","currentMap","reduxZoom","pageDataChanged","showConfirmDeleteModal","confirmDeleteCallback","showLotScanModal","widgetXYCoordinates","widgetLoaded","info","TOGGLE_NOTIFICATION_TASK_QUEUE","hiddenNotifications","notifications","priority","dateTime","toggleNotificationTaskQueue","notificationsReducer","newPayload","events","lotEvents","eventsReducer","lotId","selectedProcess","fixingProcess","processesClone","editingValues","reportEvents","dashboard_id","station_id","report_button_id","cardHistories","showFormEditor","isCardDragging","isFieldDragging","isHoveringOverColumn","hoveringLotId","sizes","droppedLotInfo","draggingLotId","draggingStationId","dragFromBin","lotDivHeight","hideCard","cardPageReducer","isHoveringOverColum","combineReducers","show","reportEventsReducer","reportEventsObj","created","createdReportEvent","updatedReportEvent","remaining","unchangedProcessGroups","cardHistory","card_id","stationsCopy","onUpdateStation","updatedStation","parsedStations","hello","dashboardsCopy","GET_TASKS","GET_TASKS_STARTED","GET_TASKS_SUCCESS","GET_TASKS_FAILURE","POST_TASK","POST_TASK_STARTED","POST_TASK_SUCCESS","POST_TASK_FAILURE","PUT_TASK","PUT_TASK_STARTED","PUT_TASK_SUCCESS","PUT_TASK_FAILURE","DELETE_TASK","DELETE_TASK_STARTED","DELETE_TASK_SUCCESS","tasksCopy","DELETE_TASK_FAILURE","ADD_TASK","SET_TASKS","UPDATE_TASK","UPDATE_TASKS","REMOVE_TASK","remainingTasks","REMOVE_TASKS","ids","currId","SET_TASK_ATTRIBUTES","SELECT_TASK","SET_SELECTED_TASK","SET_SELECTED_HOVERING_TASK","DESELECT_TASK","EDITING_TASK","editingTask","SET_SHOW_ROUTE_CONFIRMATION","SET_ROUTE_CONFIRMATION_LOCATION","AUTO_ADD_ROUTE","touchEventsReducer","currentMapCopy","boundingClientHeight","reduxLogger","log_module","createLogger","level","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","applyMiddleware","thunk","createStore","reducers","getCardsCount","postTask","putTask","normalizedTasks","newTask","updateTask","taskCopy","deleteRouteClean","dashboardsActions","processesActions","putRouteClean","postRouteClean","saveFormRoute","formRoute","unsaved","needsSubmit","remainingRoute","objectId","setTaskAttributes","setSelectedTask","setSelectedHoveringTask","deselectTask","isBrokenProcess","copyProcessRoutes","getProcessStations","stationIds","currRouteId","getProcessStationsSorted","getProcessName","getPreviousRoute","currentRouteId","previousRoute","currentRouteindex","callOnStations","prevUnloadStationId","storeState","getStationAttributes","stationAttributes","isAttributesNotEmpty","currentStationAttributes","currAttribute","getPreviousWarehouseStation","processID","stationID","loadStation","findProcessStartNodes","loadStations","startNodes","unloadStation","nodeId","node","findProcessEndNodes","endNodes","outgoingRoutes","nextRoutes","clean","cleanExpression","expression","nonNullExpression","el","element","recursiveExpand","sExpression","traversed","sExpressionCopy","entryIdx","getNodeOutgoing","divergeType","startRouteExpression","startDivergeType","startNode","cleanedExpression","getNodeIncoming","filterLoopRoutes","isLoopingRoute","isNodeStartWarehouse","flattenProcessStations","flattenedStations","traveresedRoutes","DFS","depth","incomingRoutes","inRoute","outgoingRoute","nextRoute","processRoutesWithoutWarehouseStartNodes","DFSFindCycleRoute","stack","nextNode","nextStack"],"mappings":"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","file":"static/js/main.7a95bd5a.chunk.js","sourcesContent":["export const GET = 'GET_';\nexport const POST = 'POST_';\nexport const DELETE = 'DELETE_';\nexport const PUT = 'PUT_';\nexport const SET = 'SET_';\n","//This API is used to handle calls to the local storage\n\nimport ls from 'local-storage'\nimport {defaultLocalSettings} from \"../constants/local_settings_constants\";\n\nexport async function getLoggers() {\n\n    // retrieve data from localStorage\n    // currently stored under the key \"logger-config-123\"\n    // this key could be set to a user id to save settings for a specific user\n    var loggerConfig = localStorage.getItem(\"logger-config-123\");\n    if (loggerConfig) {\n        loggerConfig = JSON.parse(loggerConfig);\n        return loggerConfig;\n    }\n\n}\n\nexport async function postLoggers(settings) {\n\n    const loggerConfig = localStorage.setItem(\"logger-config-123\", JSON.stringify(settings));\n    return loggerConfig;\n}\n\n\nexport const postLocalSettings = async (settings) => {\n  const locStorage = ls.set(\"localSettings\", JSON.stringify(settings));\n  return locStorage\n}\n\n\nexport const getLocalSettings = async () => {\n  const localSettings = ls.get(\"localSettings\");\n\n  if (localSettings !== null) {\n      const locSettings = JSON.parse(localSettings);\n      return locSettings;\n  }\n  else {\n    await postLocalSettings(defaultLocalSettings)\n    return defaultLocalSettings\n  }\n\n}\n\nexport const deleteLocalSettings = async () => {\n    localStorage.removeItem(\"local-settings-config\");\n}\n","import axios from 'axios';\n\nimport { apiIPAddress } from '../settings/settings'\nimport store from '../redux/store'\nimport { getHeaders, handleError } from './helpers';\n\nconst operator = 'stations'\n\nexport async function getStations() {\n    \n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        const response = await axios({\n            method: 'GET',\n            url: apiIPAddress() + `site_maps/${currMapId}/${operator}`,\n            headers: getHeaders()\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n\n}\n\nexport async function deleteStation(ID) {\n    try {\n        const response = await axios({\n            method: 'DELETE',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders()\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\n\nexport async function postStation(station) {\n\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        station.map_id = currMapId\n        station.created_at = (new Date()).getTime();\n\n        const response = await axios({\n            method: 'POST',\n            url: apiIPAddress() + operator,\n            headers: getHeaders(),\n            data: JSON.stringify(station)\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function putStation(station, ID) {\n\n    try {\n        const response = await axios({\n            method: 'PUT',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders(),\n            data: station\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function getStationStatistics(id, startDate, endDate) {\n    const startUTC = startDate.getTime();\n    const endUTC = !!endDate ? endDate.getTime() : null;\n\n    let url = apiIPAddress() + operator + '/' + id + `/statistics`\n    url += `?start_date=${startUTC}`\n    if (!!endUTC) {\n        url += `&end_date=${endUTC}`\n    }\n\n    try {\n        const response = await axios({\n            method: 'GET',\n            url,\n            headers: getHeaders(),\n        });\n        \n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}","import { normalize } from 'normalizr';\n\n// import types\nimport {\n    GET,\n    POST,\n    DELETE,\n    PUT\n} from '../types/prefixes';\n\nimport {\n    CARDS,\n    CARD,\n    CARD_HISTORY,\n    PROCESS_CARDS,\n    SHOW_EDITOR,\n    SHOW_BARCODE_MODAL,\n} from '../types/data_types';\n\nimport { api_action } from './index';\nimport * as api from '../../api/cards_api'\n\n// import schema\nimport { scheduleSchema, schedulesSchema } from '../../normalizr/schedules_schema';\n\nimport log from \"../../logger\"\nimport {convertArrayToObject} from \"../../methods/utils/utils\";\n\nconst logger = log.getLogger(\"Cards\", \"Redux\")\nlogger.setLevel(\"debug\")\n\n\n\n// get\n// ******************************\nexport const getCard = (cardId) =>  async (dispatch) => {\n\n    /*\n        Invoked in api_action()\n        Whatever is returned from this function is the payload\n        that will be dispatched to redux (if successful)\n    */\n    const callback = async () => {\n\n        // make request\n        const card = await api.getCard(cardId);\n\n        // const cardsObj = convertArrayToObject(cards, \"_id\")\n        // console.log(\"getCard cardsObj\",cardsObj)\n\n        // format response\n        // const normalizedSchedules = normalize(schedules, schedulesSchema);\n\n        // return payload for redux\n        return {\n            card,\n        };\n    }\n\n    const actionName = GET + CARD;\n\n    // payload is returned back\n    const payload = await api_action(actionName, callback, dispatch, cardId);\n\n    return payload;\n\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// get\n// ******************************\nexport const getCards = () =>  async (dispatch) => {\n    /*\n        Invoked in api_action()\n        Whatever is returned from this function is the payload\n        that will be dispatched to redux (if successful)\n    */\n    const callback = async () => {\n\n        // make request\n        const cards = await api.getCards();\n\n        const cardsObj = convertArrayToObject(cards, \"_id\")\n\n        // format response\n        // const normalizedSchedules = normalize(schedules, schedulesSchema);\n\n        // return payload for redux\n        return {\n            cards: cardsObj,\n        };\n    }\n\n    const actionName = GET + CARDS;\n\n    // payload is returned back\n    const payload = await api_action(actionName, callback, dispatch);\n\n    return payload;\n\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// get\n// ******************************\nexport const getProcessCards = (processId) =>  async (dispatch) => {\n\n    /*\n        Invoked in api_action()\n        Whatever is returned from this function is the payload\n        that will be dispatched to redux (if successful)\n    */\n    const callback = async () => {\n\n        // make request\n        const cards = await api.getProcessCards(processId);\n\n        const cardsObj = convertArrayToObject(cards, \"_id\")\n\n        // return payload for redux\n        return {\n            cards: cardsObj,\n            processId\n        };\n    }\n\n    const actionName = GET + PROCESS_CARDS;\n\n    // payload is returned back\n    const payload = await api_action(actionName, callback, dispatch);\n\n    return payload;\n\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n// create\n// ******************************\nexport const postCard = (card) =>  async dispatch => {\n    const callback = async () => {\n        const createdCard = await api.postCard(card);\n        // const normalizedSchedules = normalize(createdSchedule, scheduleSchema);\n\n        return {\n            card: createdCard,\n            processId: card.process_id\n        };\n    }\n    //\n    const actionName = POST + CARD;\n\n    const payload = await api_action(actionName, callback, dispatch, card);\n\n    return payload.card\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// delete\n// ******************************\nexport const deleteCard = (cardId, processId) => async (dispatch) => {\n\n    const callback = async () => {\n        await api.deleteCard(cardId);\n\n        return {\n            cardId,\n            processId\n        };\n    }\n    //\n    const actionName = DELETE + CARD;\n    const payload = await api_action(actionName, callback, dispatch, cardId);\n    return payload;\n\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// delete\n// ******************************\nexport const deleteProcessCards = (processId) => async (dispatch, getState) => {\n\n    // current state\n    const state = getState()\n\n    const processCards = state.cardsReducer.processCards || {}\n    const currentProcessCards = processCards[processId] || {}\n\n    Object.keys(currentProcessCards).forEach( async (currCardId) => {\n        await dispatch(deleteCard(currCardId, processId))\n    })\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// update\n// ******************************\nexport const putCard = (card, cardID) => async dispatch => {\n\n    const callback = async () => {\n        const response = await api.putCard(card, cardID);\n        // const normalizedSchedule = normalize(response, scheduleSchema);\n        //\n        return {\n            card: response,\n            processId: card.process_id\n        };\n    }\n\n    const actionName = PUT + CARD;\n    const payload = await api_action(actionName, callback, dispatch, { card});\n    return card;\n};\n\n// update\n// ******************************\nexport const putCardAttributes = (attributes, cardId) => async (dispatch, getState) => {\n\n    // current state\n    const state = getState()\n    const card = state.cardsReducer.cards[cardId]\n\n    if(card) {\n        const callback = async () => {\n            const response = await api.putCard({\n                ...card,\n                ...attributes\n            }, cardId);\n\n            return {\n                card: response,\n                processId: response.process_id\n            };\n        }\n\n        const actionName = PUT + CARD;\n        const payload = await api_action(actionName, callback, dispatch, {attributes, cardId});\n        return card;\n    }\n\n    return null\n\n\n};\n\nexport const showEditor = (bool) => {\n    return { type: SHOW_EDITOR, payload: bool }\n}\n\nexport const showBarcodeModal = (bool) => {\n    return { type: SHOW_BARCODE_MODAL, payload: bool }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n","import { normalize, schema } from 'normalizr';\n\nimport {\n    GET_PROCESSES,\n    GET_PROCESSES_STARTED,\n    GET_PROCESSES_SUCCESS,\n    GET_PROCESSES_FAILURE,\n\n    POST_PROCESSES,\n    POST_PROCESSES_STARTED,\n    POST_PROCESSES_SUCCESS,\n    POST_PROCESSES_FAILURE,\n\n    PUT_PROCESSES,\n    PUT_PROCESSES_STARTED,\n    PUT_PROCESSES_SUCCESS,\n    PUT_PROCESSES_FAILURE,\n\n    DELETE_PROCESSES,\n    DELETE_PROCESSES_STARTED,\n    DELETE_PROCESSES_SUCCESS,\n    DELETE_PROCESSES_FAILURE,\n    EDITING_PROCESS,\n    SET_EDITING_VALUES,\n} from '../types/processes_types'\n\nimport * as api from '../../api/processes_api'\nimport { processesSchema } from '../../normalizr/schema';\nimport { deepCopy } from '../../methods/utils/utils'\nimport {putDashboard} from \"./dashboards_actions\";\nimport {getRouteProcesses} from \"../../methods/utils/route_utils\";\nimport {willRouteDeleteBreakProcess} from \"../../methods/utils/processes_utils\";\nimport * as dashboardsActions from \"./dashboards_actions\";\nimport {deleteTask} from \"./tasks_actions\";\n\nimport * as cardActions from \"./card_actions\";\n\nexport const getProcesses = () => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: GET_PROCESSES_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: GET_PROCESSES_SUCCESS, payload: response });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: GET_PROCESSES_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            const processes = await api.getProcesses();\n            // Uncomment when you want to make processes an object\n            const normalizedProcesses = normalize(processes, processesSchema);\n            if (normalizedProcesses.entities.processes === undefined) {\n                return onSuccess(normalizedProcesses.entities)\n            }\n            else {\n                return onSuccess(normalizedProcesses.entities.processes)\n            }\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\nexport const postProcesses = (process) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: POST_PROCESSES_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: POST_PROCESSES_SUCCESS, payload: response });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: POST_PROCESSES_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            delete process.new\n            delete process.changed\n\n            const newProcesses = await api.postProcesses(process);\n            return onSuccess(newProcesses)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\nexport const putProcesses = (process) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: PUT_PROCESSES_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: PUT_PROCESSES_SUCCESS, payload: response });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: PUT_PROCESSES_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            const ID = deepCopy(process._id)\n\n            if(process.new) {\n                delete process.new\n            }\n            if(process.changed) {\n                delete process.changed\n            }\n            // delete process._id\n            const updateProcesses = await api.putProcesses(process, ID);\n            return onSuccess(updateProcesses)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n\n\nexport const deleteProcess = (ID) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: DELETE_PROCESSES_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: DELETE_PROCESSES_SUCCESS, payload: ID });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: DELETE_PROCESSES_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            const removeProcesses = await api.deleteProcess(ID);\n            return onSuccess(ID)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n\n// delete CLEAN\n// ******************************\nexport const deleteProcessClean = (processId) => {\n    return async (dispatch, getState) => {\n\n        // remove route from all dashboards\n        await dispatch(cardActions.deleteProcessCards(processId))\n\n        await dispatch(deleteProcess(processId))\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// deletes all buttons with routeId from all dashboards\n// ******************************\nexport const removeRouteFromAllProcesses = (routeId) => {\n    return async (dispatch, getState) => {\n\n        // current state\n        const state = getState()\n        const routes = state.tasksReducer.tasks || {}\n\n        // get all processes that contain routeId\n        const routeProcesses = getRouteProcesses(routeId)\n\n        // loop through each of these processes, check if removing the route will break the process, then remove the route\n        for (const currProcess of routeProcesses) {\n\n            const processRoutes = currProcess.routes.map((currRoute) => routes[currRoute])\n\n            // will removing route break the process?\n            const willBreak = willRouteDeleteBreakProcess(processRoutes, routeId)\n            console.log(\"willBreak\",willBreak)\n\n            // dispatch update\n            await dispatch(putProcesses({\n                ...currProcess,\n                broken: willBreak,\n                routes: currProcess.routes.filter((currRoute) => currRoute !== routeId)\n            }))\n        }\n\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nexport const updateProcesses = (processes, d3) => {\n    return { type: 'UPDATE_PROCESSES', payload: { processes, d3 } }\n}\n\nexport const setEditingValues = (process) => {\n    return { type: 'SET_EDITING_VALUES', payload: process}\n}\n\nexport const setSelectedProcess = (process) => {\n    return { type: 'SET_SELECTED_PROCESS', payload: process }\n}\n\nexport const setProcessAttributes = (id, attr) => {\n    return { type: 'SET_PROCESS_ATTRIBUTES', payload: { id, attr } }\n}\n\nexport const editingProcess = (bool) => {\n    return { type: EDITING_PROCESS, payload: bool }\n}\n\n/**\n * This is to tell the map that you are fixing a process vs adding a new route to the process\n * It will force you to select a location that is tied with the location before the process breaks\n * @param {bool} bool\n */\nexport const setFixingProcess = (bool) => {\n    return { type: 'SET_FIXING_PROCESS', payload: bool }\n}\n","export const SCHEDULES = 'SCHEDULES';\nexport const SCHEDULE = 'SCHEDULE';\nexport const CARD = 'CARD';\nexport const CARDS = 'CARDS';\nexport const SHOW_EDITOR = 'CARDS';\nexport const SHOW_FORM_EDITOR = 'SHOW__FORM_EDITOR';\nexport const LOT = 'LOT';\nexport const LOT_TEMPLATE = 'LOT_TEMPLATE';\nexport const LOT_TEMPLATES = 'LOT_TEMPLATES';\nexport const LOTS = 'LOTS';\nexport const PROCESS_CARDS = 'PROCESS_CARDS';\nexport const CARD_HISTORY = 'CARD_HISTORY';\nexport const DATA_PAGE = 'DATA_PAGE';\nexport const JUNK = 'JUNK';\nexport const REPORT_EVENT = 'REPORT_EVENT';\nexport const REPORT_EVENTS = 'REPORT_EVENTS';\nexport const DASHBOARDS = 'DASHBOARDS';\nexport const DASHBOARD = 'DASHBOARD';\nexport const SHOW_BARCODE_MODAL = 'SHOW_BARCODE_MODAL';\n","import axios from 'axios';\n\nimport { apiIPAddress } from '../settings/settings'\nimport { getHeaders, handleError } from './helpers';\n\nconst operator = 'positions'\n\n\nexport async function getPositions() {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + operator,\n            headers: getHeaders()\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n\n}\n\nexport async function deletePosition(ID) {\n    try {\n        const response = await axios({\n            method: 'DELETE',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders()\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\n\nexport async function postPosition(position) {\n    try {\n        const response = await axios({\n            method: 'POST',\n            url: apiIPAddress() + operator,\n            headers: getHeaders(),\n            data: JSON.stringify(position)\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function putPosition(position, ID) {\n\n    try {\n        const response = await axios({\n            method: 'PUT',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders(),\n            data: position\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\n","import { normalize, schema } from 'normalizr';\n\nimport {\n    GET_POSITIONS_STARTED,\n    GET_POSITIONS_SUCCESS,\n    GET_POSITIONS_FAILURE,\n\n    POST_POSITION_STARTED,\n    POST_POSITION_SUCCESS,\n    POST_POSITION_FAILURE,\n\n    PUT_POSITION_STARTED,\n    PUT_POSITION_SUCCESS,\n    PUT_POSITION_FAILURE,\n\n    DELETE_POSITION_STARTED,\n    DELETE_POSITION_SUCCESS,\n    DELETE_POSITION_FAILURE,\n\n    ADD_POSITION,\n    UPDATE_POSITION,\n    UPDATE_POSITIONS,\n    REMOVE_POSITION,\n    SET_POSITION_ATTRIBUTES,\n    REVERT_CHILDREN,\n    SET_SELECTED_POSITION,\n    EDITING_POSITION,\n    SET_SELECTED_STATION_CHILDREN_COPY\n} from '../types/positions_types'\n\nimport uuid from 'uuid';\n\nimport * as api from '../../api/positions_api'\n\n// Import Schema\nimport { positionsSchema } from '../../normalizr/schema'\n\n// Import External Actions\nimport { putStationWithoutSavingChildren, setStationAttributes, updateStation } from './stations_actions'\nimport { deleteTask } from './tasks_actions'\n\n// Import Utils\nimport { deepCopy } from '../../methods/utils/utils';\n\n// Import Store\nimport store from '../store/index'\n\n// get\n// ******************************\nexport const getPositions = () => {\n    return async dispatch => {\n\n        function onStart() {\n            dispatch({ type: GET_POSITIONS_STARTED });\n        }\n        function onSuccess(positions) {\n            dispatch({ type: GET_POSITIONS_SUCCESS, payload: positions });\n            return positions;\n        }\n        function onError(error) {\n            dispatch({ type: GET_POSITIONS_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            const positions = await api.getPositions();\n\n            let normalizedPositions = !!normalize(positions, positionsSchema).entities.positions ? normalize(positions, positionsSchema).entities.positions : {}\n\n            // Filter out entry positions\n            Object.values(normalizedPositions).map((pos) => {\n                if (pos.type === 'shelf_entry_position' || pos.type === \"charger_entry_position\") {\n                    delete normalizedPositions[pos._id]\n                }\n            })\n\n            return onSuccess(normalizedPositions);\n        } catch (error) {\n            return onError(error);\n        }\n    };\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// post\n// ******************************\nexport const postPosition = (position) => {\n    return async dispatch => {\n\n        function onStart() {\n            dispatch({ type: POST_POSITION_STARTED });\n        }\n        function onSuccess(position) {\n            dispatch({ type: POST_POSITION_SUCCESS, payload: position });\n            return position;\n        }\n        function onError(error) {\n            dispatch({ type: POST_POSITION_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            if (!('_id' in position)) {\n                position._id = uuid.v4()\n            }\n\n            // Was used for a bug that didnt exist\n            // if (position.rotation > 180) {\n            //     position.rotation = position.rotation - 360\n            // }\n\n            // else if (position.rotation < -180) {\n            //     position.rotation = position.rotation + 360\n            // }\n\n            delete position.temp\n            delete position.new\n            position.change_key = 'new'\n            const postedPosition = await api.postPosition(position);\n            return onSuccess(postedPosition);\n        } catch (error) {\n            return onError(error);\n        }\n    };\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// put\n// ******************************\nexport const putPosition = (position) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: PUT_POSITION_STARTED });\n        }\n        function onSuccess(position) {\n            dispatch({ type: PUT_POSITION_SUCCESS, payload: position });\n            return position;\n        }\n        function onError(error) {\n            dispatch({ type: PUT_POSITION_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            let positionCopy = deepCopy(position)\n            delete positionCopy.temp\n\n            // Tells the backend that a position has changed\n            if (positionCopy.change_key !== 'deleted') positionCopy.change_key = 'changed'\n            const updatePosition = await api.putPosition(positionCopy, positionCopy._id);\n            return onSuccess(updatePosition)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// delete\n// ******************************\nexport const deletePosition = (id, stationDelete) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: DELETE_POSITION_STARTED });\n        }\n        function onSuccess(id) {\n            dispatch({ type: DELETE_POSITION_SUCCESS, payload: id });\n            return id;\n        }\n        function onError(error) {\n            dispatch({ type: DELETE_POSITION_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            let positionCopy = await dispatch(onDeletePosition(id, stationDelete))\n            // If theres a position copy then tell the backend is deleted\n            // There wouldnt be a position copy because the position did not exist on the backend\n            if (!!positionCopy) {\n                delete positionCopy.temp\n                // IMPORTANT!: Putting with change_key as deleted instead of deleting because it was causing back end issues\n                // Tells the backend that a position has been deleted\n                positionCopy.change_key = 'deleted'\n                const updatePosition = await dispatch(putPosition(positionCopy))\n                return onSuccess(positionCopy._id)\n            }\n            else {\n                return\n            }\n\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nexport const addPosition = (position) => {\n    return { type: ADD_POSITION, payload: position }\n}\n\nexport const updatePosition = (position) => {\n    return { type: UPDATE_POSITION, payload: position }\n}\n\nexport const revertChildren = (position) => {\n    return { type: REVERT_CHILDREN, payload: position }\n}\n\nexport const updatePositions = (positions, selectedPosition, childrenPositions, d3) => {\n    return { type: UPDATE_POSITIONS, payload: { positions, selectedPosition, childrenPositions, d3 } }\n}\n\nexport const removePosition = (id) => {\n    return { type: REMOVE_POSITION, payload: id }\n}\n\nexport const setPositionAttributes = (id, attr) => {\n    return { type: SET_POSITION_ATTRIBUTES, payload: { id, attr } }\n}\n\nexport const setSelectedPosition = (position) => {\n    return { type: SET_SELECTED_POSITION, payload: position }\n}\n\nexport const setEditingPosition = (bool) => {\n    return { type: EDITING_POSITION, payload: bool }\n}\n\nexport const setSelectedStationChildrenCopy = (positions) => {\n    return { type: SET_SELECTED_STATION_CHILDREN_COPY, payload: positions }\n}\n\nconst onDeletePosition = (id, stationDelete) => {\n    return async dispatch => {\n        const stationsState = store.getState().stationsReducer\n        const positionsState = store.getState().positionsReducer\n        const tasksState = store.getState().tasksReducer\n\n        let position = deepCopy(positionsState.positions[id])\n\n        // If the position has a parent then remove from parent\n        if (!!position.parent && !stationDelete) {\n\n            let selectedStation = deepCopy(stationsState.selectedStation)\n            // If there is an associated parent station\n            if (!!selectedStation) {\n                // Remove the position from the list of children\n                const positionIndex = selectedStation.children.indexOf(position._id)\n                if (!!position.new) {\n                    selectedStation.children.splice(positionIndex, 1)\n                    dispatch(updateStation(selectedStation))\n\n                }\n\n                else {\n                    let children = deepCopy(selectedStation.children)\n                    children.splice(positionIndex, 1)\n                    dispatch(setStationAttributes(selectedStation._id, { children }))\n\n                    // This goes through and finds any nwe children that might be in the chidlren array\n                    // If the child is new, delete it from the array\n                    // A new child will not have been saved yet, and since this is deleting and saving the parent station then the children array will also be saved\n                    let newChildIndex = []\n                    children.forEach(child => {\n                        if (!!positionsState.selectedStationChildrenCopy[child].new) {\n                            let newChildInd = children.indexOf[child]\n                            newChildIndex.push(newChildInd)\n                        }\n                    })\n\n                    // Revers the array because this index is being used for deletes\n                    // If it starts at the begining and deletes that one, then the next index will have changed\n                    newChildIndex.reverse()\n                    newChildIndex.forEach(child => {\n                        children.splice(child, 1)\n                    })\n\n                    await dispatch(putStationWithoutSavingChildren({ ...selectedStation, children: children, }))\n                }\n\n            }\n\n        }\n\n        // Remove from stations copy if need be\n        if (!!positionsState.selectedStationChildrenCopy) {\n            // Update the ChildrenCopy\n            let copyOfCopy = deepCopy(positionsState.selectedStationChildrenCopy)\n            delete copyOfCopy[position._id]\n            dispatch(setSelectedStationChildrenCopy(\n                copyOfCopy\n            ))\n        }\n\n\n        // If the position is new, just remove it from the local station\n        // Since the position is new, it does not exist in the backend and there can't be any associated tasks\n        if (!!position.new) {\n            dispatch(removePosition(position._id))\n            return null\n        }\n\n        // Else delete in backend and delete any associated tasks\n        else {\n            const tasks = tasksState.tasks\n\n            // Sees if any tasks are associated with the position and delete them\n            Object.values(tasks).filter(task => {\n                return task.load.position == position._id || task.unload.position == position._id\n            }).forEach(async relevantTask => {\n                await dispatch(deleteTask(relevantTask._id))\n            })\n\n\n        }\n        return position\n    }\n}","export const WIDGET_PAGE_LOADED = 'WIDGET_PAGE_LOADED'\nexport const WIDGET_XY_COORDINATES = 'WIDGET_XY_COORDINATES'\nexport const WIDGET_LOADED = 'WIDGET_LOADED'\nexport const HOVER_STATION_INFO = 'HOVER_STATION_INFO'\n","import { isMobile } from \"react-device-detect\";\n\n\nexport const defaultLocalSettings = {\n    non_local_api_ip: '',\n    non_local_api: false,\n    mapViewEnabled: isMobile ? false : true,\n    toggleDevOptions: false,\n    currentMapId: null,\n    authenticated: null,\n    refreshToken: null,\n    accessToken: null,\n}\n","import axios from 'axios';\n\n\nimport { apiIPAddress } from '../settings/settings'\nimport store from '../redux/store'\nimport { getHeaders, handleError } from './helpers';\n\nconst operator = 'processes'\n\n\nexport async function getProcesses() {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + `site_maps/${currMapId}/${operator}`,\n            headers: getHeaders()\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error)\n    }\n\n}\n\nexport async function deleteProcess(ID) {\n    try {\n        const response = await axios({\n            method: 'DELETE',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders(),\n        });\n\n        // Success 🎉\n        return response;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function postProcesses(process) {\n\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        process.map_id = currMapId\n        \n        process.created_at = (new Date()).getTime();\n\n        const response = await axios({\n            method: 'POST',\n            url: apiIPAddress() + operator,\n            headers: getHeaders(),\n            data: process\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function putProcesses(process, ID) {\n\n    try {\n        const response = await axios({\n            method: 'PUT',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders(),\n            data: process\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function getProcessStatistics(id, startDate, endDate) {\n    const startUTC = startDate.getTime();\n    const endUTC = !!endDate ? endDate.getTime() : null;\n\n    let url = apiIPAddress() + operator + '/' + id + `/statistics`\n    url += `?start_date=${startUTC}`\n    if (!!endUTC) {\n        url += `&end_date=${endUTC}`\n    }\n\n    try {\n        const response = await axios({\n            method: 'GET',\n            url,\n            headers: getHeaders(),\n        });\n        \n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}","export const isString = (value) => {\n    return (typeof value) === \"string\"\n}\n\n/*\n* Are string1 and string2 equal (Case Insensitive)\n* */\nexport const isEqualCI = (string1, string2) => {\n    return string1.toLowerCase() === string2.toLowerCase();\n}\n\nexport const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport const newlines = (str) => {\n    return str.split('\\\\n').map(s => <span>{s.replace('\\\\n', '')}<br/></span>)\n}","import {FIELD_DATA_TYPES} from \"./lot_contants\";\n\nexport const LOT_TEMPLATES_RESERVED_FIELD_NAMES = {\n}\n\n\nexport const BASIC_FIELD_DEFAULTS = {\n\tTEXT_FIELD: \"\",\n\tNUMBER_FIELD: 0,\n\tCALENDAR_FIELD: null,\n\tCALENDAR_FIELD_RANGE: [null, null]\n}\n\nexport const DATA_TYPE_DEFAULTS = {\n\t[FIELD_DATA_TYPES.STRING]: \"\",\n\t[FIELD_DATA_TYPES.INTEGER]: 0,\n\t[FIELD_DATA_TYPES.DATE_RANGE]: [null, null],\n\t[FIELD_DATA_TYPES.DATE]: null,\n\t[FIELD_DATA_TYPES.EMAIL] : null,\n\t[FIELD_DATA_TYPES.URL] : null,\n}","// Import utils\nimport { deepCopy } from './utils'\nimport { convertRealToD3 } from './map_utils'\n\n// Import Store\nimport store from '../../redux/store/index'\n\n\n/**\n * All of these coordinates have been calc by adjusting them on map with chrome dev tools\n * @param {*} location\n * @param {*} rd3tClassName\n * @param {*} d3\n */\n\n\nexport const locationsSortedAlphabetically = (locations) => {\n\n    const locationsCopy = deepCopy(locations)\n\n    locationsCopy.sort((a, b) => {\n        const aName = a.name\n        const bName = b.name\n        const length = Math.max(a.name.length, b.name.length)\n        for(let i = 0; i<length; i=i+1){\n          if(a.name[i] == undefined) {\n            return -1\n            break\n          }\n          if(b.name[i] == undefined) {\n            return 1\n            break\n          }\n          if(a.name[i]<b.name[i]){\n            return -1\n            break\n          }\n          if(a.name[i]>b.name[i]){\n            return 1\n            break\n          }\n    }})\n\n    return locationsCopy\n}\n\nexport const editing = () => {\n    const editingPosition = store.getState().positionsReducer.editingPosition\n    const editingStation = store.getState().stationsReducer.editingStation\n\n    return !!editingStation ? editingStation : editingPosition\n\n}\n\n\n/**\n * This function compares existing vs incoming locations\n *\n * If the incoming location exists in existing locations then use the incoming location info but update the x and y from existing\n * Using x and y from existing because those values correlate with the local map's d3 state\n *\n * If an incoming location is not in existing locations that means it was added by another client\n * Make sure to update the new locations x and y values to match the local map's d3\n *\n * @param {object} existingStations\n * @param {object} incomingStations\n */\nexport const compareExistingVsIncomingLocations = (incomingLocations, existingLocations, d3) => {\n\n    Object.values(existingLocations).forEach(existingLocation => {\n\n        // If the location exists in the backend and frontend, take the new locations, but assign local x and y\n        if (existingLocation._id in incomingLocations) {\n\n            const incomingLocation = incomingLocations[existingLocation._id]\n            if ((incomingLocation.pos_x !== existingLocation.pos_x) || (incomingLocation.pos_y !== existingLocation.pos_y)) {\n                let [x, y] = convertRealToD3([incomingLocation.pos_x, incomingLocation.pos_y], d3)\n                Object.assign(incomingLocations[existingLocation._id], { x: x, y: y })\n\n            } else {\n                Object.assign(incomingLocations[existingLocation._id], { x: existingLocation.x, y: existingLocation.y })\n            }\n\n        }\n\n        // If the existing location is  new then make sure to pass it in\n        else if (existingLocation.new == true) {\n            incomingLocations[existingLocation._id] = existingLocation\n        }\n\n    })\n\n    // Compare incoming vs existing\n    Object.values(incomingLocations).forEach(incomingLocation => {\n\n        // Handles deleted Positions on the backend\n        if (!!incomingLocation.change_key && incomingLocation.change_key === 'deleted') {\n            delete incomingLocations[incomingLocation._id]\n        }\n\n        // If the incoming location is not in existing location, its a new location so convert its pos into local d3 state\n        if (Object.values(existingLocations).length > 0 && !(incomingLocation._id in existingLocations) && incomingLocation.change_key !== 'deleted') {\n            let x, y\n            // If it's a new station, make sure to update it's coords to d3 coords on the local map\n            [x, y] = convertRealToD3([incomingLocation.pos_x, incomingLocation.pos_y], d3)\n            Object.assign(incomingLocations[incomingLocation._id], { x: x, y: y })\n        }\n    })\n\n    return incomingLocations\n}\n","import  store  from \"../redux/store/index\";\nimport ls from 'local-storage'\n\nexport const mirURL = (url) => {\n    // const mirURL = url\n    const mirURL = \"10.1.10.35\";\n    const prefix = \"http://\";\n    const URL = prefix + mirURL;\n    return URL;\n};\n\nexport const apiIPAddress = () => {\n    const storeState = store.getState();\n    let apiIPAddress = \"\";\n\n    let localSettings = ls.get(\"localSettings\")\n    let parsedLocalSettings = JSON.parse(localSettings)\n    let hostServerIpAddress = parsedLocalSettings ? parsedLocalSettings.non_local_api_ip : \"\"\n    let nonLocalIp = parsedLocalSettings ? parsedLocalSettings.non_local_api : false\n    /**\n     * READ ME: Do not change IP address here. Go to the settings tab in the interface, select Non Local API IP Address and type in the api ip address\n     * If non local api is true, then the server is running on an IP address entered\n     */\n\n    if (nonLocalIp === true) {\n        if (!!hostServerIpAddress) {\n            return apiIPAddress = 'https://' + hostServerIpAddress + ':5000/api/'\n        } else if (window.location.hostname === 'localhost') {\n            return 'http://localhost:5000/api/'\n        } else {\n            return 'https://' + window.location.hostname + ':5000/api/'\n        }\n    } else {\n        if (window.location.hostname === 'localhost') {\n            return 'http://localhost:5000/api/'\n        } else {\n            return 'https://' + window.location.hostname + ':5000/api/'\n        }\n    }\n\n};\n\nstore.subscribe(apiIPAddress);\n\n// /home/ubuntu/.local/bin/gunicorn -w 5 -b :5000 --chdir /home/ubuntu/dev_rmstudio/rmengine/rest_api --certfile /etc/letsencrypt/live/dev.optio.cloud/fullchain.pem --keyfile /etc/letsencrypt/live/dev.optio.cloud/privkey.pem 'server:create_app()'\n","export const GET_STATIONS_STARTED = 'GET_STATIONS_STARTED'\nexport const GET_STATIONS_SUCCESS = 'GET_STATIONS_SUCCESS'\nexport const GET_STATIONS_FAILURE = 'GET_STATIONS_FAILURE'\n\nexport const POST_STATION_STARTED = 'POST_STATION_STARTED'\nexport const POST_STATION_SUCCESS = 'POST_STATION_SUCCESS'\nexport const POST_STATION_FAILURE = 'POST_STATION_FAILURE'\n\nexport const PUT_STATION_STARTED = 'PUT_STATION_STARTED'\nexport const PUT_STATION_SUCCESS = 'PUT_STATION_SUCCESS'\nexport const PUT_STATION_FAILURE = 'PUT_STATION_FAILURE'\n\nexport const DELETE_STATION_STARTED = 'DELETE_STATION_STARTED'\nexport const DELETE_STATION_SUCCESS = 'DELETE_STATION_SUCCESS'\nexport const DELETE_STATION_FAILURE = 'DELETE_STATION_FAILURE'\n\nexport const UPDATE_STATION_CYCLE_TIME_STARTED = 'UPDATE_STATION_CYCLE_TIME_STARTED'\nexport const UPDATE_STATION_CYCLE_TIME_SUCCESS = 'UPDATE_STATION_CYCLE_TIME_SUCCESS'\nexport const UPDATE_STATION_CYCLE_TIME_FAILURE = 'UPDATE_STATION_CYCLE_TIME_FAILURE'\n\nexport const ADD_STATION = 'ADD_STATION'\nexport const UPDATE_STATION = 'UPDATE_STATION'\nexport const UPDATE_STATIONS = 'UPDATE_STATIONS'\nexport const REMOVE_STATION = 'REMOVE_STATION'\nexport const EDITING_STATION = 'EDITING_STATION'\nexport const SET_STATION_ATTRIBUTES = 'SET_STATION_ATTRIBUTES'\nexport const SET_SELECTED_STATION = 'SET_SELECTED_STATION'","import styled from \"styled-components\"\nimport * as buttonCss from \"../../../../common_css/button_css\";\n\nexport const Container = styled.button`\n\t${buttonCss.buttonCss}\n\tbackground: ${props => props.theme.bg.tertiary};\n\tpadding: .1rem .5rem;\n\tborder-radius: .4rem;\n\tmargin: 0 1rem;\n  border: 1px solid rgba(0,0,0,0);\n  \n  color: ${props => props.theme.textColor};\n`\n\nexport const Content = styled.span`\n\t\n`\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as styled from \"./control_button.style\"\n\nconst ControlButton = props => {\n\n\tconst {\n\t\tcontent,\n\t\ton,\n\t\tonClick,\n\t\tschema\n\t} = props\n\n\treturn (\n\t\t<styled.Container\n\t\t\ton={on}\n\t\t\tonClick={onClick}\n\t\t\tschema={schema}\n\t\t>\n\t\t\t<styled.Content\n\t\t\t\tschema={schema}\n\t\t\t>{content}</styled.Content>\n\t\t</styled.Container>\n\t);\n};\n\nControlButton.propTypes = {\n\tcontent: PropTypes.string\n};\n\nControlButton.defaultProps = {\n\tcontent: \"\"\n};\n\n\nexport default ControlButton;\n","import styled from \"styled-components\"\nimport * as buttonCss  from \"../../../common_css/button_css\";\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n  \n`\n\n\nexport const ControlsContainer = styled.div`\n\tdisplay: flex;\n\tborder-bottom-left-radius: .2rem;\n\tborder-bottom-right-radius: .2rem;\n\tpadding: .25rem .5rem;\n\tbackground: ${ props => props.theme.bg.quaternary};\n`\n\n","import React, {useEffect, useState} from 'react';\n\n// functions external\nimport PropTypes from 'prop-types';\n\n// components internal\nimport ControlButton from \"./control_button/control_button\";\nimport CalendarPlaceholderButton from \"../calendar_placeholder_button/calendar_placeholder_button\";\n\n// styles\nimport * as styled from \"./advanced_calendar_placeholder_button.style\"\nimport {isNonEmptyArray} from \"../../../methods/utils/array_utils\";\n\nexport const FILTER_DATE_OPTIONS = {\n\tLESS_THAN: \"LESS_THAN\",\n\tEQUAL: \"EQUAL\",\n\tGREATER_THAN: \"GREATER_THAN\"\n}\n\nconst AdvancedCalendarPlaceholderButton = (props) => {\n\n\tconst {\n\t\tusable,\n\t\tonClick,\n\t\tlabel,\n\t\tonOptionClick,\n\t\tindex,\n\t\tfilterValue,\n\t\tschema\n\t} = props\n\n\tconst [containsLessThan, setContainsLessThan] = useState(false)\n\tconst [containsGreaterThan, setContainsGreaterThan] = useState(false)\n\tconst [containsEquals, setContainsEquals] = useState(false)\n\n\tuseEffect(() => {\n\n\t\tif(isNonEmptyArray(filterValue)) {\n\t\t\tconst {\n\t\t\t\toptions = []\n\t\t\t} = filterValue[index] || {}\n\n\t\t\tsetContainsLessThan(options.includes(FILTER_DATE_OPTIONS.LESS_THAN))\n\t\t\tsetContainsGreaterThan(options.includes(FILTER_DATE_OPTIONS.GREATER_THAN))\n\t\t\tsetContainsEquals(options.includes(FILTER_DATE_OPTIONS.EQUAL))\n\t\t}\n\t\telse {\n\t\t\tconst {\n\t\t\t\toptions = []\n\t\t\t} = filterValue || {}\n\n\t\t\tsetContainsLessThan(options.includes(FILTER_DATE_OPTIONS.LESS_THAN))\n\t\t\tsetContainsGreaterThan(options.includes(FILTER_DATE_OPTIONS.GREATER_THAN))\n\t\t\tsetContainsEquals(options.includes(FILTER_DATE_OPTIONS.EQUAL))\n\t\t}\n\n\t\treturn () => {\n\n\t\t};\n\t}, [filterValue, index]);\n\n\treturn (\n\t\t<styled.Container>\n\t\t\t<CalendarPlaceholderButton\n\t\t\t\tusable={usable}\n\t\t\t\tonClick={onClick}\n\t\t\t\tlabel={label}\n\t\t\t\tcontainerStyle={{\n\t\t\t\t\talignSelf: \"stretch\",\n\t\t\t\t\tminWidth: \"fit-content\",\n\t\t\t\t\twidth: \"unset\",\n\t\t\t\t\tborderBottomLeftRadius: 0,\n\t\t\t\t\tborderBottomRightRadius: 0,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<styled.ControlsContainer>\n\t\t\t\t<ControlButton\n\t\t\t\t\tschema={schema}\n\t\t\t\t\ton={containsLessThan}\n\t\t\t\t\tcontent={\"<\"}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tonOptionClick(index, FILTER_DATE_OPTIONS.LESS_THAN)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<ControlButton\n\t\t\t\t\tschema={schema}\n\t\t\t\t\ton={containsEquals}\n\t\t\t\t\tcontent={\"=\"}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tonOptionClick(index, FILTER_DATE_OPTIONS.EQUAL)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<ControlButton\n\t\t\t\t\tschema={schema}\n\t\t\t\t\ton={containsGreaterThan}\n\t\t\t\t\tcontent={\">\"}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tonOptionClick(index, FILTER_DATE_OPTIONS.GREATER_THAN)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</styled.ControlsContainer>\n\t\t</styled.Container>\n\t);\n};\n\nAdvancedCalendarPlaceholderButton.propTypes = {\n\tonOptionClick: PropTypes.func,\n};\n\nAdvancedCalendarPlaceholderButton.defaultProps = {\n\tonOptionClick: () => {},\n\tfilterValue: []\n};\n\n\n\nexport default AdvancedCalendarPlaceholderButton;\n","export const GET_POSITIONS_STARTED = 'GET_POSITIONS_STARTED'\nexport const GET_POSITIONS_SUCCESS = 'GET_POSITIONS_SUCCESS'\nexport const GET_POSITIONS_FAILURE = 'GET_POSITIONS_FAILURE'\n\nexport const GET_POSITION_STARTED = 'GET_POSITION_STARTED'\nexport const GET_POSITION_SUCCESS = 'GET_POSITION_SUCCESS'\nexport const GET_POSITION_FAILURE = 'GET_POSITION_FAILURE'\n\nexport const POST_POSITION_STARTED = 'POST_POSITION_STARTED'\nexport const POST_POSITION_SUCCESS = 'POST_POSITION_SUCCESS'\nexport const POST_POSITION_FAILURE = 'POST_POSITION_FAILURE'\n\nexport const PUT_POSITION_STARTED = 'PUT_POSITION_STARTED'\nexport const PUT_POSITION_SUCCESS = 'PUT_POSITION_SUCCESS'\nexport const PUT_POSITION_FAILURE = 'PUT_POSITION_FAILURE'\n\nexport const DELETE_POSITION_STARTED = 'DELETE_POSITION_STARTED'\nexport const DELETE_POSITION_SUCCESS = 'DELETE_POSITION_SUCCESS'\nexport const DELETE_POSITION_FAILURE = 'DELETE_POSITION_FAILURE'\n\nexport const ADD_POSITION = 'ADD_POSITION'\nexport const UPDATE_POSITION = 'UPDATE_POSITION'\nexport const UPDATE_POSITIONS = 'UPDATE_POSITIONS'\nexport const REMOVE_POSITION = 'REMOVE_POSITION'\nexport const SET_POSITION_ATTRIBUTES = 'SET_POSITION_ATTRIBUTES'\nexport const REVERT_CHILDREN = 'REVERT_CHILDREN'\nexport const SET_SELECTED_POSITION = 'SET_SELECTED_POSITION'\nexport const EDITING_POSITION ='EDITING_POSITION'\nexport const SET_SELECTED_STATION_CHILDREN_COPY = 'SET_SELECTED_STATION_CHILDREN_COPY'\n","export const toIntegerOrZero = (value) => {\n\treturn Number.isInteger(value) ?\n\t\tvalue\n\t\t:\n\t\tNumber.isInteger(parseInt(value)) ?\n\t\t\tparseInt(value)\n\t\t\t:\n\t\t\t0\n}","import { isObject } from \"./object_utils\";\nimport {useParams} from 'react-router-dom'\nimport {\n    BASIC_LOT_TEMPLATE,\n    BASIC_LOT_TEMPLATE_ID, BIN_IDS,\n    FIELD_DATA_TYPES,\n    LOT_FILTER_OPTIONS\n} from \"../../constants/lot_contants\";\nimport store from '../../redux/store/index'\nimport lotTemplatesReducer from \"../../redux/reducers/lot_templates_reducer\";\nimport { toIntegerOrZero } from \"./number_utils\";\nimport { useSelector } from \"react-redux\";\nimport { FILTER_DATE_OPTIONS } from \"../../components/basic/advanced_calendar_placeholder_button/advanced_calendar_placeholder_button\";\n\n// Import external utils\nimport { isArray, isNonEmptyArray } from \"./array_utils\";\nimport { isEqualCI, isString } from \"./string_utils\";\nimport { handleMergeExpression, } from './processes_utils'\nimport { jsDateToString } from './card_utils'\n\n\nexport const getDisplayName = (lotTemplate, fieldName, fallback) => {\n    let returnVal\n    if (isObject(lotTemplate?.displayNames) && lotTemplate.displayNames[fieldName]) {\n        returnVal = lotTemplate.displayNames[fieldName]\n    }\n\n    return isString(returnVal) ? returnVal : fallback ? fallback : \"\"\n}\n\nexport const getBinName = (binId) => {\n    const stations = store.getState().stationsReducer.stations || {}\n\n    if (binId === BIN_IDS.QUEUE) {\n        return \"Queue\"\n    }\n    else if (binId === BIN_IDS.FINISH) {\n        return \"Finish\"\n    }\n    else {\n        const station = stations[binId] || {}\n        const {\n            name = \"\"\n        } = station\n\n        return name\n    }\n}\n\nexport const testFilterOption = (filterOptions, filterValue, testValue) => {\n    if (!isNonEmptyArray(filterOptions)) return true\n\n    for (const currOption of (filterOptions || [])) {\n        if (currOption === FILTER_DATE_OPTIONS.EQUAL) {\n            if (testValue && testValue.toDateString() === filterValue.toDateString()) {\n                return true\n            }\n        }\n        else if (currOption === FILTER_DATE_OPTIONS.LESS_THAN) {\n            if (testValue - filterValue < 0) return true\n        }\n        else if (currOption === FILTER_DATE_OPTIONS.GREATER_THAN) {\n            if (testValue - filterValue > 0) return true\n        }\n    }\n\n    return false\n}\n\nexport const stringifyFilter = (filter) => {\n    let fieldStr = filter.label;\n    let operatorStr = filter.operator;\n    let optionsStr;\n    switch (filter.dataType) {\n        case 'STRING':\n            optionsStr = \"'\" + filter.options.text + \"'\";\n            break;\n        case 'INTEGER':\n            optionsStr = filter.options.num;\n            break;\n        case 'PROCESSES':\n            fieldStr = 'Process' // Special case (since we actually use IDs)\n            optionsStr = filter.options.processes.map(p => p.name).join(' | ')\n            break;\n        case 'FLAGS':\n            optionsStr = '...'\n            break;\n        case 'DATE':\n        case 'DATE_RANGE':\n            if (filter.options.isRelative) {\n                optionsStr = 'today' + (filter.options.relativeDays < 0 ? '' : '+') + filter.options.relativeDays\n            } else {\n                optionsStr = jsDateToString(filter.options.date)\n            }\n            break;\n        default:\n            optionsStr = '?'\n            break;\n    }\n\n    return fieldStr + ' ' + operatorStr + ' ' + optionsStr;\n}\n\nconst COMPARITOR_FUNCTIONS = {\n    '<': (a, b) => a < b,\n    '<=': (a, b) => a <= b,\n    '=': (a, b) => a === b,\n    '>=': (a, b) => a >= b,\n    '>': (a, b) => a > b\n}\n\nDate.prototype.addDays = function (days) {\n    var date = new Date(this.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nexport const checkCardMatchesFilter = (lot, filter) => {\n\n    const {\n        fieldName,\n        dataType,\n        operator,\n        options\n    } = filter;\n\n    // Primarily filters if the key exists in the lot\n    const lotFields = {}\n    lot.fields.forEach(fieldArr => fieldArr.forEach(field => lotFields[field.fieldName] = field));\n    if (lot[fieldName] == null && (lotFields[fieldName] == null ||\n            (lotFields[fieldName].dataType === 'DATE_RANGE' && lotFields[fieldName].value[0] == null || lotFields[fieldName].value[1] == null)))\n    //if (lot[fieldName] == null && (lotFields[fieldName] == null || lotFields[fieldName].value == null ||\n      //      (lotFields[fieldName].dataType === 'DATE_RANGE' && Array.isArray(lotFields[fieldName].value) && (lotFields[fieldName].value.length < 2 || lotFields[fieldName].value[0] == null || lotFields[fieldName].value[1] == null))))\n        { return false; }\n\n    switch (fieldName) {\n\n        case 'name':\n            return lot.name.toLowerCase().includes(options.text.toLowerCase())\n        case 'flags':\n            switch (operator) {\n                case 'all':\n                    return options.flags.every(filterFlagId => lot[fieldName].includes(filterFlagId))\n                case 'any':\n                    return options.flags.some(filterFlagId => lot[fieldName].includes(filterFlagId))\n                case 'not_all':\n                    return !options.flags.every(filterFlagId => lot[fieldName].includes(filterFlagId))\n                case 'not_any':\n                    return !options.flags.some(filterFlagId => lot[fieldName].includes(filterFlagId))\n            }\n        case 'process_id':\n            return options.processes.map(p => p._id).includes(lot[fieldName])\n        case 'lotNumber':\n            return COMPARITOR_FUNCTIONS[operator](lot[fieldName], options.num)\n        case 'quantity':\n            return COMPARITOR_FUNCTIONS[operator](lot.quantity, options.num)\n        case 'totalQuantity':\n            return COMPARITOR_FUNCTIONS[operator](lot.totalQuantity, options.num)\n        default: // Any other fields\n            switch (dataType) {\n                case 'STRING':\n                    return lotFields[fieldName].value.toLowerCase().includes(options.text.toLowerCase())\n                case 'INTEGER':\n                    return COMPARITOR_FUNCTIONS[operator](lotFields[fieldName].value, options.num)\n                case 'DATE':\n                    if (options.isRelative) {\n                        let compareDate = new Date;\n                        return COMPARITOR_FUNCTIONS[operator](new Date(lotFields[fieldName].value), compareDate.addDays(options.relativeDays))\n                    } else {\n                        return COMPARITOR_FUNCTIONS[operator](new Date(lotFields[fieldName].value), new Date(options.date))\n                    }\n                case 'DATE_RANGE':\n                    console.log(lotFields[fieldName].value)\n                    if (options.isRelative) {\n                        let compareDate = new Date;\n                        return COMPARITOR_FUNCTIONS[operator](new Date(lotFields[fieldName].value[filter.index]), compareDate.addDays(options.relativeDays))\n                    } else {\n                        return COMPARITOR_FUNCTIONS[operator](new Date(lotFields[fieldName].value[filter.index]), new Date(options.date))\n                    }\n\n            }\n    }\n\n\n}\n\nexport const getMatchesFilter = (lot, filterValue, filterMode) => {\n    const {\n        dataType: filterDataType,\t\t\t\t\t\t\t// eg. \"STRING\"\n        label,\t\t\t\t\t\t\t\t// eg. \"Dates (start)\"\n        _id: fieldId,\n        fieldName: filterFieldName,\t\t\t\t\t\t\t// eg. \"dates\"\n        lotTemplateId: filterTemplateId, \t// eg. 123\n    } = filterMode || {}\n\n    const {\n        lotTemplateId,\n        [filterFieldName]: fieldValue\n    } = lot || {}\n\n    // first filter known/required fields\n    switch (filterMode.label) {\n\n        // name (string)\n        case LOT_FILTER_OPTIONS.name.label: {\n            if (filterValue) {\n                return lot.name.toLowerCase().includes((filterValue || \"\").toLowerCase())\n            }\n            return true\n            break\n        }\n\n        //  lot number (treated as string when formatted)\n        case LOT_FILTER_OPTIONS.lotNumber.label: {\n            if (filterValue) {\n                const formattedLotNumber = formatLotNumber(lot.lotNum)\n                return formattedLotNumber.toLowerCase().includes((filterValue || \"\").toLowerCase())\n            }\n            return true\n            break\n        }\n\n        // flags (array of ints)\n        case LOT_FILTER_OPTIONS.flags.label: {\n            if (isArray(filterValue) && filterValue.length > 0) {\n                if (isArray(lot.flags)) {\n                    for (const filterFlag of filterValue) {\n                        const {\n                            id: currFilterId\n                        } = filterFlag\n\n                        if (!lot.flags.includes(currFilterId)) return false\n                    }\n                    return true\n                }\n                return false\n            }\n            return true\n            break\n        }\n\n        // now must filter by data type\n        default: {\n            if (isObject(filterMode)) {\n\n                let fieldInLot = false\n                let fieldValue = null\n\n                const lotField = getLotField(\"fieldName\", filterFieldName, lot)\n                if (lotField) {\n                    fieldInLot = true\n                    fieldValue = lotField.value\n                }\n\n                if (fieldInLot || lotTemplateId === filterTemplateId) {\n                    if (!filterValue) return true\n\n                    switch (filterDataType) {\n                        case FIELD_DATA_TYPES.URL: {\n                            // not implemented yet\n                            return true\n                        }\n                        case FIELD_DATA_TYPES.EMAIL: {\n                            // not implemented yet\n                            return true\n                        }\n                        case FIELD_DATA_TYPES.DATE: {\n                            const {\n                                value,\n                                options: filterOptions\n                            } = filterValue || {}\n\n                            if (value) {\n                                return testFilterOption(filterOptions, value, fieldValue ? new Date(fieldValue) : null)\n                            }\n\n                            // if no filter value, default true\n                            else {\n                                return true\n                            }\n                        }\n                        case FIELD_DATA_TYPES.DATE_RANGE: {\n                            let matchesFilter = false\n\n                            if ((isNonEmptyArray(filterValue) && filterValue.length > 0)) {\n                                // extract first filter properties\n                                const {\n                                    value: filterValue1,\n                                    options: filterOptions1\n                                } = filterValue[0] || {}\n\n                                // extract second filter properties\n                                const {\n                                    value: filterValue2,\n                                    options: filterOptions2\n                                } = filterValue[1] || {}\n\n                                if (isNonEmptyArray(fieldValue) && fieldValue.length > 0) {\n\n                                    // check first filter\n                                    if (filterValue1) {\n                                        // check if fieldValue matches filter value\n                                        matchesFilter = testFilterOption(filterOptions1, filterValue1, new Date(fieldValue[0]))\n                                    }\n                                    else {\n                                        // no filter value, so default to match\n                                        matchesFilter = true\n                                    }\n\n                                    // check second filter\n                                    if (filterValue2) {\n                                        matchesFilter = (testFilterOption(filterOptions2, filterValue2, new Date(fieldValue[1]))) && matchesFilter // && since both filters must match\n                                    }\n                                    else {\n                                        matchesFilter = true && matchesFilter // && since both filters must match\n                                    }\n\n                                    // matches?\n                                    return matchesFilter\n                                }\n\n                                // there is filter value, but no field value.\n                                else {\n                                    return false\n                                }\n                            }\n\n                            // no filter value, default matches to true\n                            return true\n                        }\n\n                        case FIELD_DATA_TYPES.STRING: {\n                            // simple string compare, make lowercase for case insensitive\n                            return fieldValue.toLowerCase().includes((filterValue || \"\").toLowerCase())\n                        }\n\n                        case FIELD_DATA_TYPES.INTEGER: {\n                            // simple ===, but also make sure they're ints\n                            return toIntegerOrZero(fieldValue) === toIntegerOrZero(filterValue)\n                        }\n                        default: {\n                            // unknown dateType, return true\n                            return true\n                        }\n                    }\n                }\n                else {\n                    return false\n                }\n            }\n            else {\n                // no filter mode selected, return true\n                return true\n            }\n        }\n    }\n}\n\nexport const getLotField = (searchKey, searchValue, lot) => {\n    for (const field of lot.fields.flat()) {\n        const {\n            [searchKey]: currValue\n        } = field || {}\n\n        if (currValue === searchValue) {\n            return field\n        }\n    }\n\n    return null\n}\n\nexport const formatLotNumber = (lotNumber) => {\n    return (isString(lotNumber) || Number.isInteger(lotNumber)) ?\n        `${parseInt(lotNumber).toLocaleString('en-US', { minimumIntegerDigits: 6, useGrouping: false })}`\n        :\n        ``\n}\n\nexport const getLotTotalQuantity = (card) => {\n\n      return card.totalQuantity\n\n}\n\nexport const getBinQuantity = ({ bins }, binId) => {\n    if(!!bins && !!bins[binId]){\n        return  Object.values(bins[binId]).reduce((pv, cv) => pv + cv, 0);\n    }\n    else return 0\n}\n\nexport const getBinCount = ({ bins }, binId) => {\n\n    if (!!bins && !!bins[binId]) {\n        return bins[binId]?.count || 0;\n    } else {\n        return 0\n    }\n\n}\n\n// If the count doesnt exist things break. This allows us to avoid that error\nexport const safelyDeconstructBin = (bins, binId) => {\n    const test = {count: 2}\n    const { count, ...b} = test\n    console.log(\"A\", count, b)\n\n\n    if(!!bins && !!bins[binId] && ('count' in bins[binId])){\n        const { count, ...partials } = bins[binId]\n        console.log(bins[binId], count, partials)\n      return {count, ...partials}\n    }\n    else return {count: 0}\n}\n\nexport const getIsCardAtBin = ({ bins }, binId) => {\n    return getBinQuantity({ bins }, binId) > 0\n}\n\nexport const getCardsInBin = (cards, binId, processId) => {\n    return Object.values(cards).filter((card, ind) => {\n        return getIsCardAtBin(card, binId) && (!processId || card.process_id === processId)\n    })\n}\n\nexport const getAllTemplateFields = () => {\n    const lotTemplates = store.getState().lotTemplatesReducer.lotTemplates || {}\n\n    let templateFields = []\n\n    Object.values(lotTemplates).forEach((currLotTemplate) => {\n        const {\n            fields,\n            _id: lotTemplateId\n        } = currLotTemplate || {}\n\n        fields.forEach((currRow) => {\n            currRow.forEach((currField) => {\n\n                const {\n                    component,\t\t//\"CALENDAR_START_END\"\n                    dataType,\t\t//\"DATE_RANGE\"\n                    fieldName,\t\t//\"dates\"\n                    key,\t\t\t//1\n                    _id,\t\t\t//1\n                } = currField || {}\n\n                const item = {\n                    // label: `${capitalizeFirstLetter(fieldName)} (${convertDataTypeContantToDisplay(dataType)})`,\n                    label: fieldName,\n                    dataType,\n                    component,\n                    fieldName,\n                    lotTemplateId,\n                    _id\n                }\n\n                let alreadyExists = false\n                templateFields.forEach((currTemplateField) => {\n                    const {\n                        label: currExistingLabel,\n                        dataType: currExistingDataType,\n                        component: currExistingComponent\n                    } = currTemplateField || {}\n\n                    if ((isEqualCI(item.label, currExistingLabel)) && (item.dataType === currExistingDataType)) {\n                        alreadyExists = true\n                    }\n                })\n\n                if (!alreadyExists) {\n                    templateFields.push(item)\n                }\n            })\n        })\n    })\n\n    return templateFields\n}\n\n/*\n* Returns array of lots custom fields\n* Each field field includes dataType, fieldName, and value\n* */\nexport const getCustomFields = (lotTemplateId, lot, dashboardID, includeNonPreview, lotSelected) => {\n    const lotTemplates = store.getState().lotTemplatesReducer.lotTemplates || {}\n    const lotTemplate = lotTemplates[lotTemplateId] || {}\n    const stationBasedLots = store.getState().settingsReducer.settings.stationBasedLots || false\n    const dashboards = store.getState().dashboardsReducer.dashboards || {}\n    const currentDashboard = dashboards[dashboardID]\n    let customFieldValues = []\n\n    const { syncWithTemplate } = lot || {}\n    // if sync with template, use fields from template. Otherwise use fields from lot\n    const fields = syncWithTemplate ? (lotTemplate.fields) : (lot?.fields || lotTemplate.fields)\n    if(!!stationBasedLots && !!currentDashboard && !!currentDashboard.fields){\n      Object.keys(currentDashboard.fields).forEach((template) =>{\n          Object.values(currentDashboard.fields[template]).forEach((field) =>{\n            const {\n              fieldName,\n              dataType,\n              _id,\n              component,\n            } = field\n            if((lot.lotTemplateId===template && (component!=='INPUT_BOX' || !lotSelected)) || (lotTemplate.name === template)){\n              customFieldValues.push({\n                dataType,\n                fieldName,\n                value: getLotField('_id', _id, lot)?.value\n                })\n            }\n          })\n        })\n      }\n      else{\n        // loop through fields and get relevant data\n        if (isArray(fields)) {\n            fields.flat().forEach((currField) => {\n                const {\n                    dataType,\n                    fieldName,\n                    showInPreview,\n                    _id\n                } = currField\n\n                  // if includeNonPreview, add all.\n                  // otherwise, only add if lot has showInPreview set to true\n                  if (includeNonPreview || (!includeNonPreview && showInPreview)) {\n                      customFieldValues.push({\n                          dataType,\n                          fieldName,\n                          value: syncWithTemplate ? getLotField(\"_id\", _id, lot)?.value : currField?.value,\n                      })\n                  }\n            })\n        }\n      }\n\n    return customFieldValues\n}\n\nexport const getLotAfterBinMerge = (lotToMove, currentBinId, destinationBinId) => {\n    const {\n        bins: oldBins,\n        ...unchangedLotAttributes\n    } = lotToMove || {}\n\n    const {\n        [currentBinId]: movedBin,\n        [destinationBinId]: destinationBin,\n        ...unchangedBins\n    } = oldBins || {}\n\n    if (movedBin) {\n        // already contains items in destinationBin\n        if (destinationBin && movedBin) {\n            const oldCount = parseInt(destinationBin?.count || 0)\n            const movedCount = parseInt(movedBin?.count || 0)\n\n            return {\n                ...unchangedLotAttributes,\n                bins: {\n                    ...unchangedBins,\n                    [destinationBinId]: {\n                        ...destinationBin,\n                        count: oldCount + movedCount\n                    }\n                }\n\n            }\n        }\n\n        // no items in bin\n        else {\n            return {\n                ...unchangedLotAttributes,\n                bins: {\n                    ...unchangedBins,\n                    [destinationBinId]: {\n                        ...movedBin,\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nexport const getCurrentRouteForLot = (lot, stationID) => {\n    let currentRoute\n\n    const processes = store.getState().processesReducer.processes || {}\n    const routes = store.getState().tasksReducer.tasks || {}\n\n    const lotProcess = processes[lot.process_id]\n\n    for (let i = 0; i < lotProcess.routes.length; i++) {\n        const loadStation = routes[lotProcess.routes[i]].load.station\n        if (loadStation === stationID) {\n            currentRoute = routes[lotProcess.routes[i]]\n            break\n        }\n    }\n    return currentRoute\n}\n\nexport const getPreviousRouteForLot = (lot, stationID) => {\n    let prevRoute\n\n    const processes = store.getState().processesReducer.processes || {}\n    const routes = store.getState().tasksReducer.tasks || {}\n\n    const lotProcess = processes[lot.process_id]\n\n    for (let i = 0; i < lotProcess.routes.length; i++) {\n        const loadStation = routes[lotProcess.routes[i]].load.station\n        const unloadStation = routes[lotProcess.routes[i]].unload.station\n        if (loadStation === stationID) {\n            prevRoute = routes[lotProcess.routes[i - 1]]\n            break\n        } else if (unloadStation === stationID) {\n            prevRoute = routes[lotProcess.routes[i]]\n            break\n        }\n    }\n    return prevRoute\n}\nexport const handleMergedLotQuantity = (iDs, mergingRoutes, currentLot, destinationId, quantity, stationID) => {\n\n  let countQuantity = currentLot.totalQuantity //Initialize count at totalquantity\n  let completeParts = currentLot.totalQuantity\n  let totalCompleteParts = 0\n  let bestQty = 0\n  let traveledRouteId = \"\"\n  let existingPartQty = 0;\n\n  for(const ind in iDs){\n    let option = iDs[ind]\n    for(const requirement in option){\n       for(const idx in mergingRoutes){\n        traveledRouteId = mergingRoutes[idx]._id\n        existingPartQty = !!currentLot.bins[destinationId] && !!currentLot.bins[destinationId][traveledRouteId] ? currentLot.bins[destinationId][traveledRouteId] :  0\n\n         if(mergingRoutes[idx].load === option[requirement] && option.includes(stationID)){\n              countQuantity = existingPartQty<countQuantity ? option.length ===1 ? existingPartQty : existingPartQty :  countQuantity\n              completeParts = 0\n          }\n\n          if(mergingRoutes[idx].load === option[requirement] && !option.includes(stationID)){\n               completeParts = existingPartQty<completeParts ? existingPartQty : completeParts\n           }\n        }\n       }\n       if(option.includes(stationID)){\n         if(countQuantity>bestQty) bestQty = countQuantity\n       }\n        totalCompleteParts += completeParts\n        completeParts = currentLot.totalQuantity\n     }\n\n     return totalCompleteParts\n\n}\n\n/** Davis\n * Given the bin at a destination, this function determines the ~actual~ quantity of parts at the station based on the expression\n * that describes the required inputs (based on splits and merges).\n *\n * @param {object} bins The current bins\n * @param {array} mergeExpression This is the expression output from the handleMergeExpression function from process_utils. It\n * contains the \"AND\" \"OR\" boolean expressions that describe the required input routes to count as a part\n */\nexport const handleMergedLotBin = (bin, mergeExpression, station, routeId, count) => {\n    const recursiveConditionalQuantities = (subExpression) => {\n        // Since the expression can have nested elements, this function needs to be recursive\n        let splitToChoice = false\n        if (Array.isArray(subExpression)) {\n            let precursor = subExpression[0]\n\n            //Check for splitToChoice case\n            if(precursor === 'AND'){\n              for(let i = 1; i<Object.values(subExpression).length; i++){\n                if(subExpression[i][0] === 'OR') splitToChoice = true\n              }\n            }\n\n            if(!!splitToChoice){\n              let pathArray = handleGenerateSplitChoiceArray(subExpression)\n              const [containedInCombo, bestComboCount] = handleGetOptimalCombo(pathArray, bin, routeId, count)\n              return bestComboCount\n\n            }\n            else{\n              if (subExpression[0] === 'AND') {\n                  let count = Math.max(...Object.values(bin));\n                  for (var i=1; i<subExpression.length; i++) {\n                      // If its an AND, its the minimum of all the quantities of the incoming routes\n                      if(!!subExpression[i]){\n                        count = Math.min(count, recursiveConditionalQuantities(subExpression[i]));\n                      }\n                  }\n                  return count\n              } else if (subExpression[0] === 'OR') {\n                  let count = 0\n                  for (var i=1; i<subExpression.length; i++) {\n                      // If its an OR, we actually want the SUM of all the quantities of the station options\n                      count += recursiveConditionalQuantities(subExpression[i])\n                  }\n                  return count\n              }\n            }\n\n        } else {\n            return subExpression in bin ? bin[subExpression] : 0;\n        }\n\n    }\n    return {\n        ...bin,\n        count: recursiveConditionalQuantities(mergeExpression)\n    }\n\n}\n\n/**This function handles the case of split followed by choice.\nThis case is unusual as different combinations can be used to create an available qty\nThe function creates an array of all possible merge combinations that will create a fully merged part in the [AND, A, [OR,B,C]] subexpression.\nNote, this is the simplest case with only 2 possible combinations of 2 paths (2x2 array). if subExpression was [AND, [OR,A,B], [OR,C,D,E]]\na list of all combinations should be AC, AD, AE, BC, BD, BE.\n\n*/\n\nexport const handleGenerateSplitChoiceArray = (row) => {\n  let subArray = []\n  let existingArrLength = 0\n  let rowLength = 0\n  let index = 0\n\n\n  for(let i = 1; i<Object.values(row).length; i++){\n\n    let subArrayCopy = []//Need a copy so you can reference these values when duplicating array.\n    for (const index in subArray){\n      subArrayCopy.push([])\n      for(const idx in subArray[index]){\n        subArrayCopy[index].push(subArray[index][idx])\n      }\n    }\n\n    existingArrLength = Object.values(subArray).length\n    rowLength = Object.values(row[i]).length\n    if(rowLength === 36){ //if element in the subexpression is just single ID\n        if(existingArrLength === 0){\n          subArray.push([])\n          subArray[0].push(row[i][0])\n        }\n        else{\n          for(const ind in subArray){\n            subArray[ind].push(row[i])\n          }\n        }\n      }\n\n    else{\n      if(row[i][0] === \"OR\"){//if one element in the subexpression is an OR array\n          if(existingArrLength === 0){//If no array, push options, creating new row for each ID\n            for(let j = 1; j<rowLength; j++){\n              subArray.push([])\n              subArray[j-1].push(row[i][j])\n            }\n          }\n          else{\n            for(let j = 1; j<rowLength; j++){//if array exists push options into array\n              for(let k = 0; k<existingArrLength; k++){//you need to duplicate rows for each option. eg.  A and [B or C] would need to duplicate A twice when pushing options B,C to get [A,B],[A,C]\n                let ind = k+existingArrLength*(j-1)\n                if(j>1){//If on second or higher option always need to duplicate existing rows\n                  subArray.push([])\n                  for(let p = 0; p < Object.keys(subArrayCopy[k]).length; p++) {\n                    subArray[ind].push(subArrayCopy[k][p])\n                  }\n                    subArray[ind].push(row[i][j])\n                }\n                else{//if on first option just push to existing row\n                  subArray[k].push(row[i][j])\n                }\n              }\n            }\n          }\n        }\n\n      else if(row[i][0] === \"AND\"){ //if one of the elements in subexpression is an AND array\n          if(existingArrLength === 0){//If array doesnt exist just push AND options\n            for(let m=1; m<rowLength; m++){\n              if(m===1) subArray.push([])\n              subArray[0].push(row[i][m])\n            }\n          }\n          else{//Else need to go through each row in array and add AND option to the end\n            for(let m=1; m<rowLength; m++){\n              for(let n = 0; n<existingArrLength; n++) subArray[n].push(row[i][m])\n            }\n          }\n        }\n      }\n    }\n    return subArray\n}\n\n\n/**This function uses the handleGenerateSplitChoiceArray's array and goes through each option\nto see if the parts are available in that combination to make a merged part. If it is possible\nto make 1 or more merged parts from this array row, remove the parts and add to completed count\n*/\nexport const handleGetOptimalCombo = (iDs, bin, routeId, count) => {\n\n  let comboCount = count\n  let containedInCombo = false\n  let optimalCombo = []\n\n\n  for(const i in iDs[1]){\n    let combo = iDs[1][i]\n    comboCount = count\n    for(const j in combo){\n      let partId = combo[j]\n      if(!!partId && !!bin[partId]){\n        if(bin[partId] < comboCount) comboCount = bin[partId]\n      }\n      else {\n        comboCount = 0\n      }\n    }\n\n\n    if(comboCount>0){//Greater than 0, consume the parts, add to count\n      for(const k in combo){\n        bin[combo[k]]-=comboCount\n        }\n        bin['count']+=comboCount\n      }\n    }\n\n    return bin\n}\n\n/**This gets the overall array for all ways to create a completed parts\n  it can include the handleGenerateSplitChoiceArray if the AND->OR case comes up\n  there is still some work to fully integrate AND->OR part in really complex cases\n  eg. [AND, OR[A,B], AND[C,[OR,D,OR[E,F]]]] wont work. Anything with less than\n  6 routes coming into a station will work.\n*/\n\nexport const handleGetPathArray = (station, process) => {\n  const processes = store.getState().processesReducer.processes || {}\n  const routes = store.getState().tasksReducer.tasks || {}\n  const stations = store.getState().stationsReducer.stations || {}\n\n  let iDs = []\n  let option = 0\n  let requirement = 0\n  let startOption = 0\n  let splitToChoice = false\n  let involveSplitChoice = false\n\n  let precursor = ''\n  iDs.push([])\n\n  const recursiveParse = (row) => {\n      let splitMergeInd = 0\n      let splitToChoice = false\n      if(Array.isArray(row)){\n        let precursor = row[0]\n\n        //Check for splitToChoice case\n        if(precursor === 'AND'){\n          for(let i = 1; i<Object.values(row).length; i++){\n            if(!!row[i] && row[i][0] === 'OR') {\n              splitToChoice = true\n              involveSplitChoice = true\n              startOption = option\n            }\n          }\n        }\n        if(!splitToChoice){\n          for(let i = 1; i<Object.values(row).length; i++){\n            if(Array.isArray(row[i])){\n              if(row[0] === 'OR'){\n                option+=1\n                iDs.push([])\n              }\n              recursiveParse(row[i])\n            }\n            else{\n              if(precursor === 'OR'){\n                involveSplitChoice = false\n                iDs[option].push(row[i])\n                option+=1\n                iDs.push([])\n\n              }\n              else if(precursor === 'AND'){\n                if(!!involveSplitChoice){\n                  for(let a = startOption; a<option; a++){\n                    iDs[a].push(row[i])\n                  }\n                }\n                else{\n                  iDs[option].push(row[i])\n                }\n              }\n            }\n          }\n        }\n        else {\n          let pathArray = handleGenerateSplitChoiceArray(row)\n          for(const i in pathArray){\n            for(const j in pathArray[i]){\n              iDs[option].push(pathArray[i][j])\n            }\n            option+=1\n            iDs.push([])\n          }\n        }\n      }\n    }\n\n    recursiveParse(handleMergeExpression(station, process, routes, stations))\n    //console.log(handleMergeExpression(station, process, routes, stations))\n    return iDs\n}\n\n/**This merges handles merging parts. It takes the array of all options and consumes parts that will merge to full part */\nexport const handleMergeParts = (bin, routeId, count, station, process) => {\n  const processes = store.getState().processesReducer.processes || {}\n  const routes = store.getState().tasksReducer.tasks || {}\n\n  let iDs = handleGetPathArray(station, process, routes)\n  //Determine count for that path\n  for(const ind in iDs){//Go through all options\n    let minCount = count\n    if(Object.values(iDs[ind]).length>0){\n      for(const idx in iDs[ind]){\n          let prt = iDs[ind][idx]\n          if(!!prt && !!bin[prt]){\n            if(bin[prt]<minCount) minCount = bin[prt]\n          }\n          else minCount = 0\n      }\n      if(minCount>0){\n        for(const idx in iDs[ind]){\n            let id = iDs[ind][idx]\n            if(!!bin[id] && bin[id]-minCount === 0) delete bin[id]\n            else bin[id]-=minCount\n          }\n          bin['count'] += minCount\n        }\n      }\n    }\n    return bin\n  }\n\n\nexport const moveLot = (lot, destinationBinId, startBinId, quantity) => {\n\n    let updatedLot = { ...lot }\n\n    const oldBins = lot.bins ? lot.bins : {}\n\n    const {\n        [startBinId]: startBin,\n        [destinationBinId]: destinationBin,\n        ...remainingOldBins\n    } = oldBins || {}\n\n    if (startBin) {\n        // handle updating lot\n        {\n            const destinationBinQuantity = parseInt(destinationBin?.count || 0)\n            const startBinQuantity = parseInt(startBin?.count || 0)\n\n            if (quantity > startBinQuantity) return false\n\n            updatedLot = {\n                ...updatedLot,\n                bins: {\n                    ...remainingOldBins,\n                    [startBinId]: {\n                        ...startBin,\n                        count: startBinQuantity - quantity\n                    },\n                    [destinationBinId]: {\n                        ...destinationBin,\n                        count: destinationBinQuantity + quantity\n                    }\n                }\n            }\n        }\n    }\n\n    return updatedLot\n\n}\n\n  //This function determines if multiple routes are merging into a station and handles the lot quantity available to move accordingly\n  //If multiple routes merge into a station the parts at the station are kept track of at that bin\n  //If one type of part doesn't exist yet none of that lot can be moved along\n  //Otherwise, assuming 1 to 1 ratio the type of part with lowest count limits the amount of the lot that is available to move\nexport const handleNextStationBins = (bins, quantity, loadStationId, unloadStationId, process, routes, stations) => {\n\n    const processRoutes = process.routes.map((routeId) => routes[routeId]);\n    let unloadStations = processRoutes.map((route) =>\n        !!route ? route.unload : {}\n    );\n\n    const mergingRoutes = process.routes\n      .map((routeId) => routes[routeId])\n      .filter((route) => route.unload === unloadStationId && (stations[route.load]?.type !=='warehouse' || unloadStations.includes(route.load)));\n\n    if (mergingRoutes.length > 1) {\n      //If multiple routes merge into station, keep track of parts at the station\n\n      let mergingExpression = handleMergeExpression(\n        unloadStationId,\n        process,\n        routes,\n        stations\n      );\n\n      let tempBin,\n        currentBin = bins[unloadStationId];\n      let traveledRoute = mergingRoutes.find((route) => route.load === loadStationId);\n      if(!traveledRoute){ //This handles dragging lot back into merge station. Just add to existing qty and keep excess parts the same\n        let totalQuantity = !!bins[unloadStationId]?.count\n          ? bins[unloadStationId].count + quantity\n          : quantity;\n\n        bins[unloadStationId] = {\n          ...bins[unloadStationId],\n          count: totalQuantity,\n        };\n      }\n      else{\n        if (!!currentBin) {\n          // The Bin for the destination already exists, update quantities\n\n          let existingQuantity = !!currentBin[traveledRoute._id]\n\n\n            ? currentBin[traveledRoute._id]\n            : 0;\n          tempBin = {\n            ...bins[unloadStationId],\n            [traveledRoute._id]: (existingQuantity += quantity),\n          };\n\n\n          bins[unloadStationId] = handleMergeParts(\n            tempBin,\n            traveledRoute._id,\n            99999999,\n            unloadStationId,\n            process\n          );\n        } else {\n          // The Bin for the destination does not exist, create is here\n\n          tempBin = {\n            [traveledRoute._id]: quantity,\n            count: 0\n          };\n\n          bins[unloadStationId] = handleMergeParts(\n            tempBin,\n            traveledRoute._id,\n            99999999,\n            unloadStationId,\n            process\n          );\n        }\n      }\n\n    } else {\n      // Only one route enters station, don't worry about tracking parts at the station\n      let totalQuantity = !!bins[unloadStationId]?.count\n        ? bins[unloadStationId].count + quantity\n        : quantity;\n      bins[unloadStationId] = {\n        count: totalQuantity,\n      };\n    }\n\n    return bins;\n  };\n\n\nexport const handleCurrentStationBins = (bins, quantity, loadStationId, process, routes) => {//Since parts are now consumed, only reduce count. dont need to touch parts.\n    bins[loadStationId].count -= quantity;\n    if(bins[loadStationId].count <= 0 && Object.keys(bins[loadStationId]).length === 1) delete bins[loadStationId]\n    return bins;\n  };\n\n\nexport const createPastePayload = (table, fieldMapping) => {\n  return table.map((row, i) => {\n\n    let lotFields = {};\n    for (var j=0; j<row.length; j++) {\n      if (!!fieldMapping[j]) {\n        let { index: rangeIndex, ...field} = fieldMapping[j]\n        let { value } = row[j]\n\n        // Parse Data\n        if(field.dataType === FIELD_DATA_TYPES.DATE_RANGE) {\n          let parsedDate = new Date(value)\n\n          if (field._id in lotFields) {\n            if (Array.isArray(lotFields[field._id].value)) {\n              // DATE_RANGE type is an array of values. If one of the values has been set this will be an array\n              // therefore, we just alter the array at the index that the field specifies\n              let dateArr = lotFields[field._id].value\n              dateArr.splice(rangeIndex, 0, parsedDate)\n              lotFields[field._id].value = dateArr\n              continue // Dont append a new field because one for this already exists\n            }\n          }\n          value = [null, null]\n          value[rangeIndex] = parsedDate\n        }\n        else if(field.dataType === FIELD_DATA_TYPES.INTEGER) {\n          value = parseInt(value)\n          if(!Number.isInteger(value)) value = null\n        }\n\n        lotFields[field._id] = {\n          ...field,\n          value\n        }\n      }\n    }\n\n    return lotFields\n\n\n  })\n}\n","export const STARTED = '_STARTED';\nexport const SUCCESS = '_SUCCESS';\nexport const FAILURE = '_FAILURE';\nexport const SELECTED = '_SELECTED';\nexport const KICK_OFF_ENABLED = '_KICK_OFF_ENABLED';\nexport const FINISH_ENABLED = '_FINISH_ENABLED';","import {deepCopy} from \"./utils\";\nimport {SORT_MODES} from \"../../constants/common_contants\";\nimport {isObject} from \"./object_utils\";\nimport {isArray} from \"./array_utils\";\nimport {\n\tdefaultBins,\n\tFIELD_COMPONENT_NAMES,\n\tFIELD_DATA_TYPES,\n\tLOT_PRIMARY_FIELD_IDS, REQUIRED_FIELDS,\n\tSORT_DIRECTIONS\n} from \"../../constants/lot_contants\";\nimport {BASIC_FIELD_DEFAULTS, DATA_TYPE_DEFAULTS} from \"../../constants/form_constants\";\nimport {toIntegerOrZero} from \"./number_utils\";\nimport {isValidDateString} from \"./date_utils\";\nimport {isInteger} from \"formik\";\nimport {getLotField} from \"./lot_utils\";\n\nconst EVENT_NAMES = {\n\tCREATE: \"create\",\n\tUPDATE: \"update\"\n}\n\nexport const jsDateToObjDate = (jsDate) => {\n\tif(!jsDate) return null\n\n\tlet trimmed = new Date(new Date(jsDate).toDateString());\n\n\tlet month = trimmed.getUTCMonth()\n\tlet day = trimmed.getUTCDate();\n\tlet year = trimmed.getUTCFullYear();\n\n\treturn {year, month: month + 1, day}\n}\n\n\nexport const generateBinId = (index, stationId) => {\n\treturn index + \"+\" + stationId\n}\nexport const parseMessageFromEvent = (eventName, username, data) => {\n\tswitch(eventName) {\n\n\t\tcase EVENT_NAMES.CREATE:\n\t\t\treturn [`Created card`]\n\n\t\tcase EVENT_NAMES.UPDATE:\n\t\t\tlet msgs = []\n\n\t\t\tconst keys = Object.keys(data)\n\t\t\tkeys.forEach((currKey) => {\n\t\t\t\tconst {\n\t\t\t\t\tnew: newVal,\n\t\t\t\t\told: oldVal,\n\t\t\t\t} = data[currKey]\n\n\t\t\t\tif(oldVal) {\n\t\t\t\t\tmsgs.push(`Changed ${currKey} from \"${oldVal}\" to \"${newVal}\"`)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmsgs.push(`Set ${currKey} to \"${newVal}\"`)\n\t\t\t\t}\n\n\n\t\t\t})\n\n\t\t\t// if(msgs.length === 0) msgs.push(\"No info found\")\n\n\t\t\treturn msgs\n\n\t\tdefault:\n\t\t\treturn [`${eventName} performed by ${username}`]\n\t}\n}\n\n/*\n* Converts date from a lot into a JS date object\n*\n* The lot date object contains key, value pairs for year, month, and date\n* These values are extracted, and if the values are valid, used to generate a new Date objects\n*\n* returns a JS Date object if the lot date is valid, and null otherwise\n*\n* @param {object} cardDate - object containing year, month and date keys\n* */\nexport const convertCardDate = (cardDate) => {\n\tconst year = cardDate?.year || 0\n\tconst month = cardDate?.month || 0\n\tconst day = cardDate?.day || 0\n\n\treturn (year && (month + 1) && day) ? new Date(year, month + 1, day, 0, 0, 0, 0) : null\n}\n\n/*\n\t* extracts initial values from the current lot and maps them to the template parameter\n\t* */\nexport const getFormCustomFields = (fields, card) => {\n\tlet initialValues = [] // initialize to empty object\n\n\t// make sure fields is array\n\tif(isArray(fields)) {\n\n\t\t// loop through rows in column\n\t\tfields.forEach((currRow, currRowIndex) => {\n\t\t\tlet newRow = []\n\n\t\t\t// loop through items in row\n\t\t\tcurrRow.forEach((currItem, currItemIndex) => {\n\n\t\t\t\t// extract properties of currItem\n\t\t\t\tconst {\n\t\t\t\t\tfieldName,\n\t\t\t\t\t_id: fieldId,\n\t\t\t\t\tcomponent,\n\t\t\t\t\tdataType,\n\t\t\t\t\tkey\n\t\t\t\t} = currItem || {}\n\n\t\t\t\tlet value\n\t\t\t\tif(isArray(card)) {\n\t\t\t\t\tfor(const field of card.flat()) {\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t_id,\n\t\t\t\t\t\t\tvalue: currVal\n\t\t\t\t\t\t} = field || {}\n\n\t\t\t\t\t\tif(_id === fieldId) {\n\t\t\t\t\t\t\tvalue = currVal\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tnewRow.push({\n\t\t\t\t\t...currItem,\n\t\t\t\t\tvalue: convertValue(value, dataType)\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tinitialValues.push(newRow)\n\t\t})\n\t}\n\telse {\n\n\t}\n\n\treturn initialValues\n}\n\n/*\n* Takes value and desired dataType, and converts value to dataType if necessary\n* */\nexport const convertValue = (value, dataType) => {\n\tif(!value) return DATA_TYPE_DEFAULTS[dataType]\n\n\tswitch(dataType) {\n\t\tcase FIELD_DATA_TYPES.STRING: {\n\t\t\tif(!(value instanceof String)) return value.toString()\n\t\t}\n\t\tcase FIELD_DATA_TYPES.EMAIL: {\n\t\t\tbreak\n\t\t}\n\t\tcase FIELD_DATA_TYPES.DATE: {\n\t\t\tif(!(value instanceof Date)) return new Date(value)\n\t\t\tbreak\n\t\t}\n\t\tcase FIELD_DATA_TYPES.DATE_RANGE: {\n\t\t\tlet updatedValues = [...BASIC_FIELD_DEFAULTS.CALENDAR_FIELD_RANGE]\t// SPREAD SO YOU DON'T CHANGE THE VALUE OF THE CONSTANT DEFAULT\n\n\t\t\t// convert first item to date\n\t\t\tif( isArray(value) && value.length > 0 && value[0] !== null) {\n\t\t\t\tupdatedValues[0] = new Date(value[0])\n\t\t\t}\n\n\t\t\t// convert second item to date\n\t\t\tif(value.length > 1 && value[1] !== null) {\n\t\t\t\tupdatedValues[1] = new Date(value[1])\n\t\t\t}\n\n\t\t\treturn updatedValues\n\n\t\t\tbreak\n\t\t}\n\t\tcase FIELD_DATA_TYPES.URL: {\n\t\t\tbreak\n\t\t}\n\t\tcase FIELD_DATA_TYPES.INTEGER: {\n\t\t\tif(!isInteger(value)) return parseInt(value)\n\t\t\tbreak\n\t\t}\n\t\tdefault: {\n\t\t\treturn value\n\t\t}\n\t}\n\n\treturn value\n}\n\nexport const convertLotToExcel = (lot, lotTemplateId) => {\n\t// const {\n\t// \t[lotTemplateId]: templateValues,\n\t// \t...rest\n\t// } = lot\n\t//\n\t// return {\n\t// \t...templateValues,\n\t// \t...rest\n\t// }\n\n\treturn {\n\t\t...lot\n\t}\n}\n\nexport const convertPastePayloadToLot = (excel, lotTemplate, processId) => {\n\tlet remainingExcel = {...excel}\n\tlet lot = {}\n\n\tfor(const primaryField of REQUIRED_FIELDS) {\n\n\t\tconst {\n\t\t\t_id: primaryFieldId,\n\t\t\tfieldName,\n\t\t\tdataType,\n\t\t\tfieldPath,\n\t\t} = primaryField || {}\n\n\t\tconst {\n\t\t\t[primaryFieldId]: extractedPrimaryField,\n\t\t\t...rest\n\t\t} = remainingExcel\n\t\tremainingExcel = rest\n\n\n\t\tconst value = extractedPrimaryField ? extractedPrimaryField.value : DATA_TYPE_DEFAULTS[dataType]\n\n\t\t// for fields that use a field path, must contrcut value object\n\t\tif(isArray(fieldPath) && fieldPath.length > 0) {\n\n\t\t\tlet constrcutedValue = {}\n\t\t\tconstrcutedValue = {[fieldPath[fieldPath.length - 1]]: value}\n\n\t\t\tfieldPath.forEach((currentPath, currPathIndex) => {\n\t\t\t\tif(currPathIndex === fieldPath.length - 1) return // skip last since it was done\n\t\t\t\tconstrcutedValue = {[currentPath]: constrcutedValue}\n\t\t\t})\n\n\t\t\tlot[fieldName] = constrcutedValue\n\t\t}\n\n\n\t\telse {\n\t\t\tlot[primaryField.fieldName] = value\n\t\t}\n\t}\n\n\tlot.fields = getFormCustomFields(lotTemplate.fields, [Object.values(remainingExcel)])\n\tlot.processId = processId\n\n\treturn lot\n}\n/*\n* This function receives an array of cards as an argument and sorts them based on the {sortMode} argument.\n*\n* The original array is modified in place - THIS WILL MODIFY THE ARRAY - pass a copy if the original array shouldn't be modified\n*\n* @param {array} arr - array of cards\n* @param {string} sortMode - string identifier of mode to sort by\n* */\nexport const sortBy = (arr, sortMode, sortDirection) => {\n\n\tconst isAscending = sortDirection.id === SORT_DIRECTIONS.ASCENDING.id\n\n\tconst {\n\t\tdataType,\n\t\tlabel,\n\t\tindex,\n\t\tfieldName,\n\t\tprimary,\n\t\t_id: fieldId,\n\t} = sortMode\n\n\tarr.sort((itemA, itemB) => {\n\t\tlet fieldA, fieldB\n\n\t\tif(primary) {\n\t\t\tfieldA = itemA[fieldName]\n\t\t\tfieldB = itemB[fieldName]\n\t\t}\n\t\telse {\n\t\t\tfieldA = getLotField(\"fieldName\", fieldName, itemA)?.value\n\t\t\tfieldB = getLotField(\"fieldName\", fieldName, itemB)?.value\n\t\t}\n\n\t\tswitch(dataType) {\n\t\t\tcase FIELD_DATA_TYPES.URL: {\n\t\t\t\t// not yet implemented\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase FIELD_DATA_TYPES.EMAIL: {\n\t\t\t\t// not yet implemented\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase FIELD_DATA_TYPES.DATE: {\n\t\t\t\tif(!fieldA) return 1\n\t\t\t\tif(!fieldB) return -1\n\t\t\t\tif(isAscending) {\n\t\t\t\t\treturn new Date(fieldA) - new Date(fieldB);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn new Date(fieldB) - new Date(fieldA);\n\t\t\t\t}\n\n\t\t\t\tbreak\n\n\t\t\t}\n\t\t\tcase FIELD_DATA_TYPES.DATE_RANGE: {\n\t\t\t\tif(!fieldA) return 1\n\t\t\t\tif(!fieldB) return -1\n\n\t\t\t\tconst valA = fieldA[index]\n\t\t\t\tconst valB = fieldB[index]\n\n\t\t\t\tif(!valA) return 1\n\t\t\t\tif(!valB) return -1\n\t\t\t\tif(isAscending) {\n\t\t\t\t\treturn new Date(valA) - new Date(valB);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn new Date(valB) - new Date(valA);\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase FIELD_DATA_TYPES.STRING: {\n\t\t\t\tif(!fieldA) return 1\n\t\t\t\tif(!fieldB) return -1\n\n\t\t\t\tif(isAscending) {\n\t\t\t\t\tif(fieldA >= fieldB) return 1\n\t\t\t\t\treturn -1\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(fieldA >= fieldB) return -1\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase FIELD_DATA_TYPES.INTEGER: {\n\t\t\t\tif(fieldA === null) return 1\n\n\t\t\t\tif(isAscending) {\n\t\t\t\t\tif(fieldA >= fieldB) return 1\n\t\t\t\t\treturn -1\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(fieldA >= fieldB) return -1\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t})\n\n\treturn arr\n}\n\nexport const jsDateToString = (jsDate) => {\n\tconst objDate = jsDateToObjDate(jsDate)\n\n\tconst {\n\t\tyear: startYear,\n\t\tmonth: startMonth,\n\t\tday: startDay\n\t} = objDate || {}\n\n\treturn (startDay && startMonth && startYear) ? `${startMonth}/${startDay}/${startYear}` : null\n}\n\nexport const dateRangeToStrings = (dateRange) => {\n\n\tlet startDateText\n\tlet endDateText\n\tif(isArray(dateRange) && dateRange.length > 0) {\n\t\tstartDateText = jsDateToString(dateRange[0])\n\n\t\tif(dateRange.length > 1) {\n\t\t\tendDateText = jsDateToString(dateRange[1])\n\t\t}\n\t}\n\n\treturn [startDateText, endDateText]\n}\n","export const ADD_TASK_ALERT_TYPE = {\n    TASK_EXISTS: \"TASK_EXISTS\",\n    TASK_ADDED: \"TASK_ADDED\",\n    ADDING: \"ADDING\",\n    REPORT_SEND_SUCCESS: \"REPORT_SEND_SUCCESS\",\n    REPORT_SEND_FAILURE: \"REPORT_SEND_FAILURE\",\n    KICK_OFF_SUCCESS: \"KICK_OFF_SUCCESS\",\n    KICK_OFF_FAILURE: \"KICK_OFF_FAILURE\",\n    FINISH_SUCCESS: \"FINISH_SUCCESS\",\n    FINISH_FAILURE: \"FINISH_FAILURE\",\n}\n\nexport const PAGES = {\n    DASHBOARDS: \"Dashboards\",\n    EDITING: \"Editing\",\n    DASHBOARD: \"Dashboard\"\n}\n\nexport const DASHBOARD_BUTTON_COLORS = [\n    {\n        hex: '#FF4B4B',\n        label: \"Red\"\n    },\n    {\n        hex: '#56d5f5',\n        label: \"Blue\"\n    },\n    {\n        hex: '#50de76',\n        label: \"Green\"\n    },\n    {\n        hex: '#f2ae41',\n        label: \"Orange\"\n    },\n    {\n        hex: '#c7a0fa',\n        label: \"Purple\"\n    }\n]\n\nexport const OPERATION_TYPES = {\n    REPORT: {\n        schema: \"error\",\n        name: \"Report\",\n        key: \"REPORT\",\n        _id: 0\n    },\n    KICK_OFF: {\n        schema: \"kick_off\",\n        key: \"KICK_OFF\",\n        name: \"Kick off\",\n        _id: 1\n    },\n    FINISH: {\n        schema: \"finish\",\n        key: \"FINISH\",\n        name: \"Finish\",\n        _id: 2\n    }\n}\n\nexport const TYPES = {\n    // ALL: {\n    //     name: \"ALL\",\n    //     iconName: \"fal fa-globe\"\n    // },\n    ROUTES: {\n        name: \"Routes\",\n        iconName: \"fas fa-route\",\n        key: \"ROUTES\"\n    },\n    OPERATIONS: {\n        name: \"Operations\",\n        iconName: \"fas fa-sticky-note\",\n        key: \"OPERATIONS\"\n    }\n}\n","export const convertD3ToReal = ([x, y], d3) => {\n\n    const pos_x = d3.mapResolution * (x - d3.translate[0]) / d3.scale\n    const pos_y = d3.mapResolution * -(((y - d3.translate[1]) / d3.scale) - d3.naturalDims.height)\n\n    return [pos_x, pos_y]\n}\n\nexport const convertRealToD3 = ([pos_x, pos_y], d3) => {\n    const x = d3.translate[0] + d3.scale * pos_x / (d3.mapResolution)\n    const y = d3.translate[1] + d3.scale * (d3.naturalDims.height - (pos_y / d3.mapResolution))\n\n    return [x, y]\n}\n","import styled, {css} from 'styled-components'\n\n\nexport const button = () => css`\n    border-radius: .4rem;\n    box-shadow: 0px 1px 3px 1px rgba(0,0,0,0.2);\n    border: none;\n\n    &:active {\n        box-shadow: none;\n        transform: translateY(1px);\n    }\n`\n\nexport const activeButtonCss = css`\n  box-shadow: none;\n  transform: translateY(0px);\n  filter: brightness(90%);\n  \n  //border: 1px solid ${props => props.theme.schema[props.schema].solid};\n`\n\nexport const onButtonCss = css`\n  box-shadow: 2px 2px 1px rgba(0,0,0,0.2);\n  transform: translateY(-2px);\n  filter: brightness(115%);\n`\n\nexport const hoverButtonCss = css`\n  //border: 1px solid ${props => props.theme.schema[props.schema].solid};\n  box-shadow: 2px 2px 1px rgba(0,0,0,0.2);\n  transform: translateY(-1px);\n  filter: brightness(110%);\n`\n\nexport const basicButtonCss = css`\n  border-radius: .4rem;\n  box-shadow: 1px 1px 1px rgba(0,0,0,0.2);\n  border: 1px solid rgba(0,0,0,0);\n`\n\nexport const buttonCss = css`\n  transition: all 0.2s ease-in;\n  ${basicButtonCss};\n  \n  &:hover {\n    ${hoverButtonCss};\n  }\n\n  &:active {\n    ${activeButtonCss};\n  }\n  \n  ${props => props.on && onButtonCss}\n`\n\n","import {\n  GET,\n  POST,\n  DELETE,\n  PUT, SET\n} from '../types/prefixes';\n\nimport {\n  STARTED,\n  SUCCESS,\n  FAILURE, SELECTED\n} from '../types/suffixes'\n\nimport {\n  LOT_TEMPLATE,\n  LOT_TEMPLATES\n} from '../types/data_types'\n\n\n\nconst defaultState = {\n  lotTemplates: {},\n  selectedLotTemplatesId: \"\"\n};\n\nexport default function lotTemplatesReducer(state = defaultState, action) {\n\n  switch (action.type) {\n    case GET + LOT_TEMPLATE + SUCCESS:\n      return {\n        ...state,\n        lotTemplates: {...state.lotTemplates, [action.payload.lotTemplate._id]: action.payload.lotTemplate},\n        pending: false,\n      }\n\n    case GET + LOT_TEMPLATES + SUCCESS:\n      return {\n        ...state,\n        lotTemplates: {...state.lotTemplates, ...action.payload.lotTemplates},\n        pending: false,\n      }\n\n    case POST + LOT_TEMPLATE + SUCCESS:\n      return {\n        ...state,\n        lotTemplates: {...state.lotTemplates, [action.payload.lotTemplate._id]: action.payload.lotTemplate},\n        pending: false,\n      }\n\n    case PUT + LOT_TEMPLATE + SUCCESS:\n      return {\n        ...state,\n        lotTemplates: {...state.lotTemplates, [action.payload.lotTemplate._id]: action.payload.lotTemplate},\n        pending: false,\n      }\n\n    case DELETE + LOT_TEMPLATE + SUCCESS:\n      const { [action.payload.id]: value, ...rest } = state.lotTemplates; // extracts payload from rest\n\n      return {\n        ...state,\n        lotTemplates: {...rest},\n        pending: false,\n      }\n\n    case SET + LOT_TEMPLATE + SELECTED: {\n      return {\n        ...state,\n        selectedLotTemplatesId: action.payload\n      }\n    }\n\n    case 'SET_LOT_TEMPLATE_ATTRIBUTES': {\n      return {\n        ...state,\n        lotTemplates: {...state.lotTemplates, [action.payload.id]: {...state.lotTemplates[action.payload.id], ...action.payload.attr}},\n      }\n    }\n\n    default:\n      return state\n    }\n}\n","import { uuidv4 } from \"../methods/utils/utils\";\n\nexport const QUEUE_BIN_ID = \"QUEUE\"\nexport const FINISH_BIN_ID = \"FINISH\"\n\nexport const QUEUE_BIN_DISPLAY_NAME = \"Queue\"\nexport const FINISH_BIN_DISPLAY_NAME = \"Finish\"\n\nexport const BIN_IDS = {\n    QUEUE: QUEUE_BIN_ID,\n    FINISH: FINISH_BIN_ID\n}\n\nexport const QUEUE_THEME = {\n    ICON: \"fas fa-ellipsis-h\",\n    COLOR: \"#b642f5\",\n    ID: QUEUE_BIN_ID,\n    DISPLAY_NAME: QUEUE_BIN_DISPLAY_NAME\n\n}\nexport const FINISH_THEME = {\n    ICON: \"fas fa-box\",\n    COLOR: \"#ff8605\",\n    ID: FINISH_BIN_ID,\n    DISPLAY_NAME: FINISH_BIN_DISPLAY_NAME,\n}\n\nexport const BIN_THEMES = {\n    QUEUE: QUEUE_THEME,\n    FINISH: FINISH_THEME\n}\n\nexport const FIELD_COMPONENT_NAMES = {\n    TEXT_BOX: \"TEXT_BOX\",\n    TEXT_BOX_BIG: \"TEXT_BOX_BIG\",\n    INPUT_BOX: 'INPUT_BOX',\n    NUMBER_INPUT: \"NUMBER_INPUT\",\n    CALENDAR_SINGLE: \"CALENDAR_SINGLE\",\n    CALENDAR_START_END: \"CALENDAR_START_END\",\n}\n\nexport const FIELD_DATA_TYPES = {\n    STRING: \"STRING\",\n    EMAIL: \"EMAIL\",\n    DATE: \"DATE\",\n    DATE_RANGE: \"DATE_RANGE\",\n    URL: \"URL\",\n    INTEGER: \"INTEGER\",\n}\n\nexport const CONTENT = {\n    HISTORY: \"HISTORY\",\n    CALENDAR: \"CALENDAR\",\n    MOVE: \"MOVE\"\n}\n\nexport const FORM_BUTTON_TYPES = {\n    SAVE: \"SAVE\",\n    ADD: \"ADD\",\n    ADD_AND_NEXT: \"ADD_AND_NEXT\",\n    MOVE_OK: \"MOVE_OK\",\n    ADD_AND_MOVE: 'AND_AND_MOVE'\n}\n\nexport const BASIC_LOT_TEMPLATE_ID = \"BASIC_LOT_TEMPLATE\"\n\n\n\nexport const EDITOR_SIDEBAR_TYPES = {\n    FIELDS: {\n        name: \"Fields\",\n        iconName: \"fas fa-route\",\n    }\n}\n\n\n\nexport const LOT_EDITOR_SIDEBAR_OPTIONS = {\n    TEXT_BOX: {\n        component: FIELD_COMPONENT_NAMES.TEXT_BOX,\n        dataType: FIELD_DATA_TYPES.STRING\n    },\n    TEXT_BOX_BIG: {\n        component: FIELD_COMPONENT_NAMES.TEXT_BOX_BIG,\n        dataType: FIELD_DATA_TYPES.STRING\n    },\n    INPUT_BOX: {\n        component: FIELD_COMPONENT_NAMES.INPUT_BOX,\n        dataType: FIELD_DATA_TYPES.STRING\n    },\n    NUMBER_INPUT: {\n        component: FIELD_COMPONENT_NAMES.NUMBER_INPUT,\n        dataType: FIELD_DATA_TYPES.INTEGER\n    },\n    CALENDAR_SINGLE: {\n        component: FIELD_COMPONENT_NAMES.CALENDAR_SINGLE,\n        dataType: FIELD_DATA_TYPES.DATE\n    },\n    CALENDAR_START_END: {\n        component: FIELD_COMPONENT_NAMES.CALENDAR_START_END,\n        dataType: FIELD_DATA_TYPES.DATE_RANGE\n    },\n}\n\n\n\nexport const SIDE_BAR_MODES = {\n    FIELDS: {\n        name: \"Fields\",\n        iconName: \"fas fa-edit\",\n        color: \"red\"\n    },\n    TEMPLATES: {\n        name: \"Templates\",\n        iconName: \"fas fa-file-invoice\",\n        color: \"cyan\"\n    }\n}\n\nexport const TEMPLATE_FIELD_KEYS = {\n    FIELD_NAME: \"fieldName\",\n    REQUIRED: \"required\",\n    SHOW_IN_PREVIEW: \"showInPreview\"\n}\n\nexport const DEFAULT_DESCRIPTION_FIELD_ID = \"DEFAULT_DESCRIPTION_FIELD_ID\"\nexport const DEFAULT_DATES_FIELD_ID = \"DEFAULT_DATES_FIELD_ID\"\n\n\nexport const BASIC_DEFAULT_DESCIPTION_FIELD = {\n    _id: DEFAULT_DESCRIPTION_FIELD_ID,\n    ...LOT_EDITOR_SIDEBAR_OPTIONS.TEXT_BOX_BIG,\n    [TEMPLATE_FIELD_KEYS.FIELD_NAME]: \"description\",\n    [TEMPLATE_FIELD_KEYS.REQUIRED]: false,\n    [TEMPLATE_FIELD_KEYS.SHOW_IN_PREVIEW]: false,\n    key: 0,\n    showInPreview: true\n}\n\nexport const IGNORE_LOT_SYNC_WARNING = \"ignoreLotSyncWarning\"\n\nexport const BASIC_DEFAULT_DATES_FIELD = {\n    _id: DEFAULT_DATES_FIELD_ID,\n    ...LOT_EDITOR_SIDEBAR_OPTIONS.CALENDAR_START_END,\n    [TEMPLATE_FIELD_KEYS.FIELD_NAME]: \"dates\",\n    [TEMPLATE_FIELD_KEYS.REQUIRED]: false,\n    [TEMPLATE_FIELD_KEYS.SHOW_IN_PREVIEW]: false,\n    key: 1,\n    showInPreview: true\n}\n\nexport const EMPTY_DEFAULT_FIELDS = [\n    [BASIC_DEFAULT_DESCIPTION_FIELD],\n    [BASIC_DEFAULT_DATES_FIELD]\n]\n\n// same as EMPTY_DEFAULT_FIELDS, but creates new id for each field. Necessary for new templates to distinguish from basic template\nexport const getDefaultFields = () => {\n    return [\n        [{ ...BASIC_DEFAULT_DESCIPTION_FIELD, _id: uuidv4() }],\n        [{ ...BASIC_DEFAULT_DATES_FIELD, _id: uuidv4() }]\n    ]\n}\n\nexport const BASIC_LOT_TEMPLATE = {\n    fields: EMPTY_DEFAULT_FIELDS,\n    name: \"Basic\",\n}\n\nexport const DEFAULT_NAME_DISPLAY_NAME = \"Name\"\nexport const DEFAULT_COUNT_DISPLAY_NAME = \"Quantity\"\n\nexport const DEFAULT_DISPLAY_NAMES = {\n    name: DEFAULT_NAME_DISPLAY_NAME,\n    count: DEFAULT_COUNT_DISPLAY_NAME\n}\n\nexport const NAME_FIELD_ID = \"NAME_FIELD_ID\"\nexport const COUNT_FIELD_ID = \"COUNT_FIELD_ID\"\nexport const LOT_PRIMARY_FIELD_IDS = [NAME_FIELD_ID, COUNT_FIELD_ID]\n\n\nexport const NAME_FIELD = { fieldName: \"name\", _id: NAME_FIELD_ID, dataType: FIELD_DATA_TYPES.STRING, displayName: DEFAULT_NAME_DISPLAY_NAME, label: \"Name\" }\nexport const COUNT_FIELD = { fieldName: \"bins\", _id: COUNT_FIELD_ID, fieldPath: [\"QUEUE\", \"count\"], dataType: FIELD_DATA_TYPES.INTEGER, displayName: DEFAULT_COUNT_DISPLAY_NAME, label: \"Quantity\" }\n\n\nexport const REQUIRED_FIELDS = [NAME_FIELD, COUNT_FIELD]\n\nexport const FORM_STATUS = {\n    VALIDATION_START: 1,\n    VALIDATION_SUCCESS: 2,\n    VALIDATION_ERROR: 3,\n    CREATE_START: 4,\n    CREATE_SUCCESS: 5,\n    CREATE_ERROR: 6,\n    WAITING: 7,\n    CANCELLED: 8,\n    NOT_STARTED: 9,\n    MERGE_START: 10,\n    MERGE_SUCCESS: 11,\n    MERGE_ERROR: 12,\n}\n\n\nexport const defaultBins = {\n    \"QUEUE\": {\n        count: 0\n    },\n}\n\nexport const createBin = (binId) => {\n\treturn {\n\t\t[binId]: {\n\t\t\tcount: 0\n\t\t}\n\t}\n}\n\nexport const getDefaultBins = (initialBin) => {\n\treturn initialBin ? {\n\t\t...createBin(initialBin)\n\t} : {\n\t\t...createBin(QUEUE_BIN_ID)\n\t}\n}\n\nexport const FLAG_OPTIONS = {\n    0: {\n        color: \"#876CDD\",\n        id: 0\n    },\n    1: {\n        color: \"#6ca6dd\",\n        id: 1\n    },\n    2: {\n        color: \"#53e690\",\n        id: 2\n    },\n    3: {\n        color: \"#fff047\",\n        id: 3\n    },\n    4: {\n        color: \"#ff9e54\",\n        id: 4\n    },\n    5: {\n        color: \"#ff5454\",\n        id: 5\n    },\n}\n\nexport const SORT_DIRECTIONS = {\n    ASCENDING: {\n        color: \"#db2100\",\n        id: 0,\n        iconClassName: \"fas fa-arrow-up\"\n    },\n    DESCENDING: {\n        color: \"#1a00c2\",\n        id: 1,\n        iconClassName: \"fas fa-arrow-down\"\n    }\n}\n\nexport const LOT_FILTER_OPTIONS = {\n    name: { label: \"Name\", fieldName: 'name', primary: true, dataType: \"STRING\" },\n    lotNumber: { label: \"Lot Number\", fieldName: 'lotNumber', primary: true, dataType: \"STRING\" },\n    flags: { label: \"Flags\", fieldName: 'flags', primary: true, dataType: \"FLAGS\" },\n    processes: { label: \"Processes\", fieldName: 'process_id', primary: true, dataType: \"PROCESSES\"},\n    quantity: { label: \"Quantity\", fieldName: 'quantity', primary: true, dataType: \"INTEGER\"},\n    totalQuantity: { label: \"Total Quantity\", fieldName: 'totalQuantity', primary: true, dataType: \"INTEGER\"},\n}\n\nexport const LOT_SORT_OPTIONS = {\n    name: { label: \"Name\", fieldName: 'name', primary: true, dataType: \"STRING\" },\n    lotNumber: { label: \"Lot Number\", fieldName: 'lotNumber', primary: true, dataType: \"STRING\" },\n    flags: { label: \"Flags\", fieldName: 'flags', primary: true, dataType: \"FLAGS\" },\n    processes: { label: \"Processes\", fieldName: 'process_id', primary: true, dataType: \"PROCESSES\"},\n    quantity: { label: \"Quantity\", fieldName: 'quantity', primary: true, dataType: \"INTEGER\"},\n    totalQuantity: { label: \"Total Quantity\", fieldName: 'totalQuantity', primary: true, dataType: \"INTEGER\"},\n}\n","import { propSatisfies } from 'ramda';\nimport styled from 'styled-components'\nimport { hexToRGBA, LightenDarkenColor, RGB_Linear_Shade } from '../../../methods/utils/color_utils';\n\n\nconst buttonTheme = (props) => {\n\n    if (!props.schema) {\n        props.schema = 'default'\n    }\n\n    if (props.disabled) { // Disabled\n        return (`\n            background-color: ${props.theme.bg.tertiary};\n            color: ${props.theme.bg.senary};\n            border: none;`\n        )\n    } else if (props.secondary) { // Secondary\n        return (`\n            background-color: transparent;\n            border: 0.15rem solid ${props.theme.bg.octonary};\n            color: ${!!props.schema ? props.theme.schema[props.schema].solid : props.theme.fg.primary};\n            border-color: ${!!props.schema ? props.theme.schema[props.schema].solid : props.theme.fg.primary};\n            box-sizing: border-box;\n\n            align-content: center;\n            align-items: center;\n            justify-content: center;\n            \n            &:hover {\n                background-color: ${hexToRGBA(props.theme.bg.octonary, 0.03)}\n            }\n\n            ${props.active ? `\n                background: ${!!props.schema ? props.theme.schema[props.schema].solid : props.theme.fg.primary};\n\n                &:active {\n                    color: ${props.theme.bg.secondary};\n                }\n                `\n                : `\n                &:active {\n                    color: ${props.theme.bg.secondary};\n                    background: ${!!props.schema ? props.theme.schema[props.schema].solid : props.theme.fg.primary};\n                    border-color: transparent;\n                }`\n            }`\n        )\n        \n    } else if (props.tertiary) { // tertiary (Gradient)\n\n        return (`\n            background: ${!!props.schema ? props.theme.schema[props.schema].gradient : props.theme.fg.primary};\n            color: ${props.theme.bg.octonary};\n            border: none;\n\n            &:hover {\n                background-color: ${!!props.schema ? LightenDarkenColor(props.theme.schema[props.schema].solid, 10) : LightenDarkenColor(props.theme.fg.primary, 10)}\n            }\n             `\n        )\n\n    } else if (props.quaternary) { // quaternary\n        return (`\n            background: #26ab76;\n            color: ${props.theme.bg.octonary};\n            border: none;\n\n            &:hover {\n                background-color: ${LightenDarkenColor('#26ab76', -10)}\n            }\n             `\n        )\n    } else { // Primary\n        return (`\n            background: ${!!props.schema ? props.theme.schema[props.schema].solid : props.theme.fg.primary};\n            // color: ${props.theme.bg.octonary};\n            // color: ${props.schema === 'default' ? 'white' : props.theme.bg.octonary};\n            color: white;\n            border: none;\n\n            &:hover {\n                background-color: ${!!props.schema ? LightenDarkenColor(props.theme.schema[props.schema].solid, 10) : LightenDarkenColor(props.theme.fg.primary, 10)}\n            }\n            `)\n        \n    }\n}\n\nexport const SmallButton = styled.button`\n    display: inline-block;\n    min-height: 2rem;\n    line-height: 1.8rem;\n    text-align: center;\n    margin: 0.3rem 0.5rem 0.3rem 0.5rem;\n    user-select: none;\n\n    padding: 0 1rem 0 1rem;\n\n    font-size: ${props => props.theme.fontSize.sz3};\n    font-family: ${props => props.theme.font.primary};\n    font-weight: 500;\n\n    border-radius: 0.35rem;\n    border: none;\n\n    ${props => buttonTheme(props)}\n\n    &:focus {\n        outline: none;\n    }\n`;\n","import React from 'react';\nimport * as styled from './button.style'\n\n\nconst Button = (props) => {\n\n    const {\n      disabled,\n      onClick,\n      schema,\n      style,\n      secondary,\n      type,\n      tertiary,\n      children,\n      label,\n    } = props\n\n\n    return (\n        <styled.SmallButton\n            onClick={!disabled ? onClick : () => {return}}\n            disabled={disabled}\n            schema={schema}\n            style={style}\n            secondary={secondary}\n            tertiary={tertiary}\n            type = {type}\n            {...props} >\n\n        {children ?\n            children\n            :\n            label\n        }\n\n        </styled.SmallButton>\n    )\n};\n\nButton.defaultProps = {\n    secondary : false,\n    disabled: false,\n    type: 'button'\n};\n\nexport default Button;\n","import styled from 'styled-components'\nimport { hexToRGBA, LightenDarkenColor } from '../../../methods/utils/color_utils'\n\nexport const TextboxContainer = styled.div`\n    ${props => props.flex &&\n        `\n        display: flex;\n        flex-grow: 1`\n    }\n\n    padding: 0;\n    margin: 0;\n\n    position: relative;\n`\n\n\nexport const TextboxLabel = styled.h1`\n    font-size: ${props => props.theme.fontSize.sz2};\n    font-family: ${props => props.theme.font.primary};\n    color: ${props => props.theme.bg.octonary};\n    margin-top: .6rem;\n    margin-right: 0.5rem;\n    line-height: 1rem;\n`;\n\nexport const TextboxInput = styled.input`\n    background-color: ${props => props.theme.bg.secondary};\n    border: none;\n    font-size: ${props => props.theme.fontSize.sz4};\n    font-family: ${props => props.theme.font.primary};\n    font-weight: 500;\n    display: flex;\n    flex-grow: 1;\n    color: ${props => props.theme.bg.octonary};\n\n    box-shadow: 0 0.1rem 0.2rem 0rem rgba(0,0,0,0.1);\n    border-bottom: 2px solid ${props => props.theme.bg.secondary};\n\n    outline: 0px !important;\n\n    &:focus {\n        background-color: ${props => props.theme.bg.secondary};\n        border-bottom: 2px solid ${props => !!props.schema ? props.theme.schema[props.schema].solid : props.theme.schema.default.solid};\n        color: ${props => props.theme.bg.octonary};\n        outline: none !important;\n        box-shadow: 0 0.1rem 0.2rem 0rem rgba(0,0,0,0.1);\n    }\n    \n\n    &::placeholder {\n        font-family: ${props => props.theme.font.secondary};\n        color: ${props => props.theme.bg.senary};\n    }\n`;\n\nexport const FakeTextboxInput = styled.div`\n    background-color: ${props => props.theme.bg.secondary};\n    border: none;\n    font-size: ${props => props.theme.fontSize.sz4};\n    font-family: ${props => props.theme.font.primary};\n    font-weight: 500;\n    display: flex;\n    flex-grow: 1;\n    color: ${props => props.theme.bg.octonary};\n\n    box-shadow: 0 0.1rem 0.2rem 0rem rgba(0,0,0,0.1) !important;\n    border-bottom: 2px solid ${props => props.theme.bg.secondary};\n\n    &:focus {\n        border-bottom: 2px solid ${props => !!props.schema ? props.theme.schema[props.schema].solid : props.theme.fg.primary};\n        color: ${props => props.theme.bg.octonary};\n        outline: none !important;\n    }\n\n    &::placeholder {\n        font-family: ${props => props.theme.font.secondary};\n        color: ${props => props.theme.bg.senary};\n    }\n`;\n\nexport const TextboxArea = styled.textarea`\n    background-color: ${props => props.theme.bg.secondary};\n    border: none;\n    font-size: ${props => props.theme.fontSize.sz4};\n    font-family: ${props => props.theme.font.primary};\n    font-weight: 500;\n    display: flex;\n    flex-grow: 1;\n    color: ${props => props.theme.bg.octonary};\n\n    box-shadow: 0 0.1rem 0.2rem 0rem rgba(0,0,0,0.1) !important;\n    border-bottom: 2px solid ${props => props.theme.bg.secondary};\n\n    &:focus {\n        background-color: ${props => props.theme.bg.secondary};\n        border-bottom: 2px solid ${props => !!props.schema ? props.theme.schema[props.schema].solid : props.theme.schema.default.solid};\n        color: ${props => props.theme.bg.octonary};\n        outline: none !important;\n    }\n\n    &::placeholder {\n        font-family: ${props => props.theme.font.secondary};\n        color: ${props => props.theme.bg.senary};\n    }\n`;\n","import React, { useEffect, useRef } from 'react'\nimport * as styled from './textbox.style'\n\nexport default function Textbox(props) {\n\n    let InputComponent;\n    if (props.lines) { InputComponent = props.inputAreaComponent }\n    else { InputComponent = props.inputComponent }\n\n    const inputRef = useRef(null)\n\n    useEffect(() => {\n        if (props.focus == true) {\n            inputRef.current.focus()\n        }\n    }, [props.focus])\n\n    useEffect(() => {\n        if (props.keepFocus === true) {\n            inputRef.current.focus()\n        }\n    })\n\n    return (\n        <React.Fragment>\n            {(!props.inline && props.label) && <styled.TextboxLabel style={props.labelStyle}>{props.label}</styled.TextboxLabel>}\n            <styled.TextboxContainer className=\"form-group\" style={{ ...props.style }}>\n                {props.inline && <styled.TextboxLabel style={props.labelStyle}>{props.label}</styled.TextboxLabel>}\n                <InputComponent\n                    ref={inputRef}\n                    className={\"form-control \" + props.className}\n                    placeholder={props.placeholder}\n                    style={{...props.inputStyle}}\n                    value={props.value}\n                    onChange={props.onChange}\n                    onKeyPress={props.onKeyPress}\n                    rows={props.lines}\n                    type={props.type}\n                    defaultValue={props.defaultValue}\n                    disabled={props.disabled || !props.usable}\n                    readOnly={props.readOnly || !props.usable}\n                    schema={props.schema}\n                    onBlur={props.onBlur}\n                    onFocus={props.onFocus}\n                    style={props.inputStyle}\n                    autoFocus={props.autoFocus}\n                />\n                {props.tooltip}\n            </styled.TextboxContainer>\n        </React.Fragment>\n    )\n\n}\n\nTextbox.defaultProps = {\n    inputAreaComponent: styled.TextboxArea,\n    inputComponent: styled.TextboxInput,\n    autofocus: false,\n    flex: false,\n    usable: true,\n    inline: false,\n    labelStyle: null,\n    onBlur: () => { },\n    onFocus: () => { },\n}\n","import { hexToRGBA, RGB_Linear_Shade } from './methods/utils/color_utils';\n\nexport const size = {\n    tiny: '0px',\n    mobileS: '320px',\n    mobileM: '375px',\n    mobileL: '425px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '2560px'\n}\n\n\nconst light = {\n    primary: '#FFFFFF',  // White\n    // secondary: '#f7f7fa',\n    secondary: '#F6F7FB',\n    tertiary: '#dedfe3',\n    quaternary: '#b8b9bf',  // light light grey\n    quinary: '#79797d',   // light grey\n    senary: '#7e7e7e',    // charcoal\n    septenary: '#545454', //dark dark grey\n    octonary: '#363636',  // Black\n}\n\nexport const theme = {\n    main: {\n        bg: light,\n        fg: {\n            primary: '#2787e1',\n            secondary: '#F92644', // RM RED\n            tertiary: '',\n            quaternary: '',\n            quinary: '',\n            senary: '',\n            septenary: '',\n            octonary: '',\n            nonary: '',\n            denary: '',\n            red: '#FF4B4B',   // RM RED\n\n        },\n        textColor: '#303030',\n        error: {\n            borderColor: '#FF4B4B',\n        },\n        good: '#52B853',\n        okay: '#ffa200',\n        bad: '#FF4B4B',\n        warn: '#ffbf1f',\n        disabled: '#808080',           // light grey\n        radioButton: {\n            active: '#FF4B4B',          // RM RED\n            inactive: '#808080',        // light grey\n            hover: RGB_Linear_Shade(.2, hexToRGBA('#FF4B4B')),    // lighter RM RED\n            textColor: \"#FFFFFF\",        // white\n            fontWeight: 500,\n            borderColor: '#A8A8A8',      // light light grey\n        },\n        hoverHighlightPer: 0.4,\n        basicButton: {\n            backgroundColor: {\n                active: '#FF4B4B',             // RM RED\n                disabled: '#808080',           // light grey\n            },\n            textColor: {\n                active: \"#FFFFFF\",\n            }\n        },\n        cardShadow: '0px 0px 6px 1px rgba(0,0,0,0.1)',\n        // cardShadow: '0 1px 0 0 rgba(0,0,0,0.1)',\n        cardShadowBold: '0px 0px 8px 2px rgba(0,0,0,0.1)',\n\n\n        font: {\n            primary: 'Montserrat'\n        },\n        fontSize: {\n\n            sz6: \"0.65rem\",\n            sz5: \"0.75rem\",\n            sz4: \"0.85rem\",\n            sz3: \"1.2rem\",\n            sz2: \"1.5rem\",\n            sz7: \"2.0rem\",\n            sz1: \"2.5rem\",\n            sz8: \"1.4rem\"\n        },\n        fontWeight: {\n            bold: '700',\n            normal: '100',\n        },\n\n        // minWidth: {\n        //   tiny: `(min-width: ${size.tiny})`,\n        //   mobileS: `(min-width: ${size.mobileS})`,\n        //   mobileM: `(min-width: ${size.mobileM})`,\n        //   mobileL: `(min-width: ${size.mobileL})`,\n        //   tablet: `(min-width: ${size.tablet})`,\n        //   laptop: `(min-width: ${size.laptop})`,\n        //   laptopL: `(min-width: ${size.laptopL})`,\n        //   desktop: `(min-width: ${size.desktop})`,\n        //   desktopL: `(min-width: ${size.desktop})`\n        // },\n        widthBreakpoint: {\n            tiny: `${size.tiny}`,\n            mobileS: `${size.mobileS}`,\n            mobileM: `${size.mobileM}`,\n            mobileL: `${size.mobileL}`,\n            tablet: `${size.tablet}`,\n            laptop: `${size.laptop}`,\n            laptopL: `${size.laptopL}`,\n            desktop: `${size.desktop}`,\n            desktopL: `${size.desktop}`\n        },\n\n        schema: {\n            default: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(168, 0, 36, 0.95) 0%, rgba(217, 21, 0, 0.95) 100%)',\n                solid: '#5c6fff'\n            },\n            locations: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(92, 111, 255, 0.95) 0%, rgba(159, 91, 255, 0.95) 100%)',\n                solid: '#5c6fff'\n            },\n            dashboards: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(255, 214, 0, 0.95) 0%, rgba(255, 138, 0, 0.95) 100%)',\n                solid: '#5294ff'\n            },\n            users: {\n                solid: '#f5b33b'\n            },\n            objects: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(31, 255, 94, 0.95) 0%, rgba(0, 126, 237, 0.95) 100%)',\n                solid: '#2ed182',\n            },\n            processes: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(255, 214, 0, 0.95) 0%, rgba(255, 118, 33, 0.95) 100%)',\n                solid: '#ffbf1f'\n            },\n            fields: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(255, 214, 0, 0.95) 0%, rgba(255, 118, 33, 0.95) 100%)',\n                solid: '#ffbf1f',\n                iconName: \"fas fa-book\"\n            },\n            tasks: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(31, 255, 94, 0.95) 0%, rgba(0, 126, 237, 0.95) 100%)',\n                solid: '#2ed182',\n            },\n            routes: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(31, 255, 94, 0.95) 0%, rgba(0, 126, 237, 0.95) 100%)',\n                solid: '#2ed182',\n                iconName: \"fas fa-route\"\n            },\n            all: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(121, 217, 155, 0.95) 0%, rgba(0, 162, 132, 0.95) 100%)',\n                solid: '#1ae8a0'\n            },\n            lots: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(167, 114, 252, 0.95) 0%, rgba(251, 0, 255, 0.95) 100%)',\n                solid: '#924dff',\n                iconName: \"fas fa-play\"\n            },\n            merge: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(235, 52, 97, 0.95) 0%, rgba(235, 52, 189, 0.95) 100%)',\n                solid: '#eb3461',\n                iconName: \"fas fa-object-group\"\n            },\n            statistics: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(30, 156, 215, 0.95) 0%, rgba(0, 91, 151, 0.95) 100%)',\n                solid: '#1e9cd7'\n            },\n            kick_off: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(31, 255, 94, 0.95) 0%, rgba(0, 126, 237, 0.95) 100%)',\n                solid: '#1fed89',\n                iconName: \"fas fa-play\"\n            },\n            finish: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(197, 155, 255) 0%, rgba(173, 115, 255, 0.95) 100%)',\n                solid: '#fc5e03',\n                iconName: \"fas fa-flag-checkered\"\n            },\n            error: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(168, 0, 36, 0.95) 0%, rgba(217, 21, 0, 0.95) 100%)',\n                solid: '#FF4B4B'\n            },\n            ok: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(31, 255, 94, 0.95) 0%, rgba(0, 126, 237, 0.95) 100%)',\n                solid: '#2ed182',\n            },\n            operations: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(121, 217, 155, 0.95) 0%, rgba(0, 162, 132, 0.95) 100%)',\n                solid: '#e81a69',\n                iconName: \"fas fa-sticky-note\"\n            },\n            report: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(121, 217, 155, 0.95) 0%, rgba(0, 162, 132, 0.95) 100%)',\n                solid: '#e8321a',\n                iconName: \"fas fa-exclamation-triangle\"\n            },\n            devices: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(255, 75, 75, 0.95) 0%, rgba(255, 61, 61, 0.95) 100%)',\n                solid: '#e36868'\n            },\n            scheduler: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(30, 156, 215, 0.95) 0%, rgba(0, 91, 151, 0.95) 100%)',\n                solid: '#1e9cd7'\n            },\n            taskQueue: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(197, 155, 255) 0%, rgba(173, 115, 255, 0.95) 100%)',\n                solid: '#c59bff',\n                iconName: 'fa fa-tasks',\n            },\n            settings: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(197, 155, 255) 0%, rgba(173, 115, 255, 0.95) 100%)',\n                solid: '#ff6e61'\n            },\n            delete: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(255, 75, 75, 0.95) 0%, rgba(255, 61, 61, 0.95) 100%)',\n                solid: '#ff4545'\n            },\n\n            warehouse: {\n                gradient: 'radial-gradient(171.57% 115.09% at 100% 0%, rgba(92, 111, 255, 0.95) 0%, rgba(159, 91, 255, 0.95) 100%)',\n                solid: '#85b6ff',\n                iconName: 'fas fa-box',\n            },\n        }\n    },\n    funky: {\n\n    },\n\n\n\n};\n\n\nexport default theme;\n","import { useState, useEffect } from 'react';\n\n// Usage\n// function App() {\n//   const size = useWindowSize();\n\n//   return (\n//     <div>\n//       {size.width}px / {size.height}px\n//     </div>\n//   );\n// }\n\n// Hook\nfunction useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    // let windowSize = {\n    //     width: undefined,\n    //     height: undefined,\n    // }\n\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n\n            // windowSize = {\n            //     width: window.innerWidth,\n            //     height: window.innerHeight,\n            // }\n        }\n\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize, {passive:true});\n\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n\n    return windowSize;\n}\n\nexport default useWindowSize\n","import axios from 'axios';\n\nimport { apiIPAddress } from '../settings/settings'\nimport store from '../redux/store'\nimport { getHeaders, handleError } from './helpers'\n\nconst operator = 'cards/templates'\n\nexport async function getLotTemplate(id) {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + operator + \"/\" + id,\n            headers: getHeaders()\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n}\n\nexport async function getLotTemplates() {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + `site_maps/${currMapId}/${operator}`,\n            headers: getHeaders()\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n}\n\nexport async function deleteLotTemplate(ID) {\n    try {\n        const response = await axios({\n            method: 'DELETE',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders()\n        });\n\n        // Success 🎉\n        // log.debug('response',response);\n        // const data = response.data;\n        // const dataJson = JSON.parse(data)\n        return response;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function postLotTemplate(lotTemplate) {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        lotTemplate.map_id = currMapId\n\n        const response = await axios({\n            method: 'POST',\n            url: apiIPAddress() + operator,\n            headers: getHeaders(),\n            data: lotTemplate\n        });\n\n        // Success 🎉\n        // log.debug('response',response);\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        // log.debug('response data json',dataJson);\n\n\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function putLotTemplate(lotTemplate, ID) {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        lotTemplate.map_id = currMapId\n\n        const response = await axios({\n            method: 'PUT',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders(),\n            data: JSON.stringify(lotTemplate)\n        });\n\n        // Success 🎉\n        // log.debug('response',response);\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n","import { normalize } from 'normalizr';\n\n// import types\nimport {\n    GET,\n    POST,\n    DELETE,\n    PUT, SET\n} from '../types/prefixes';\n\nimport {\n   LOT_TEMPLATES,\n    LOT_TEMPLATE\n} from '../types/data_types';\n\nimport { api_action } from './index';\nimport * as api from '../../api/lot_templates'\n\n// import schema\nimport { scheduleSchema, schedulesSchema } from '../../normalizr/schedules_schema';\n\nimport log from \"../../logger\"\nimport {convertArrayToObject} from \"../../methods/utils/utils\";\nimport {SELECTED} from \"../types/suffixes\";\n\nconst logger = log.getLogger(\"Cards\", \"Redux\")\nlogger.setLevel(\"debug\")\n// get\n// ******************************\nexport const getLotTemplate = (id) =>  async (dispatch) => {\n\n    /*\n        Invoked in api_action()\n        Whatever is returned from this function is the payload\n        that will be dispatched to redux (if successful)\n    */\n    const callback = async () => {\n\n        // make request\n        const lotTemplate = await api.getLotTemplate(id);\n\n        // return payload for redux\n        return {\n            lotTemplate,\n        };\n    }\n\n    const actionName = GET + LOT_TEMPLATE;\n\n    // payload is returned back\n    const payload = await api_action(actionName, callback, dispatch, {id});\n\n    return payload;\n\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// get\n// ******************************\nexport const getLotTemplates = () =>  async (dispatch) => {\n\n    /*\n        Invoked in api_action()\n        Whatever is returned from this function is the payload\n        that will be dispatched to redux (if successful)\n    */\n    const callback = async () => {\n\n        // make request\n        const lotTemplates = await api.getLotTemplates();\n\n        const lotTemplatesObj = convertArrayToObject(lotTemplates, \"_id\")\n\n        // return payload for redux\n        return {\n            lotTemplates: lotTemplatesObj,\n        };\n    }\n\n    const actionName = GET + LOT_TEMPLATES;\n\n    // payload is returned back\n    const payload = await api_action(actionName, callback, dispatch);\n\n    return payload;\n\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n// create\n// ******************************\nexport const postLotTemplate = (lotTemplate) =>  async dispatch => {\n\n    const callback = async () => {\n        const createdLotTemplate = await api.postLotTemplate(lotTemplate);\n\n        return {\n            lotTemplate: createdLotTemplate,\n        };\n    }\n    //\n    const actionName = POST + LOT_TEMPLATE;\n\n    const payload = await api_action(actionName, callback, dispatch, {lotTemplate});\n\n    return payload\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// delete\n// ******************************\nexport const deleteLotTemplate = (id) => async (dispatch) => {\n\n    const callback = async () => {\n        await api.deleteLotTemplate(id);\n\n        return {\n            id\n        };\n    }\n    //\n    const actionName = DELETE + LOT_TEMPLATE;\n    const payload = await api_action(actionName, callback, dispatch, {id});\n    return payload;\n\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// update\n// ******************************\nexport const putLotTemplate = (lotTemplate, id) => async dispatch => {\n    const callback = async () => {\n        const response = await api.putLotTemplate(lotTemplate, id);\n        return {\n            lotTemplate: response,\n        };\n    }\n\n    const actionName = PUT + LOT_TEMPLATE;\n    const payload = await api_action(actionName, callback, dispatch, {lotTemplate, id});\n    return payload;\n};\n\n// selected\n// ******************************\nexport const setSelectedLotTemplate = (lotTemplateId) => async dispatch => {\n     dispatch({ type: SET + LOT_TEMPLATE + SELECTED, payload: lotTemplateId })\n};\n\nexport const setLotTemplateAttributes = (id, attr) => async dispatch => {\n    dispatch({ type: 'SET_LOT_TEMPLATE_ATTRIBUTES', payload: { id, attr } })\n}","import axios from 'axios';\n\nimport { apiIPAddress } from '../settings/settings'\nimport { getHeaders, handleError } from './helpers';\n\nconst operator = 'settings'\n\n\nexport async function getSettings() {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + operator,\n            headers: getHeaders(),\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n    } catch (error) {\n        handleError(error);\n    }\n\n}\n\nexport async function postSettings(settings) {\n    try {\n        const response = await axios({\n            method: 'POST',\n            url: apiIPAddress() + operator,\n            headers: getHeaders(),\n            data: settings\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n","import {\n    GET_SETTINGS,\n    GET_SETTINGS_STARTED,\n    GET_SETTINGS_SUCCESS,\n    GET_SETTINGS_FAILURE,\n\n    POST_SETTINGS,\n    POST_SETTINGS_STARTED,\n    POST_SETTINGS_SUCCESS,\n    POST_SETTINGS_FAILURE,\n    DEVICE_ENABLED,\n} from '../types/setting_types'\n\nimport * as api from '../../api/settings_api'\n\nexport const getSettings = () => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: GET_SETTINGS_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: GET_SETTINGS_SUCCESS, payload: response });\n\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: GET_SETTINGS_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            const settings = await api.getSettings();\n\n            // Uncomment when you want to make SETTINGS an object\n            // const normalizedSETTINGS = normalize(SETTINGS, SETTINGSSchema);\n\n            // return onSuccess(normalizedSETTINGS.entities.SETTINGS)\n\n            return onSuccess(settings)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\nexport const postSettings = (settings) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: POST_SETTINGS_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: POST_SETTINGS_SUCCESS, payload: settings });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: POST_SETTINGS_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            delete settings._id\n            const newSettings = await api.postSettings(settings);\n            return onSuccess(newSettings)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n\nexport const deviceEnabled = (state) => {\n    return { type: DEVICE_ENABLED, payload: state}\n}\n","export const SORT_MODES = {\n\tSTART_ASCENDING: \"START_ASCENDING\",\n\tSTART_DESCENDING: \"START_DESCENDING\",\n\tEND_ASCENDING: \"END_ASCENDING\",\n\tEND_DESCENDING: \"END_DESCENDING\",\n\tNAME_ASCENDING: \"NAME_ASCENDING\",\n\tNAME_DESCENDING: \"NAME_DESCENDING\",\n\tQUANTITY_ASCENDING: \"QUANTITY_ASCENDING\",\n\tQUANTITY_DESCENDING: \"QUANTITY_DESCENDING\"\n}\n\nexport const SORT_OPTIONS = [\n\t{description: \"Name (a-z)\", sortMode: SORT_MODES.NAME_ASCENDING},\n\t{description: \"Name (z-a)\", sortMode: SORT_MODES.NAME_DESCENDING},\n\t{description: \"Quantity (Increasing)\", sortMode: SORT_MODES.QUANTITY_ASCENDING},\n\t{description: \"Quantity (Decreasing)\", sortMode: SORT_MODES.QUANTITY_DESCENDING},\n\t{description: \"Start Date (Ascending)\", sortMode: SORT_MODES.START_ASCENDING},\n\t{description: \"Start Date (Descending)\", sortMode: SORT_MODES.START_DESCENDING},\n\t{description: \"End Date (Descending)\", sortMode: SORT_MODES.END_DESCENDING},\n\t{description: \"End Date (Ascending)\", sortMode: SORT_MODES.END_ASCENDING}\n]","import axios from 'axios';\n\nimport {apiIPAddress} from '../settings/settings';\nimport { getHeaders, handleError } from './helpers';\n\n\nconst operator = 'site_maps';\n\nexport async function getMaps() {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: apiIPAddress() + operator,\n      headers: getHeaders()\n    });\n\n    // Success 🎉\n    const data = response.data;\n    const dataJson = JSON.parse(data);\n    return dataJson;\n\n\n} catch (error) {\n  handleError(error);\n}\n\n\n}\n\nexport async function getMap(map_id) {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: apiIPAddress() + operator + '/' + map_id,\n      headers: {\n        'Accept': 'application/json',\n        'X-API-Key': '123456',\n      },\n  });\n\n  // Success 🎉\n  const data = response.data;\n  const dataJson = JSON.parse(data)\n  return dataJson;\n\n\n  } catch (error) {\n    handleError(error);\n  }\n}\n","import {\n    GET_MAPS,\n    GET_MAPS_STARTED,\n    GET_MAPS_SUCCESS,\n    GET_MAPS_FAILURE,\n\n    GET_MAP,\n    GET_MAP_STARTED,\n    GET_MAP_SUCCESS,\n    GET_MAP_FAILURE,\n\n    SET_MAP_ATTRIBUTES,\n    SET_CURRENT_MAP,\n    SET_MAP_ZOOM\n} from '../types/map_types'\n\n\nimport * as api from '../../api/map_api'\n\n// get all maps\n// ******************************\nexport const getMaps = () => {\n  return async dispatch => {\n\n    function onStart() {\n      dispatch({ type: GET_MAPS_STARTED });\n    }\n    function onSuccess(response) {\n      dispatch({ type: GET_MAPS_SUCCESS, payload: response });\n      return response;\n    }\n    function onError(error) {\n      dispatch({ type: GET_MAPS_FAILURE, payload: error });\n      return error;\n    }\n\n    try {\n      onStart();\n      const maps = await api.getMaps();\n      return onSuccess(maps);\n    } catch (error) {\n      return onError(error);\n    }\n  };\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// get map details\n// ******************************\nexport const getMap = (map_id) => {\n    return async dispatch => {\n\n      function onStart() {\n        dispatch({ type: GET_MAP_STARTED });\n      }\n      function onSuccess(response) {\n        dispatch({ type: GET_MAP_SUCCESS, payload: response });\n        return response;\n      }\n      function onError(error) {\n        dispatch({ type: GET_MAP_FAILURE, payload: error });\n        return error;\n      }\n\n      try {\n        onStart();\n        const map = await api.getMap(map_id);\n        return onSuccess(map);\n      } catch (error) {\n        return onError(error);\n      }\n    };\n  };\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// update map details\n// ******************************\n\nexport const setMapAttributes = (attr) => {\n    return dispatch => {\n      try {\n        dispatch({ type: SET_MAP_ATTRIBUTES, payload: {attr: attr}})\n        return true\n      } catch (error) {\n        return error\n      }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// update map details\n// ******************************\n\nexport const setCurrentMap = (map) => {\n    return dispatch => {\n        try {\n            dispatch({ type: SET_CURRENT_MAP, payload: map})\n            return true\n        } catch (error) {\n            return error\n        }\n    }\n}\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n","import styled, {css} from \"styled-components\";\n\nconst usableCss = css`\n  &:hover {\n    cursor: pointer !important;\n    filter: brightness(105%);\n  }\n`\n\nconst notUsableCss = css`\n  &:hover {\n    cursor: default;\n  }\n`\n\nexport const DateItem = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: ${props => props.theme.bg.primary};\n\tborder-radius: 0.2rem;\n  width: fit-content;\n  position: relative;\n  min-width: 10rem;\n\n  padding: .5rem 1rem;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  ${props => props.usable ? usableCss : notUsableCss};\n`\n\nexport const DateText = styled.span`\n\n`\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as styled from './calendar_placeholder_button.style'\n\nconst CalendarPlaceholderButton = (props) => {\n\n\tconst {\n\t\tusable,\n\t\tonClick,\n\t\tlabel,\n\t\tcontainerStyle\n\t} = props\n\n\treturn (\n\t\t<styled.DateItem\n\t\t\tusable={usable}\n\t\t\tonClick={onClick}\n\t\t\tstyle={containerStyle}\n\t\t>\n\t\t\t<styled.DateText>{label}</styled.DateText>\n\t\t</styled.DateItem>\n\t);\n};\n\nCalendarPlaceholderButton.propTypes = {\n\tusable: PropTypes.bool,\n\tlabel: PropTypes.string,\n\tonClick: PropTypes.func,\n};\n\nCalendarPlaceholderButton.defaultProps = {\n\tusable: true,\n\tlabel: \"\",\n\tonClick: () => {},\n};\n\nexport default CalendarPlaceholderButton;\n","export const GET_PROCESSES = 'GET_PROCESSES'\nexport const GET_PROCESSES_STARTED = 'GET_PROCESSES_STARTED'\nexport const GET_PROCESSES_SUCCESS = 'GET_PROCESSES_SUCCESS'\nexport const GET_PROCESSES_FAILURE = 'GET_PROCESSES_FAILURE'\n\nexport const POST_PROCESSES = 'POST_PROCESSES'\nexport const POST_PROCESSES_STARTED = 'POST_PROCESSES_STARTED'\nexport const POST_PROCESSES_SUCCESS = 'POST_PROCESSES_SUCCESS'\nexport const POST_PROCESSES_FAILURE = 'POST_PROCESSES_FAILURE'\n\nexport const PUT_PROCESSES = 'PUT_PROCESSES'\nexport const PUT_PROCESSES_STARTED = 'PUT_PROCESSES_STARTED'\nexport const PUT_PROCESSES_SUCCESS = 'PUT_PROCESSES_SUCCESS'\nexport const PUT_PROCESSES_FAILURE = 'PUT_PROCESSES_FAILURE'\n\nexport const DELETE_PROCESSES = 'DELETE_PROCESSES'\nexport const DELETE_PROCESSES_STARTED = 'DELETE_PROCESSES_STARTED'\nexport const DELETE_PROCESSES_SUCCESS = 'DELETE_PROCESSES_SUCCESS'\nexport const DELETE_PROCESSES_FAILURE = 'DELETE_PROCESSES_FAILURE'\nexport const EDITING_PROCESS = 'EDITING_PROCESS'\nexport const SET_EDITING_VALUES = 'SET_EDITING_VALUES'\n","export const GET_LOGGERS = 'GET_LOGGERS'\nexport const GET_LOGGERS_STARTED = 'GET_LOGGERS_STARTED'\nexport const GET_LOGGERS_SUCCESS = 'GET_LOGGERS_SUCCESS'\nexport const GET_LOGGERS_FAILURE = 'GET_LOGGERS_FAILURE'\n\nexport const POST_LOGGERS = 'POST_LOGGERS'\nexport const POST_LOGGERS_STARTED = 'POST_LOGGERS_STARTED'\nexport const POST_LOGGERS_SUCCESS = 'POST_LOGGERS_SUCCESS'\nexport const POST_LOGGERS_FAILURE = 'POST_LOGGERS_FAILURE'\n\nexport const PUT_LOGGERS = 'PUT_LOGGERS'\nexport const PUT_LOGGERS_STARTED = 'PUT_LOGGERS_STARTED'\nexport const PUT_LOGGERS_SUCCESS = 'PUT_LOGGERS_SUCCESS'\nexport const PUT_LOGGERS_FAILURE = 'PUT_LOGGERS_FAILURE'\n\nexport const DELETE_LOGGERS = 'DELETE_LOGGERS'\nexport const DELETE_LOGGERS_STARTED = 'DELETE_LOGGERS_STARTED'\nexport const DELETE_LOGGERS_SUCCESS = 'DELETE_LOGGERS_SUCCESS'\nexport const DELETE_LOGGERS_FAILURE = 'DELETE_LOGGERS_FAILURE'\n\nexport const GET_LOCAL_SETTINGS = 'GET_LOCAL_SETTINGS'\nexport const GET_LOCAL_SETTINGS_STARTED = 'GET_LOCAL_SETTINGS_STARTED'\nexport const GET_LOCAL_SETTINGS_SUCCESS = 'GET_LOCAL_SETTINGS_SUCCESS'\nexport const GET_LOCAL_SETTINGS_FAILURE = 'GET_LOCAL_SETTINGS_FAILURE'\n\nexport const POST_LOCAL_SETTINGS = 'POST_LOCAL_SETTINGS'\nexport const POST_LOCAL_SETTINGS_STARTED = 'POST_LOCAL_SETTINGS_STARTED'\nexport const POST_LOCAL_SETTINGS_SUCCESS = 'POST_LOCAL_SETTINGS_SUCCESS'\nexport const POST_LOCAL_SETTINGS_FAILURE = 'POST_LOCAL_SETTINGS_FAILURE'\n\nexport const STOP_API_CALLS = 'STOP_API_CALLS'\n","import { denormalize, schema } from 'normalizr';\nimport { uuidv4 } from '../methods/utils/utils';\n\n// schedule schema\nexport const scheduleSchema = new schema.Entity(\n  // key\n  'schedules',\n  // definition\n  {\n    //condition: conditionSchema\n  },\n  // options\n  {\n    idAttribute: (value, parent, key) => {\n      return value._id.$oid\n    },\n\n    // processStrategy\n    processStrategy: (value, parent, key) => {\n      return {\n        _id: {\n          $oid: value._id.$oid ? value._id.$oid : null\n        },\n        id: value._id.$oid ? value._id.$oid : null,\n        name: value.name ? value.name : '',\n\n        days_on: value.days_on ? value.days_on : {\n          friday: false,\n          monday: false,\n          saturday: false,\n          sunday: false,\n          thursday: false,\n          tuesday: false,\n          wednesday: false\n        },\n\n        interval_on:  value.interval_on ? value.interval_on : false,\n        time_interval: value.time_interval ? value.time_interval : null,\n        map_id: value.map_id ? value.map_id : null,\n\n        schedule_on: value.schedule_on ? value.schedule_on : false,\n        start_time: value.start_time ? value.start_time : null,\n\n        stop_time_on: value.stop_time_on ? value.stop_time_on : false,\n        stop_time: value.stop_time ? value.stop_time : null,\n\n        task_id: value.task_id ? value.task_id : null,\n      };\n    }\n  },\n\n);\n\n// schema for list of schedules\nexport const schedulesSchema = [scheduleSchema]\n","export const GET_DASHBOARDS = 'GET_DASHBOARDS'\nexport const GET_DASHBOARDS_STARTED = 'GET_DASHBOARDS_STARTED'\nexport const GET_DASHBOARDS_SUCCESS = 'GET_DASHBOARDS_SUCCESS'\nexport const GET_DASHBOARDS_FAILURE = 'GET_DASHBOARDS_FAILURE'\n\nexport const POST_DASHBOARD = 'POST_DASHBOARD'\nexport const POST_DASHBOARD_STARTED = 'POST_DASHBOARD_STARTED'\nexport const POST_DASHBOARD_SUCCESS = 'POST_DASHBOARD_SUCCESS'\nexport const POST_DASHBOARD_FAILURE = 'POST_DASHBOARD_FAILURE'\n\nexport const PUT_DASHBOARD = 'PUT_DASHBOARD'\nexport const PUT_DASHBOARD_STARTED = 'PUT_DASHBOARD_STARTED'\nexport const PUT_DASHBOARD_SUCCESS = 'PUT_DASHBOARD_SUCCESS'\nexport const PUT_DASHBOARD_FAILURE = 'PUT_DASHBOARD_FAILURE'\n\nexport const DELETE_DASHBOARD = 'DELETE_DASHBOARD'\nexport const DELETE_DASHBOARD_STARTED = 'DELETE_DASHBOARD_STARTED'\nexport const DELETE_DASHBOARD_SUCCESS = 'DELETE_DASHBOARD_SUCCESS'\nexport const DELETE_DASHBOARD_FAILURE = 'DELETE_DASHBOARD_FAILURE'\n\nexport const DASHBOARD_OPEN = 'DASHBOARD_OPEN'","import { SORT_MODES } from \"../../constants/common_contants\";\nimport { convertCardDate } from \"./card_utils\";\nimport { deepCopy } from \"./utils\";\n\n\nexport const isArray = (arr) => {\n    return ((typeof arr !== 'undefined') && Array.isArray(arr))\n}\n\nexport const removeArrayIndices = (arr, indices) => {\n    let arrCopy = [...arr]\n\n    for (var i = indices.length - 1; i >= 0; i--)\n        arrCopy.splice(indices[i], 1);\n\n    return arrCopy\n}\n\nfunction arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length !== b.length) return false;\n\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nexport const isNonEmptyArray = (arr) => {\n    return isArray(arr) && arr.length > 0\n}\n\nexport const immutableInsert = (arr, ele, index) => {\n    return [...arr.slice(0, index), ele, ...arr.slice(index, arr.length)]\n}\n\nexport const immutableDelete = (arr, index) => {\n    return [...arr.slice(0, index), ...arr.slice(index + 1, arr.length)]\n}\n\nexport const immutableReplace = (arr, ele, index) => {\n    return [...arr.slice(0, index), ele, ...arr.slice(index + 1, arr.length)]\n}\n\nexport const immutableSet = (arr, ele, index) => {\n    let arrCopy = [...arr]\n    for(let i = 0; i < index; i++) {\n        if(!arrCopy[i]) arrCopy[i] = null\n    }\n    arrCopy[index] = ele\n\n    return arrCopy\n}\n","export const daysOfTheWeek = {\n    0: 'monday',\n    1: 'tuesday',\n    2: 'wednesday',\n    3: 'thursday',\n    4: 'friday',\n    5: 'saturday',\n    6: 'sunday'\n}\n\nexport const TEMP_NEW_SCHEDULE_ID = \"TEMP_NEW_SCHEDULE_ID\"\nexport const DEFAULT_TASK_ID = \"DEFAULT_TASK_ID\"\n\nexport const FORM_MODES = {\n    CREATE: \"CREATE\",\n    UPDATE: \"UPDATE\"\n}\n\nexport const deviceSchedule = {\n    id: null,\n    enabled: false,\n    name: null,\n    position: null,\n    days_on: [],\n    time: '12:00',\n}","export const GET_MAPS = 'GET_MAPS'\nexport const GET_MAPS_STARTED = 'GET_MAPS_STARTED'\nexport const GET_MAPS_SUCCESS = 'GET_MAPS_SUCCESS'\nexport const GET_MAPS_FAILURE = 'GET_MAPS_FAILURE'\n\nexport const GET_MAP = 'GET_MAP'\nexport const GET_MAP_STARTED = 'GET_MAP_STARTED'\nexport const GET_MAP_SUCCESS = 'GET_MAP_SUCCESS'\nexport const GET_MAP_FAILURE = 'GET_MAP_FAILURE'\n\nexport const SET_MAP_ATTRIBUTES = 'SET_MAP_ATTRIBUTES'\nexport const SET_CURRENT_MAP = 'SET_CURRENT_MAP'\n","export const GET_SETTINGS = 'GET_SETTINGS'\nexport const GET_SETTINGS_STARTED = 'GET_SETTINGS_STARTED'\nexport const GET_SETTINGS_SUCCESS = 'GET_SETTINGS_SUCCESS'\nexport const GET_SETTINGS_FAILURE = 'GET_SETTINGS_FAILURE'\n\nexport const POST_SETTINGS = 'POST_SETTINGS'\nexport const POST_SETTINGS_STARTED = 'POST_SETTINGS_STARTED'\nexport const POST_SETTINGS_SUCCESS = 'POST_SETTINGS_SUCCESS'\nexport const POST_SETTINGS_FAILURE = 'POST_SETTINGS_FAILURE'\n\nexport const PUT_SETTINGS = 'PUT_SETTINGS'\nexport const PUT_SETTINGS_STARTED = 'PUT_SETTINGS_STARTED'\nexport const PUT_SETTINGS_SUCCESS = 'PUT_SETTINGS_SUCCESS'\nexport const PUT_SETTINGS_FAILURE = 'PUT_SETTINGS_FAILURE'\n\nexport const DELETE_SETTINGS = 'DELETE_SETTINGS'\nexport const DELETE_SETTINGS_STARTED = 'DELETE_SETTINGS_STARTED'\nexport const DELETE_SETTINGS_SUCCESS = 'DELETE_SETTINGS_SUCCESS'\nexport const DELETE_SETTINGS_FAILURE = 'DELETE_SETTINGS_FAILURE'\n\nexport const POST_TASK_QUEUE = 'POST_TASK_QUEUE'\nexport const POST_TASK_QUEUE_STARTED = 'POST_TASK_QUEUE_STARTED'\nexport const POST_TASK_QUEUE_SUCCESS = 'POST_TASK_QUEUE_SUCCESS'\nexport const POST_TASK_QUEUE_FAILURE = 'POST_TASK_QUEUE_FAILURE'\nexport const DEVICE_ENABLED = 'DEVICE_ENABLED'\n","/**\n *  Goes through all the tasks and finds any tasks that belong to that location.\n *  It then sees if that task belongs to that location either as load or unload task.\n *  Then adds the key: taskID and value: object ID to be used for the object builder\n * */ \nexport const handleParseTaskBasedOnLoadUnload = (tasks, stationID) => {\n\n    let parsedTasks = { load: {}, unload: {} }\n\n    Object.values(tasks).forEach(task => {\n\n        // If station is load\n        if (task.load.station == stationID) {\n            parsedTasks.load = {\n                ...parsedTasks.load,\n                [task._id]: task.obj\n            }\n\n            // If station is unload\n        } else if (task.unload.station == stationID) {\n            parsedTasks.unload = {\n                ...parsedTasks.unload,\n                [task._id]: task.obj\n            }\n        }\n    })\n    return parsedTasks\n}\n\nexport const isEmpty = (obj) => {\n    for(var prop in obj) {\n        if(obj.hasOwnProperty(prop)) {\n            return false;\n        }\n    }\n\n    return JSON.stringify(obj) === JSON.stringify({});\n}\n\nexport const isObject = (item) => {\n    return ((typeof item === 'object') && (item !== null))\n}\n\nexport const pathStringToObject = (path, delimitter, value) => {\n    const pathItems = path.split(delimitter)\n\n    let obj = {\n        [pathItems[pathItems.length - 1]]: value\n    }\n    for(let i = pathItems.length - 2; i >= 0; i--) {\n        obj = {\n            [pathItems[i]]: {...obj}\n        }\n    }\n\n    return obj\n}","import uuid from 'uuid'\nimport {DEVICE_CONSTANTS} from \"../../constants/device_constants\";\nimport  store  from \"../../redux/store/index\";\nimport {defaultTask} from \"../../constants/route_constants\";\nimport {isArray} from \"./array_utils\";\nimport {useSelector} from \"react-redux\";\n\n/**\n * Creates a default route based on store state\n */\nexport const generateDefaultRoute = (processId) => {\n    return {\n        ...defaultTask,\n        processId,\n        _id: uuid.v4(), // NOTE - ID IS GENERATED HERE INSTEAD OF IN defaultTask SO THE ID IS GENERATED EACH TIME THE FUNCTION IS CALLED\n    }\n}\n\nexport const autoGenerateRoute = (obj) => {\n    const storeState = store.getState()\n    const MiRMapEnabled = storeState.localReducer.localSettings.MiRMapEnabled\n    const currentMapId = storeState.localReducer.localSettings.currentMapId\n    const routeConfirmationLocation = storeState.tasksReducer.routeConfirmationLocation\n\n    const positions = storeState.positionsReducer.positions\n\n    return {\n        ...defaultTask,\n        device_types: !!MiRMapEnabled ? [DEVICE_CONSTANTS.MIR_100, DEVICE_CONSTANTS.HUMAN] : [DEVICE_CONSTANTS.HUMAN],\n        handoff: true,\n        map_id: currentMapId,\n        load: {...defaultTask.load,\n               station: !!positions[routeConfirmationLocation] ? positions[routeConfirmationLocation].parent : routeConfirmationLocation,\n               position: routeConfirmationLocation,\n              },\n        unload: {...defaultTask.unload},\n        obj: obj ? obj : null,\n        _id: uuid.v4(), // NOTE - ID IS GENERATED HERE INSTEAD OF IN defaultTask SO THE ID IS GENERATED EACH TIME THE FUNCTION IS CALLED\n    }\n}\n\nexport const isHumanTask = (task) => {\n    return task && isArray(task.device_types) && task.device_types.includes(DEVICE_CONSTANTS.HUMAN)\n}\n\nexport const buildDefaultRouteName = (nameA, nameB) => {\n    if(!nameA) return \"\"\n    return nameA + \" => \" + nameB\n}\n\n/*\n* Returns true if task ONLY supports human device (and no other types), and false otherwise\n* */\nexport const isOnlyHumanTask = (task) => {\n    var containsHuman = false\n    var containsNonHuman = false\n    if(task && isArray(task.device_types)) {\n        task.device_types.forEach((currType) => {\n            if( currType === DEVICE_CONSTANTS.HUMAN ) containsHuman = true\n            if( currType !== DEVICE_CONSTANTS.HUMAN )  containsNonHuman = true\n        })\n    }\n\n\n    return !containsNonHuman && containsHuman\n}\n\nexport const isMiRandHumanTask = (task) => {\n    return task && isArray(task.device_types) && task.device_types.includes(DEVICE_CONSTANTS.MIR_100) && task.device_types.includes(DEVICE_CONSTANTS.HUMAN)\n}\n\n\nexport const isMiRTask = (task) => {\n    return task && isArray(task.device_types) && task.device_types.includes(DEVICE_CONSTANTS.MIR_100)\n}\n\nexport const getRouteProcesses = (routeId) => {\n    const storeState = store.getState()\n    const processes = storeState.processesReducer.processes\n\n    return Object.values(processes).filter((currProcess, currIndex) => {\n        if(currProcess.routes.includes(routeId)) return true\n    })\n}\n\nexport const isNextRouteViable = (currentRoute, nextRoute) => {\n    const currentUnloadStationId = getUnloadStationId(currentRoute)\n    const nextLoadStationId = getLoadStationId(nextRoute)\n\n    if (currentUnloadStationId === nextLoadStationId) {\n        return true\n    }\n}\n\nexport const getUnloadStationId = (route) => {\n    return route?.unload\n}\n\nexport const getUnloadPositionId = (route) => {\n    return route?.unload\n}\n\nexport const getLoadStationId = (route) => {\n    return route?.load\n}\n\nexport const getLoadPositionId = (route) => {\n    return route?.load\n}\n\nexport const getRouteStart = (route) => {\n    let hasStart = getLoadStationId(route)\n    if(!hasStart) hasStart = getLoadPositionId(route)\n\n    return hasStart\n}\n\nexport const getRouteEnd = (route) => {\n    let hasEnd = getUnloadStationId(route)\n    if(!hasEnd) hasEnd = getUnloadPositionId(route)\n\n    return hasEnd\n}\n\nexport const getHasStartAndEnd = (route) => {\n    return getRouteEnd(route) && getRouteStart(route)\n}\n\nexport const isStationLoadStation = (route, stationId) => {\n    return stationId === getLoadStationId(route)\n}\n\n\n\nexport const isStationUnloadStation = (route, stationId) => {\n    return stationId === getUnloadStationId(route)\n}\n\nexport const isPositionAtLoadStation = (route, positionId) => {\n    const storeState = store.getState()\n    const stations = storeState.stationsReducer.stations || {}\n\n    // get load station\n    const loadStationId = getLoadStationId(route)\n    const loadStation = stations[loadStationId] || { children: [] }\n\n\n    // if loadStation's children includes positionId, return true\n    if (loadStation.children.includes(positionId)) return true\n\n    // otherwise return false\n    return false\n}\n\nexport const isPositionAtUnloadStation = (route, positionId) => {\n    const storeState = store.getState()\n    const stations = storeState.stationsReducer.stations || {}\n\n    // get load station\n    const unloadStationId = getUnloadStationId(route)\n    const unloadStation = stations[unloadStationId] || { children: [] }\n\n\n    // if loadStation's children includes positionId, return true\n    if (unloadStation.children.includes(positionId)) return true\n\n    // otherwise return false\n    return false\n\n}\n\nexport const isPositionInRoutes = (routes, positionId) => {\n    const storeState = store.getState()\n    const stations = storeState.stationsReducer.stations || {}\n\n    for(const currRoute of routes) {\n\n        const {\n            load,\n            unload\n        } = currRoute || {}\n\n        const {\n            station: loadStationId\n        } = load || {}\n        const loadStation = stations[loadStationId] || { children: [] }\n        if(loadStation.children.includes(positionId)) return true   // found station with position as child, return true\n\n        const {\n            station: unloadStationId\n        } = unload || {}\n        const unloadStation = stations[unloadStationId] || { children: [] }\n        if(unloadStation.children.includes(positionId)) return true // found station with position as child, return true\n    }\n\n    return false // none of the station's contained the position\n}\n\nexport const getLoadStationDashboard = (route) => {\n    const storeState = store.getState()\n    const stations = storeState.stationsReducer.stations || {}\n\n    const loadStationId = getLoadStationId(route)\n\n    const station = stations[loadStationId] || {}\n\n    const dashboards = isArray(station.dashboards) ?  station.dashboards : [null]\n\n    return dashboards[0]\n}\n\nexport const getRouteIndexInRoutes = (processRouteIds, routeId) => {\n    return processRouteIds.indexOf(routeId)\n}\n\nexport const isStationInRoutes = (routes, stationId) => {\n    let containsStation = false\n\n    for(const currRoute of routes) {\n        if(containsStation) return containsStation\n\n            const {\n                start,\n                end\n            } = currRoute || {}\n\n        if((start === stationId) || (end === stationId)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport const isStationStartRoute = (routes, stationId) => {\n\n    for (const currRoute of routes) {\n        if (currRoute.end === stationId) return false;\n    }\n    return true;\n\n}\n\nexport const isStationEndRoute = (routes, stationId) => {\n\n    for (const currRoute of routes) {\n        if (currRoute.start === stationId) return false;\n    }\n    return true;\n\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    width: 100%;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    position: relative;\n\n    overscroll-behavior: contain;\n`\n\nexport const ContentContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n\n    overscroll-behavior: contain;\n\n`\n\nexport const HeaderContainer = styled.div`\n`\n\nexport const BodyContainer = styled.div`\n    position: relative;\n\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    overflow: auto;\n    \n`\n","var _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"style\", {\n  type: \"text/css\"\n}, \"\\r\\n\\t.st0{clip-path:url(#SVGID_2_);fill:url(#SVGID_3_);}\\r\\n\\t.st1{clip-path:url(#SVGID_5_);fill:url(#SVGID_6_);}\\r\\n\\t.st2{clip-path:url(#SVGID_8_);fill:url(#SVGID_9_);}\\r\\n\\t.st3{clip-path:url(#SVGID_11_);fill:url(#SVGID_12_);}\\r\\n\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"path\", {\n  id: \"SVGID_1_\",\n  d: \"M99.8,97.3c24.8,0.1,45,20.4,45,45.2v2.3v2.3c0,24.9-20.3,45.2-45.2,45.2h-2.2v0h-2.3 c-52.4,0-95,42.6-95,95v2.3h49.8v-2.3c0-24.9,20.3-45.2,45.2-45.2h2.2v0h2.3c52.4,0,95-42.6,95-95v-2.3v-2.3 c0-27.8-12-52.9-31.2-70.3C146.6,87.6,124.3,97.1,99.8,97.3\"\n}));\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"rect\", {\n  x: 0.1,\n  y: 72.2,\n  className: \"st0\",\n  width: 194.5,\n  height: 217.3\n});\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"path\", {\n  id: \"SVGID_4_\",\n  d: \"M97.3,47.5L97.3,47.5l1.8,0c0.2,0,0.5,0,0.7,0c-0.1,0-0.2,0-0.3,0H97.3z\"\n}));\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"rect\", {\n  x: 97.3,\n  y: 47.5,\n  className: \"st1\",\n  width: 2.5,\n  height: 0\n});\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"path\", {\n  id: \"SVGID_7_\",\n  d: \"M144.3,0v2.3c0,24.9-20.3,45.2-45.2,45.2h-1.8v0H95c-52.4,0-95,42.6-95,95v2.3v2.3c0,27.8,12,52.8,31,70.1 c16.9-15.4,39.3-24.9,63.9-24.9C70,192.2,49.8,171.9,49.8,147v-2.3v-2.3c0-24.9,20.3-45.2,45.2-45.2h1.8v0h2.3c0.2,0,0.5,0,0.7,0 h0c7.5-0.1,14.8-1,21.9-2.7c0.1,0,0.3-0.1,0.4-0.1c1.2-0.3,2.4-0.6,3.5-1c0.3-0.1,0.6-0.2,0.8-0.2c1.1-0.3,2.1-0.7,3.2-1 c0.4-0.1,0.7-0.2,1.1-0.4c1-0.4,2-0.7,3-1.1c0.4-0.2,0.8-0.3,1.2-0.5c1-0.4,1.9-0.8,2.9-1.2c0.4-0.2,0.8-0.4,1.2-0.5 c0.9-0.4,1.8-0.9,2.8-1.3c0.4-0.2,0.8-0.4,1.2-0.6c0.9-0.5,1.8-1,2.7-1.4c0.4-0.2,0.8-0.4,1.2-0.7c0.9-0.5,1.7-1,2.6-1.6 c0.4-0.2,0.7-0.5,1.1-0.7c0.9-0.6,1.7-1.1,2.6-1.7c0.3-0.2,0.7-0.5,1-0.7c0.9-0.6,1.7-1.2,2.6-1.9c0.3-0.2,0.6-0.4,0.8-0.7 c0.9-0.7,1.7-1.4,2.6-2.1c0.2-0.2,0.4-0.3,0.6-0.5c0.9-0.8,1.8-1.6,2.7-2.4c18.9-17.4,30.8-42.3,30.8-69.9V0H144.3z\"\n}));\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"rect\", {\n  className: \"st2\",\n  width: 194.1,\n  height: 217.2\n});\n\nvar _ref9 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"path\", {\n  id: \"SVGID_10_\",\n  d: \"M95.1,242c-0.1,0-0.1,0-0.2,0C94.9,242,95,242,95.1,242l2.2,0v0H95.1z\"\n}));\n\nvar _ref10 = /*#__PURE__*/React.createElement(\"rect\", {\n  x: 94.9,\n  y: 242,\n  className: \"st3\",\n  width: 2.4,\n  height: 0\n});\n\nfunction SvgOptio(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 194.5 289.5\",\n    style: {\n      enableBackground: \"new 0 0 194.5 289.5\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, _ref3, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"SVGID_2_\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#SVGID_1_\",\n    style: {\n      overflow: \"visible\"\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"SVGID_3_\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: 5562.6191,\n    y1: -1140.729,\n    x2: 5563.6191,\n    y2: -1140.729,\n    gradientTransform: \"matrix(0 262.7973 262.7973 0 299877.7812 -1461758.875)\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#1C75BC\"\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.4154,\n    style: {\n      stopColor: \"#27AAE1\"\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#27AAE1\"\n    }\n  })), _ref4), /*#__PURE__*/React.createElement(\"g\", null, _ref5, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"SVGID_5_\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#SVGID_4_\",\n    style: {\n      overflow: \"visible\"\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"SVGID_6_\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: 5564.9995,\n    y1: -1148.1248,\n    x2: 5565.9683,\n    y2: -1148.1248,\n    gradientTransform: \"matrix(0 198.1214 198.1214 0 227566.625 -1102463.25)\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#1C75BC\"\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.4154,\n    style: {\n      stopColor: \"#27AAE1\"\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#27AAE1\"\n    }\n  })), _ref6), /*#__PURE__*/React.createElement(\"g\", null, _ref7, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"SVGID_8_\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#SVGID_7_\",\n    style: {\n      overflow: \"visible\"\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"SVGID_9_\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: 5542.5132,\n    y1: -1078.2549,\n    x2: 5543.5132,\n    y2: -1078.2549,\n    gradientTransform: \"matrix(0 -149.5435 -149.5435 0 -161148.9531 829055.5)\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#BF1F63\"\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.5271,\n    style: {\n      stopColor: \"#FC2350\"\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#FC2350\"\n    }\n  })), _ref8), /*#__PURE__*/React.createElement(\"g\", null, _ref9, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"SVGID_11_\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#SVGID_10_\",\n    style: {\n      overflow: \"visible\"\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"SVGID_12_\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: -399.074,\n    y1: 242.0121,\n    x2: -398.074,\n    y2: 242.0121,\n    gradientTransform: \"matrix(0 -6.501000e-03 -6.501000e-03 0 6043.2192 -1638.1573)\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    style: {\n      stopColor: \"#BF1F63\"\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.5271,\n    style: {\n      stopColor: \"#FC2350\"\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    style: {\n      stopColor: \"#FC2350\"\n    }\n  })), _ref10)));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgOptio);\nexport default __webpack_public_path__ + \"static/media/optio.d43af128.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components'\n\nexport const SwitchContainer = styled.div`\n    display: flex;\n    alignItems: center;\n    font-family: ${props => props.theme.font.primary};\n    font-size: ${props => props.theme.fontSize.sz4};\n`\n\nexport const SwitchContainerLabel = styled.span`\n    padding: 0;\n    margin: 0;\n    align-self: center;\n`","// import external dependencies\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\n// components\nimport Switch from 'react-ios-switch'\nimport Textbox from '../../basic/textbox/textbox'\nimport Button from '../../basic/button/button'\nimport { ReactComponent as OptioLogo } from '../../../graphics/icons/optio.svg'\n\n// styles\nimport * as styled from \"./splash_screen.style\"\n\n// import logger\nimport logger from '../../../logger.js';\nimport { postLocalSettings, getLocalSettings } from \"../../../redux/actions/local_actions\";\n\n\n\nconst ToggleMapViewSwitch = (props) => {\n    const {\n        checked,\n        onChange,\n        switchContainerStyle\n    } = props\n\n    return (\n        <styled.SwitchContainer style={switchContainerStyle}>\n            <styled.SwitchContainerLabel>Show List View</styled.SwitchContainerLabel>\n            <Switch\n                checked={checked}\n                onChange={onChange}\n                style={{ margin: \"0 2rem 0 2rem\" }}\n            />\n            <styled.SwitchContainerLabel>Show Map View</styled.SwitchContainerLabel>\n        </styled.SwitchContainer>\n    )\n}\n\nconst SplashScreen = (props) => {\n    const {\n        isApiLoaded,\n        apiError\n    } = props\n\n\n    const dispatch = useDispatch()\n    const localSettings = useSelector(state => state.localReducer.localSettings)\n    const apiAddress = localSettings.non_local_api_ip\n\n    const [apiIpAddress, setApiIpAddress] = useState(apiAddress)\n    const [localSettingsState, setLocalSettingsState] = useState({})\n\n    const dispatchPostLocalSettings = (settings) => dispatch(postLocalSettings(settings))\n    const dispatchGetLocalSettings = () => dispatch(getLocalSettings())\n\n    useEffect(() => {\n      setLocalSettingsState(localSettings)\n    }, [])\n    /**\n     * Submit API address to local storage\n     */\n    const handleSubmitApiIpAddress = async () => {\n        console.log(\"submitting\")\n\n        const localSettingsPromise = dispatchGetLocalSettings()\n        localSettingsPromise.then(response =>{\n          dispatchPostLocalSettings({\n              ...response,\n              non_local_api_ip: apiIpAddress,\n              non_local_api: true,\n          })\n        })\n\n        //window.location.reload(false);\n    }\n\n    /*\n    * toggle mapViewEnabled\n    * */\n    const toggleMapViewEnabled = async () => {\n        const updatedLocalSettings = {\n          ...localSettingsState,\n          mapViewEnabled: !localSettingsState.mapViewEnabled,\n        }\n        await dispatchPostLocalSettings(updatedLocalSettings)\n    }\n\n    return (\n        <>\n            {/* When loading show an Optio logo, if no api info, then show input to enter */}\n            {!isApiLoaded ? apiError ?\n                <div style={{ width: '100%', height: '100%', paddingTop: '15%', display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n                    <div style={{height: '15rem', overflow: 'hidden'}}>\n                        <OptioLogo preserveAspectRatio=\"xMinYMid meet\" height=\"100%\" width=\"100%\"/>\n                    </div>\n\n                    <div style={{ width: '50%', minWidth: '20rem', display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n                        < p > Please Enter API IP</p>\n                        <form onSubmit={handleSubmitApiIpAddress}>\n                            <Textbox\n                                placeholder=\"API IP Address\"\n                                onChange={(event) => {\n                                    setApiIpAddress(event.target.value)\n                                }}\n                                style={{ width: '100%' }}\n                            // type = 'submit'\n                            />\n                            <Button schema={'scheduler'} style={{ color: 'red', border: '0.1rem solid red' }} type='submit'>Submit</Button>\n                        </form>\n\n\n\n                        <ToggleMapViewSwitch\n                            switchContainerStyle={{\n                                bottom: \"1rem\",\n                                transform: \"translateY(-50%)\",\n                                position: \"absolute\"\n                            }}\n                            checked={localSettingsState.mapViewEnabled}\n                            onChange={toggleMapViewEnabled}\n                        />\n                    </div>\n                </div>\n\n                :\n                <div style={{ width: '100%', height: '100%', display: 'flex', justifyContent: 'center', alignItems: \"center\", flexDirection: \"column\" }}>\n                    <div style={{height: '15rem', overflow: 'hidden'}}>\n                        <OptioLogo preserveAspectRatio=\"xMinYMid meet\" height=\"100%\" width=\"100%\"/>\n                    </div>\n\n                    {/* <ToggleMapViewSwitch\n                        checked={localSettings.localSettings.mapViewEnabled}\n                        onChange={toggleMapViewEnabled}\n                    /> */}\n\n                </div>\n                :\n                <>\n                </>\n            }\n        </>\n    )\n}\n\nexport default SplashScreen;\n","// import external dependencies\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from \"react-router-dom\";\n\n// Import Actions\nimport { getMaps } from '../../redux/actions/map_actions'\nimport { getTasks, deleteTask, putTask } from '../../redux/actions/tasks_actions'\nimport { getDashboards, deleteDashboard, postDashboard } from '../../redux/actions/dashboards_actions'\nimport { getProcesses, putProcesses } from '../../redux/actions/processes_actions'\nimport { getLotTemplates } from '../../redux/actions/lot_template_actions'\n\nimport { getSettings } from '../../redux/actions/settings_actions'\nimport { getLocalSettings } from '../../redux/actions/local_actions'\nimport { postDevSettings } from '../../api/local_api'\n\nimport { getLoggers } from '../../redux/actions/local_actions';\n\n\nimport { getStations, putStation, deleteStation } from '../../redux/actions/stations_actions'\n\nimport { postLocalSettings } from '../../redux/actions/local_actions'\nimport * as localActions from '../../redux/actions/local_actions'\n\n// Import components\nimport SplashScreen from \"../../components/misc/splash_screen/splash_screen\";\n\n// import utils\nimport { getIsEquivalent, deepCopy } from '../../methods/utils/utils'\n\n// import logger\nimport logger from '../../logger.js';\nimport { getCards, getProcessCards } from \"../../redux/actions/card_actions\";\nimport { mapValues } from 'lodash';\n\nconst ApiContainer = (props) => {\n\n    // Dispatches\n    const dispatch = useDispatch()\n    const onGetMaps = async () => await dispatch(getMaps())\n    const onGetStations = async () => await dispatch(getStations())\n    const onGetDashboards = async () => await dispatch(getDashboards())\n    const onGetTasks = async () => await dispatch(getTasks())\n    const onGetLotTemplates = () => dispatch(getLotTemplates())\n    const onGetProcessCards = (processId) => dispatch(getProcessCards(processId))\n    const onGetCards = () => dispatch(getCards())\n    const onGetProcesses = () => dispatch(getProcesses());\n\n    const onGetSettings = () => dispatch(getSettings())\n    const onGetLocalSettings = () => dispatch(getLocalSettings())\n    const onPostLocalSettings = (settings) => dispatch(postLocalSettings(settings))\n\n    const onGetLoggers = () => dispatch(getLoggers())\n\n    // Selectors\n    const localReducer = useSelector(state => state.localReducer)\n    const MiRMapEnabled = localReducer?.localSettings?.MiRMapEnabled\n    const stopAPICalls = useSelector(state => state.localReducer.stopAPICalls)\n    const mapViewEnabled = useSelector(state => state.localReducer.localSettings.mapViewEnabled)\n\n\n    // States\n    const [currentPage, setCurrentPage] = useState('')\n    const [apiError, setApiError] = useState(false)\n\n    const [pageDataIntervals, setPageDataIntervals] = useState([])\n    const [criticalDataInterval, setCriticalDataInterval] = useState(null)\n\n    const params = useParams()\n\n    useEffect(() => {\n        loadInitialData() // initial call to load data when app opens\n\n        return () => {\n            // clear intervals\n            pageDataIntervals.forEach(interval => clearInterval(interval))\n            clearInterval(criticalDataInterval);\n        }\n    }, [])\n\n\n    useEffect(() => {\n        if (stopAPICalls === true) {\n            clearInterval(criticalDataInterval);\n            pageDataIntervals.forEach(interval => clearInterval(interval))\n            //dispatchStopAPICalls(false)\n        }\n    }, [stopAPICalls])\n\n\n    useEffect(() => {\n\n\n        // once MiR map is enabled, it's always enabled, so only need to do check if it isn't enabled\n        if (!MiRMapEnabled) {\n            let containsMirCart = false\n            // check each device\n            // in order for MiR mode to be enabled, there must be at least one device of MiR type\n\n            // only update if MiRMapEnabled isn't currently set or MiRMapEnabled needs to be updated because it isn't equal to containsMirCart\n            if ((MiRMapEnabled === undefined) || (MiRMapEnabled !== containsMirCart)) {\n\n                const updatedLocalSettings = {\n                    ...localReducer.localSettings,\n                    MiRMapEnabled: containsMirCart,\n                }\n\n                onPostLocalSettings(updatedLocalSettings)\n            }\n        }\n\n    }, [MiRMapEnabled])\n\n    useEffect(() => {\n\n        if (stopAPICalls !== true) {\n            updateCurrentPage();\n        }\n\n    })\n\n    const updateCurrentPage = () => {\n\n        // let pathname = this.props.location.pathname;\n\n        const currentPageRouter = params\n        // const currentPageRouter = getPageNameFromPath(pathname);\n        // this.logger.debug(\"api_container currentPage\", currentPage);\n        // this.logger.debug(\"api_container currentPageRouter\", currentPageRouter);\n\n\n        // If the current page state and actual current page are different, then the page has changed so the data interval should change\n        if (!getIsEquivalent(currentPageRouter, currentPage)) {\n            // page changed\n\n            // update state\n            setCurrentPage(currentPageRouter)\n\n            // update data interval to get data for new currentPage\n            setDataInterval(currentPageRouter);\n        }\n\n\n    }\n\n\n    /**\n     * Handles data interval based on page\n     */\n\n    const setDataInterval = async (pageParams) => {\n        let pageName = ''\n        const {\n            data1,\n            data2\n        } = pageParams\n        if (Object.keys(pageParams)[0] === 'sidebar') {\n            pageName = pageParams.sidebar\n        } else if (Object.keys(pageParams)[0] === 'stationID') {\n            if (pageParams.widgetPage === undefined) {\n                pageName = 'locations'\n            } else {\n                pageName = pageParams.widgetPage\n            }\n        }\n\n        // clear current interval\n        await pageDataIntervals.forEach(interval => clearInterval(interval));\n        setPageDataIntervals([])\n\n        // set new interval for specific page\n        switch (pageName) {\n\n            case 'dashboards':\n                setDashboardPageIntervals()\n                break;\n\n            case 'locations':\n                setLocationPageIntervals()\n                break\n\n            case 'settings':\n                setSettingsPageIntervals()\n                break;\n\n            case 'lots':\n                setKanbanIntervals()\n                break\n\n            case 'processes':\n                if (data2 === \"lots\") {\n                    setKanbanIntervals()\n                } else {\n                    setProcessPageIntervals()\n                }\n\n                break\n\n            default:\n                if(!mapViewEnabled) {\n                    setDashboardPageIntervals()\n                }\n                break;\n        }\n\n    }\n\n    const loadInitialData = async () => {\n        // Local Settings must stay on top of initial data so that the correct API address is seleceted\n\n        await onGetSettings();\n        await onGetMaps()\n\n        if (mapValues === undefined) {\n            props.onLoad()\n            setApiError(true)\n            return\n        }\n\n        await onGetStations()\n        await onGetDashboards()\n        await onGetTasks()\n        await onGetProcesses()\n        await onGetCards()\n        await onGetLotTemplates()\n\n        await onGetLoggers()\n\n        props.apiLoaded()\n        props.onLoad()\n\n    }\n\n    //  DATA LOADERS SECTION BEGIN\n    //  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    const setDashboardPageIntervals = () => {\n        setPageDataIntervals([\n            setInterval(async () => {\n                await onGetStations()\n                await onGetTasks()\n                await onGetDashboards();\n                await onGetCards()\n                await onGetProcesses()\n                await onGetTasks();\n                await onGetDashboards() // must go last\n            }, 5000)\n        ])\n    }\n\n    const setLocationPageIntervals = () => {\n        // On these pages, the map is shown. therefore we also have to load stuff to render on the map\n        setPageDataIntervals([\n            setInterval(() => {\n                onGetStations();\n                onGetProcesses();\n                onGetTasks();\n            }, 5000),\n            setInterval(() => {\n                onGetCards();\n            }, 1000)\n        ])\n    }\n\n    const setKanbanIntervals = () => {\n        setPageDataIntervals([\n            setInterval(() => {\n                onGetProcesses();\n            }, 10000),\n            setInterval(() => {\n                onGetCards();\n            }, 1000)\n        ])\n    }\n\n    const setSettingsPageIntervals = () => {\n\n    }\n\n    const setProcessPageIntervals = () => {\n        // On these pages, the map is shown. therefore we also have to load stuff to render on the map\n        setPageDataIntervals([\n            setInterval(() => {\n                onGetStations();\n                onGetProcesses();\n                onGetTasks();\n            }, 5000),\n            setInterval(() => {\n                onGetCards();\n            }, 1000)\n        ])\n    }\n\n\n    //  API LOGIN\n    //  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    return (\n        <SplashScreen\n            isApiLoaded={props.isApiLoaded}\n            apiError={apiError}\n        />\n    )\n}\n\nexport default ApiContainer;\n","import React, { useState, useEffect, lazy, Suspense } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { ThemeProvider } from \"styled-components\";\nimport theme from './theme';\nimport './App.css';\nimport 'rc-time-picker/assets/index.css';\n\n\n// Import Hooks\nimport useWindowSize from './hooks/useWindowSize'\n\nimport * as styled from './App.style'\n// Import API\nimport { getLocalSettings } from './redux/actions/local_actions'\n\n// import containers\nimport ApiContainer from './containers/api_container/api_container';\n\nconst ListView = lazy(() => import('./components/list_view/list_view'))\nconst Widgets = lazy(() => import('./components/widgets/widgets'))\nconst Authentication = lazy(() => import('./containers/authentication/authentication'))\nconst Logger = lazy(() => import('./containers/logger/logger'))\nconst MapView = lazy(()=> import('./containers/map_view/map_view'))\nconst StatusHeader = lazy(() => import('./containers/status_header/status_header'))\nconst SideBar = lazy(() => import('./containers/side_bar/side_bar'))\nconst PageErrorBoundary = lazy(() => import('./containers/page_error_boundary/page_error_boundary'))\n\nconst widthBreakPoint = 1000;\n\nconst App = () => {\n\n    const widgetPageLoaded = useSelector(state => { return state.widgetReducer.widgetPageLoaded })\n    const hoveringInfo = useSelector(state => state.widgetReducer.hoverStationInfo)\n    const maps = useSelector(state => state.mapReducer.maps)\n    const sideBarOpen = useSelector(state => state.sidebarReducer.open)\n    const mapViewEnabled = useSelector(state => state.localReducer.localSettings.mapViewEnabled)\n    const authenticated = useSelector(state => state.localReducer.authenticated)\n    const dispatch = useDispatch()\n    const dispatchGetLocalSettings = () => dispatch(getLocalSettings())\n\n    const [loaded, setLoaded] = useState(false)\n    const [apiLoaded, setApiLoaded] = useState(false)\n\n    const [showSideBar, setShowSideBar] = useState(false)\n\n    const size = useWindowSize()\n    const windowWidth = size.width\n    const mobileMode = windowWidth < widthBreakPoint;\n\n    useEffect(() => {\n      handleLoadLocalData();\n    }, [])\n\n    const handleLoadLocalData = async () => {\n      await dispatchGetLocalSettings()\n    }\n\n    /**\n     * This handles Map view in mobile mode\n     * Unmounts the map if widget pages is open\n     */\n    const handleMobileMapView = () => {\n\n        if (!widgetPageLoaded) {\n            return (\n                <Route\n                    path={[\"/locations/:stationID?/:widgetPage?\", '/']}>\n                    <MapView mobileMode={mobileMode} />\n                </Route>\n            )\n        }\n\n        else {\n            return null\n        }\n\n    }\n\n    // Used to clear local settings just in case the page cant be loaded anymore\n    // const handleClearLocalSettings = () => {\n    //     deleteLocalSettings()\n    //     return (\n    //         <>\n    //         </>\n    //     )\n    // }\n\n    return (\n        <Suspense fallback = {<></>}>\n            <Logger />\n\n\n              {/* <ThemeProvider theme={theme[this.state.theme]}> */}\n              <ThemeProvider theme={theme['main']}>\n\n                <styled.Container>\n                    <BrowserRouter>\n                        <PageErrorBoundary>\n                            <>\n                                {/* Authentication */}\n                                {!authenticated && \n                                    <Route path=\"/\" >\n                                        <Authentication mobileMode={mobileMode} />\n                                    </Route>\n                                }\n\n                                {authenticated &&\n                                    <Route\n                                        path={[\"/locations/:stationID?/:widgetPage?\", '/:sidebar?/:data1?/:data2?', '/',]}\n                                    >\n                                        <ApiContainer styleMode={null} apiMode={null} mode={null} logMode={\"DEV\"} onLoad={() => setLoaded(true)} apiLoaded={() => setApiLoaded(true)} isApiLoaded={apiLoaded} />\n                                    </Route>\n                                }\n\n                                {loaded && authenticated && apiLoaded &&\n                                    <styled.ContentContainer>\n\n                                        <styled.HeaderContainer>\n                                            {mapViewEnabled && !mobileMode ?\n                                                <Route\n                                                    path={[\"/locations/:stationID?/:widgetPage?\", '/']}\n                                                    component={StatusHeader}\n                                                />\n                                                :\n                                                <> </>\n                                            }\n                                        </styled.HeaderContainer>\n\n\n\n                                        <styled.BodyContainer>\n                                            {/* Hides Side bar when in a dashboard in mobile mode */}\n                                            {mapViewEnabled && !mobileMode ?\n                                                // mobileMode ?\n                                                // dashboardOpen ?\n                                                //     <></>\n                                                //     :\n\n                                                <Route\n                                                    path={[\"/:page?/:id?/:subpage?\", '/']}\n                                                >\n                                                    <SideBar\n                                                        showSideBar={sideBarOpen}\n                                                        setShowSideBar={setShowSideBar}\n                                                    />\n                                                </Route>\n                                                :\n                                                <></>\n                                            }\n\n                                            {/* If there are no maps, then dont render mapview (Could cause an issue when there is no MIR map)\n                                                And if the device is mobile, then unmount if widgets are open\n                                            */}\n                                            {!!maps && maps.length > 0 &&\n                                                <>\n                                                    {mapViewEnabled && !mobileMode ?\n\n                                                        (mobileMode ?\n                                                            <Route\n                                                                path={[\"/locations/:stationID?/:widgetPage?\", '/']}\n                                                            >\n                                                                {handleMobileMapView()}\n                                                            </Route>\n                                                            :\n                                                            <Route\n                                                                path={[\"/locations/:stationID?/:widgetPage?\", '/']}\n                                                                component={MapView}\n                                                            />\n                                                        )\n\n                                                        :\n\n                                                        <Route\n                                                            path={[\"/locations/:stationID/dashboards/:dashboardID?/:editing?/:lotID?/:warehouseID?\", '/']}\n                                                            component={ListView}\n                                                        />\n\n\n                                                    }\n                                                </>\n                                            }\n\n                                            {/* <Route\n                                                path=\"/locations/:locationID?/:widgetPage?\"\n                                                component={WidgetPages}\n                                            /> */}\n\n                                            {/* Widgets are here in mobile mode. If not in mobile mode, then they are in map_view.\n                                            The reasoning is that the map unmounts when in a widget while in mobile mode (for performance reasons).\n                                            So they need to be here. */}\n                                            {hoveringInfo !== null && mobileMode &&\n                                                <Route\n                                                    path={[\"/locations/:stationID?/:widgetPage?\", '/', \"/locations/:deviceID?/:widgetPage?\"]}\n                                                    component={Widgets}\n                                                />\n                                            }\n\n                                        </styled.BodyContainer>\n\n                                    </styled.ContentContainer>\n                                }\n                            </>\n                        </PageErrorBoundary>\n                      </BrowserRouter>\n                  </styled.Container>\n\n              </ThemeProvider>\n            </Suspense>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './methods/css/montserrat.css';\nimport './methods/css/iwawa.css';\nimport './methods/css/all.css';\nimport 'xmlrpc'\nimport { Provider } from 'react-redux'\nimport store from './redux/store/index.js'\nimport './methods/css/fontawesome.min.css'\nimport './graphics/icons/style.css'\n// import 'nivo'\n// import { AppContainer } from 'react-hot-loader';\n// require('react-hot-loader/patch')\n\n/* uncomment to disable default logger\nconsole.log = () => {};\nconsole.error = () => {};\nconsole.fatal = () => {};\nconsole.warn = () => {};\n*/\n//\n\nif(module.hot){\n    module.hot.accept()\n}\n\n// if(module.hot){\n//     console.log(\"module hot\")\n//\n//     module.hot.accept('./App', () => {\n//         console.log(\"inside callback\")\n//\n//         const NextApp = require('./App');\n//\n//         ReactDOM.render(\n//             <Provider store={store}>\n//                 <App />\n//             </Provider>,\n//             document.getElementById('root')\n//         );\n//\n//     });\n// }\n// else {\n    const rootElement = document.getElementById('root')\n    ReactDOM.render(\n        // <AppContainer>\n        <Provider store={store}>\n            <App />\n        </Provider>,\n            // </AppContainer>,\n        rootElement\n    )\n// }\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n","import {\n    STARTED,\n    SUCCESS,\n    FAILURE\n} from '../types/suffixes';\n\nexport const api_action = async (actionName, callback, dispatch, args) => {\n\n\n    function onStart() {\n      dispatch({ type: actionName + STARTED, payload: args });\n    }\n\n    function onSuccess(payload) {\n      dispatch({ type: actionName + SUCCESS, payload });\n      return payload;\n    }\n\n    function onError(error) {\n      dispatch({ type: actionName + FAILURE, payload: error });\n      return error;\n    }\n\n    try {\n\n      onStart();\n      const payload = await callback();\n      return onSuccess(payload);\n\n    } catch (error) {\n      return onError(error);\n    }\n\n};\n","import axios from 'axios';\n\nimport { apiIPAddress } from '../settings/settings'\nimport store from '../redux/store'\nimport { getHeaders, handleError } from './helpers';\n\nconst operator = 'dashboards'\n\nexport async function getDashboards() {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + `site_maps/${currMapId}/${operator}`,\n            headers: getHeaders()\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n}\n\nexport async function deleteDashboards(ID) {\n    try {\n        const response = await axios({\n            method: 'DELETE',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders()\n        });\n\n        // Success 🎉\n        return response;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function postDashboards(dashboard) {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        dashboard.map_id = currMapId\n\n        const response = await axios({\n            method: 'POST',\n            url: apiIPAddress() + operator,\n            headers: getHeaders(),\n            data: dashboard\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function putDashboards(dashboard, ID) {\n\n    try {\n        const response = await axios({\n            method: 'PUT',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders(),\n            data: dashboard\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n","import { normalize, schema } from 'normalizr';\n\nimport {\n    GET_DASHBOARDS,\n    GET_DASHBOARDS_STARTED,\n    GET_DASHBOARDS_SUCCESS,\n    GET_DASHBOARDS_FAILURE,\n\n    POST_DASHBOARD,\n    POST_DASHBOARD_STARTED,\n    POST_DASHBOARD_SUCCESS,\n    POST_DASHBOARD_FAILURE,\n\n    PUT_DASHBOARD,\n    PUT_DASHBOARD_STARTED,\n    PUT_DASHBOARD_SUCCESS,\n    PUT_DASHBOARD_FAILURE,\n\n    DELETE_DASHBOARD,\n    DELETE_DASHBOARD_STARTED,\n    DELETE_DASHBOARD_SUCCESS,\n    DELETE_DASHBOARD_FAILURE,\n\n    DASHBOARD_OPEN,\n} from '../types/dashboards_types'\n\nimport {\n    DASHBOARD,\n    DASHBOARDS\n} from \"../types/data_types\"\n\nimport {\n    SET\n} from \"../types/prefixes\"\n\nimport {\n    KICK_OFF_ENABLED,\n    FINISH_ENABLED\n} from \"../types/suffixes\"\n\nimport uuid from 'uuid'\n\nimport * as api from '../../api/dashboards_api'\nimport { dashboardsSchema } from '../../normalizr/schema';\nimport { getLoadStationId, getRouteProcesses, getUnloadStationId } from \"../../methods/utils/route_utils\";\nimport { willRouteDeleteBreakProcess } from \"../../methods/utils/processes_utils\";\nimport { putProcesses, setSelectedProcess } from \"./processes_actions\";\nimport { deleteTask } from \"./tasks_actions\";\nimport { deepCopy } from \"../../methods/utils/utils\";\nimport { useSelector } from \"react-redux\";\nimport * as stationActions from \"./stations_actions\";\nimport { getDefaultStation } from \"../../methods/utils/station_utils\";\nimport { removeArrayIndices } from \"../../methods/utils/array_utils\";\nimport { ROUTE_TYPES } from \"../../constants/route_constants\";\nimport { OPERATION_TYPES, TYPES } from '../../constants/dashboard_constants'\nimport { DASHBOARD_BUTTON_COLORS } from \"../../constants/dashboard_constants\";\n\n\nexport const getDashboards = () => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: GET_DASHBOARDS_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: GET_DASHBOARDS_SUCCESS, payload: response });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: GET_DASHBOARDS_FAILURE, payload: error });\n            console.log(error)\n\n            return error;\n        }\n\n        try {\n            onStart();\n            const dashboards = await api.getDashboards();\n\n            const normalizedDashboards = {}\n            dashboards.map((dashboard) => {\n                normalizedDashboards[dashboard._id.$oid] = dashboard\n            })\n\n            return onSuccess(normalizedDashboards)\n            // return onSuccess(dashboards)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\nexport const postDashboard = (dashboard) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: POST_DASHBOARD_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: POST_DASHBOARD_SUCCESS, payload: response });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: POST_DASHBOARD_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            delete dashboard._id\n            const newDashboard = await api.postDashboards(dashboard);\n            return onSuccess(newDashboard)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\nexport const putDashboard = (dashboard, ID) => {\n    const dashbaordCopy = deepCopy(dashboard)\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: PUT_DASHBOARD_STARTED });\n        }\n        async function onSuccess(updatedDashboard) {\n            await dispatch({ type: PUT_DASHBOARD_SUCCESS, payload: updatedDashboard });\n            return updatedDashboard;\n        }\n        function onError(error) {\n            dispatch({ type: PUT_DASHBOARD_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            delete dashbaordCopy._id\n            const updateDashboard = await api.putDashboards(dashbaordCopy, ID);\n            return onSuccess(updateDashboard)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n\nexport const putDashboardAttributes = (attributes, id) => {\n\n    return async (dispatch, getState) => {\n\n        const state = getState()\n        const dashboards = state.dashboardsReducer.dashboards || {}\n\n        const dashboard = dashboards[id]\n\n        dispatch(putDashboard({\n            ...dashboard,\n            ...attributes\n        }, id))\n    }\n}\n\nexport const deleteDashboard = (ID) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: DELETE_DASHBOARD_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: DELETE_DASHBOARD_SUCCESS, payload: ID });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: DELETE_DASHBOARD_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            const removeDashboards = await api.deleteDashboards(ID);\n            return onSuccess(ID)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n\n// deletes all buttons with routeId from all dashboards\n// ******************************\nexport const removeRouteFromAllDashboards = (routeId) => {\n    return async (dispatch, getState) => {\n\n        // current state\n        const state = getState()\n\n        const dashboards = state.dashboardsReducer.dashboards || {}\n        const routes = state.tasksReducer.tasks || {}\n        const selectedTask = routes[routeId] || {}\n\n        // Delete all dashboard buttons associated with that task\n        Object.values(dashboards)\n            .filter(dashboard =>\n                dashboard.station === selectedTask?.load?.station || dashboard.station === selectedTask?.unload?.station\n            ).forEach(currDashboard => {\n                var currButtons = [...currDashboard.buttons]\n\n                currButtons = currButtons.filter(button => button.task_id !== routeId)\n\n                // update dashboard\n                dispatch(putDashboard({\n                    ...currDashboard,\n                    buttons: currButtons\n                }, currDashboard._id.$oid))\n            }\n            )\n\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// automatically adds a button for a route to its load station's dashboard\n// ******************************\nexport const addRouteToDashboards = (route) => {\n    return async (dispatch, getState) => {\n\n        // current state\n        const state = getState()\n        const dashboards = state.dashboardsReducer.dashboards || {}\n        const stations = state.stationsReducer.stations || {}\n\n        const {\n            _id: routeId,\n            type: routeType,\n            name: routeName\n        } = route\n\n        // get station for route button (load if push, unload if pull)\n        let stationId\n        if (routeType === ROUTE_TYPES.PULL) {\n            stationId = getUnloadStationId(route)\n        }\n        else {\n            stationId = getLoadStationId(route)\n        }\n\n        const station = stations[stationId] || getDefaultStation()\n        const dashboard = dashboards[station.dashboards[0]]\n\n        const newDashboardButton = {\n            color: '#bcbcbc',\n            id: uuid.v4(),\n            name: \"\",\n            task_id: routeId,\n            type: TYPES.ROUTES.key,\n        }\n\n        if (dashboard === undefined) {\n            const defaultDashboard = {\n                name: \"\",\n                locked: false,\n                buttons: [newDashboardButton],\n                station: station._id\n            }\n            const postedDashboard = await dispatch(postDashboard(defaultDashboard))\n            alert('Added dashboard to location. There already should be a dashboard tied to this location, so this is an temp fix')\n            await dispatch(stationActions.putStation({\n                ...station,\n                dashboards: [postedDashboard._id.$oid]\n            }, station._id))\n        }\n\n        else {\n            // see if button for task already exists\n            const buttonIndex = dashboard.buttons.findIndex((currButton) => {\n                return currButton.task_id === route._id\n            })\n\n            // only add button if it isn't already in the dashboard\n            if (buttonIndex === -1) {\n                await dispatch(putDashboard({\n                    ...dashboard,\n                    buttons: [...dashboard.buttons, newDashboardButton]\n                }, dashboard._id.$oid))\n            }\n\n        }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// automatically removes a button that was added to a dashboard but no longer belongs to it\n// ******************************\nexport const removeRouteFromWrongDashboards = (route) => {\n    return async (dispatch, getState) => {\n\n        // current state\n        const state = getState()\n        const dashboards = Object.values(state.dashboardsReducer.dashboards) || []\n\n        const {\n            _id: routeId,\n            type: routeType\n        } = route\n\n        // get station id for route (load for push, unload for pull)\n        let stationId\n        if (routeType === ROUTE_TYPES.PULL) {\n            // if pull type, button should be at unload station\n            stationId = getUnloadStationId(route)\n        }\n\n        else {\n            // if push type, button should be at load station\n            stationId = getLoadStationId(route)\n        }\n\n        dashboards.forEach((currDashboard) => {\n            const {\n                buttons: currDashboardButtons = [],\n                _id: currDashboardIdObj = {},\n                station: currStationId\n            } = currDashboard\n\n            const {\n                $oid: currDashboardId\n            } = currDashboardIdObj\n\n            // curr dashboard isn't the route's load station\n            if (currStationId !== stationId) {\n\n                // loop through each button and check if the button needs to be removed\n                const filteredButtons = currDashboardButtons.filter((currButton, currButtonIndex) => {\n                    const {\n                        task_id: currRouteId\n                    } = currButton\n\n                    return (currRouteId !== routeId) // if dashboard isn't at the right station for the route, filter out buttons for this route\n                })\n\n                // if length of buttons arr changed, a button was removed, so update\n                // otherwise nothing was removed, so need for update\n                if (filteredButtons.length !== currDashboardButtons.length) {\n                    // update the dashboard\n                    dispatch(putDashboard({\n                        ...currDashboard,\n                        buttons: filteredButtons\n                    }, currDashboardId))\n                }\n\n            }\n        })\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nexport const dashboardOpen = (bol) => {\n    return { type: DASHBOARD_OPEN, payload: bol }\n}\n\nexport const setDashboardKickOffProcesses = (dashboardId, kickOffEnabled) => {\n    return { type: SET + DASHBOARD + KICK_OFF_ENABLED, payload: { dashboardId, kickOffEnabled } }\n}\n\nexport const setDashboardFinishProcesses = (dashboardId, finishEnabled) => {\n    return { type: SET + DASHBOARD + FINISH_ENABLED, payload: { dashboardId, finishEnabled } }\n}\n","export const getDefaultStation = () => {\n\treturn {\n\t\tdashboards: []\n\t}\n\n}\n\n","import log from 'loglevel';\n// import remote from 'loglevel-plugin-remote';\n\n\n/*\n\nNote on log levels:\n\nTrace - Only when I would be \"tracing\" the code and trying to find one part of a function specifically.\n\nDebug - Information that is diagnostically helpful to people more than just developers (IT, sysadmins, etc.).\n\nlog - Equivalent to Debug\n\nInfo - Generally useful information to log (service start/stop, configuration assumptions, etc). Info I want to always have available but usually don't care about under normal circumstances. This is my out-of-the-box config level.\n\nWarn - Anything that can potentially cause application oddities, but for which I am automatically recovering. (Such as switching from a primary to backup server, retrying an operation, missing secondary data, etc.)\n\nError - Any error which is fatal to the operation, but not the service or application (can't open a required file, missing data, etc.). These errors will force user (administrator, or direct user) intervention. These are usually reserved (in my apps) for incorrect connection strings, missing services, etc.\n\n*/\n\n/* uncomment for remote logging\nconst customJSON = log => ({\n   msg: log.message,\n   level: log.level.label,\n   stacktrace: log.stacktrace\n});\n\n\nremote.apply(log, { format: customJSON, url: '/logger' });\n\n*/\n\n/*\nObject.defineProperty(log, \"category\", {\n  value: \"root\",\n  writable: true\n})\n*/\n\nconst getLogger = log.getLogger;\n\nlog.getLogger = function getLoggerAndSetCategory(name, category) {\n    const logger = getLogger(name);\n\n    if(category) {\n        Object.defineProperty(logger, \"category\", {\n          value: category,\n          writable: true\n        })\n    }\n\n    return logger;\n};\n\nlog.getCategoryLoggers = function(category) {\n  const loggers = Object.values(log.getLoggers());\n  const categoryLoggers = [];\n\n  loggers.forEach((logger, index) => {\n    if(logger.category == category) categoryLoggers.push(logger);\n  });\n\n  return categoryLoggers;\n};\n\n// var originalFactory = log.methodFactory;\n\n// log.methodFactory = function (methodName, logLevel, loggerName) {\n//     var rawMethod = originalFactory(methodName, logLevel, loggerName);\n//\n//     return function (message) {\n//         rawMethod(\"Newsflash: \" + message);\n//     };\n// };\n// log.setLevel(log.getLevel());\n\nexport default log;\n\n\n","// These actions are used for local API calls to local storage\n\nimport {\n  GET_LOGGERS,\n  GET_LOGGERS_STARTED,\n  GET_LOGGERS_SUCCESS,\n  GET_LOGGERS_FAILURE,\n\n  POST_LOGGERS,\n  POST_LOGGERS_STARTED,\n  POST_LOGGERS_SUCCESS,\n  POST_LOGGERS_FAILURE,\n\n  GET_LOCAL_SETTINGS,\n  GET_LOCAL_SETTINGS_STARTED,\n  GET_LOCAL_SETTINGS_SUCCESS,\n  GET_LOCAL_SETTINGS_FAILURE,\n\n  POST_LOCAL_SETTINGS,\n  POST_LOCAL_SETTINGS_STARTED,\n  POST_LOCAL_SETTINGS_SUCCESS,\n  POST_LOCAL_SETTINGS_FAILURE,\n\n  STOP_API_CALLS,\n\n} from '../types/local_types';\n\nimport * as api from '../../api/local_api';\n\n// import logger\nimport log from '../../logger.js';\n\nconst logger = log.getLogger(\"Actions\", \"Redux\");\n\nexport const getLoggers = () => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: GET_LOGGERS_STARTED });\n          }\n          function onSuccess(response) {\n            dispatch({ type: GET_LOGGERS_SUCCESS, payload: response });\n            return response;\n          }\n          function onError(error) {\n            dispatch({ type: GET_LOGGERS_FAILURE, payload: error });\n            return error;\n          }\n\n        try {\n            onStart();\n            const loggers = await api.getLoggers();\n\n            return onSuccess(loggers)\n        } catch(error) {\n            return onError(error)\n        }\n    }\n}\nexport const postLoggers =  (loggers, loaded) => {\n  return async dispatch => {\n        async function onStart() {\n          dispatch({ type: POST_LOGGERS_STARTED });\n        }\n        async function onSuccess(response) {\n          dispatch({ type: POST_LOGGERS_SUCCESS, payload: loggers });\n          return response;\n        }\n        async function onError(error) {\n          dispatch({ type: POST_LOGGERS_FAILURE, payload: error });\n          return error;\n        }\n\n      try {\n          onStart();\n\n          if(loaded) {\n              const newLoggers = await api.postLoggers(loggers);\n              return await onSuccess(newLoggers);\n          } else {\n              return await onSuccess(loggers);\n          }\n\n\n      } catch(error) {\n          return onError(error)\n      }\n  }\n}\n\nexport const getLocalSettings = () => {\n  return async dispatch => {\n      function onStart() {\n          dispatch({ type: GET_LOCAL_SETTINGS_STARTED });\n        }\n        function onSuccess(response) {\n          dispatch({ type: GET_LOCAL_SETTINGS_SUCCESS, payload: response });\n          return response;\n        }\n        function onError(error) {\n          dispatch({ type: GET_LOCAL_SETTINGS_FAILURE, payload: error });\n          return error;\n        }\n\n      try {\n          onStart();\n          const localSettings = await api.getLocalSettings();\n          return onSuccess(localSettings)\n      } catch(error) {\n          return onError(error)\n      }\n  }\n}\n\nexport const postLocalSettings =  (settings) => {\n  return async dispatch => {\n        async function onStart() {\n          dispatch({ type: POST_LOCAL_SETTINGS_STARTED });\n        }\n        async function onSuccess(response) {\n          dispatch({ type: POST_LOCAL_SETTINGS_SUCCESS, payload: settings });\n          return response;\n        }\n        async function onError(error) {\n          dispatch({ type: POST_LOCAL_SETTINGS_FAILURE, payload: error });\n          return error;\n        }\n\n      try {\n          onStart();\n          const localSettings = await api.postLocalSettings(settings);\n          return await onSuccess(localSettings)\n      } catch(error) {\n          return onError(error)\n      }\n  }\n}\n\nexport const stopAPICalls = (bool) => {\n    return { type: STOP_API_CALLS, payload: bool }\n}\n\nexport const updateLocalSettingsState = (payload) => {\n  return { type: 'UPDATE_STATE', payload }\n}","export const hexToRGBA = (hex, alpha) => {\n  const RR = parseInt(hex.slice(1, 3), 16);\n  const GG = parseInt(hex.slice(3, 5), 16);\n  const BB = parseInt(hex.slice(5, 7), 16);\n\n  return `rgba(${RR}, ${GG}, ${BB}${alpha && `, ${alpha}`})`;\n};\n\nexport const intToRGB = (i) => {\n    var c = (i & 0x00FFFFFF)\n        .toString(16)\n        .toUpperCase();\n\n    return \"00000\".substring(0, 6 - c.length) + c;\n}\n\nexport function LightenDarkenColor(col,amt) {\n    var usePound = false;\n    if ( col[0] === \"#\" ) {\n        col = col.slice(1);\n        usePound = true;\n    }\n\n    var num = parseInt(col,16);\n\n    var r = (num >> 16) + amt;\n\n    if ( r > 255 ) r = 255;\n    else if  (r < 0) r = 0;\n\n    var b = ((num >> 8) & 0x00FF) + amt;\n\n    if ( b > 255 ) b = 255;\n    else if  (b < 0) b = 0;\n\n    var g = (num & 0x0000FF) + amt;\n\n    if ( g > 255 ) g = 255;\n    else if  ( g < 0 ) g = 0;\n\n    return (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\n// export function pSBC(p,c0,c1,l){\n//     let r,g,b,P,f,t,h,i=parseInt,m=Math.round,a=typeof(c1)==\"string\";\n//     if(typeof(p)!=\"number\"||p<-1||p>1||typeof(c0)!=\"string\"||(c0[0]!='r'&&c0[0]!='#')||(c1&&!a))return null;\n//     if(!this.pSBCr)this.pSBCr=(d)=>{\n//         let n=d.length,x={};\n//         if(n>9){\n//             [r,g,b,a]=d=d.split(\",\"),n=d.length;\n//             if(n<3||n>4)return null;\n//             x.r=i(r[3]==\"a\"?r.slice(5):r.slice(4)),x.g=i(g),x.b=i(b),x.a=a?parseFloat(a):-1\n//         }else{\n//             if(n==8||n==6||n<4)return null;\n//             if(n<6)d=\"#\"+d[1]+d[1]+d[2]+d[2]+d[3]+d[3]+(n>4?d[4]+d[4]:\"\");\n//             d=i(d.slice(1),16);\n//             if(n==9||n==5)x.r=d>>24&255,x.g=d>>16&255,x.b=d>>8&255,x.a=m((d&255)/0.255)/1000;\n//             else x.r=d>>16,x.g=d>>8&255,x.b=d&255,x.a=-1\n//         }return x};\n//     h=c0.length>9,h=a?c1.length>9?true:c1==\"c\"?!h:false:h,f=this.pSBCr(c0),P=p<0,t=c1&&c1!=\"c\"?this.pSBCr(c1):P?{r:0,g:0,b:0,a:-1}:{r:255,g:255,b:255,a:-1},p=P?p*-1:p,P=1-p;\n//     if(!f||!t)return null;\n//     if(l)r=m(P*f.r+p*t.r),g=m(P*f.g+p*t.g),b=m(P*f.b+p*t.b);\n//     else r=m((P*f.r**2+p*t.r**2)**0.5),g=m((P*f.g**2+p*t.g**2)**0.5),b=m((P*f.b**2+p*t.b**2)**0.5);\n//     a=f.a,t=t.a,f=a>=0||t>=0,a=f?a<0?t:t<0?a:a*P+t*p:0;\n//     if(h)return\"rgb\"+(f?\"a(\":\"(\")+r+\",\"+g+\",\"+b+(f?\",\"+m(a*1000)/1000:\"\")+\")\";\n//     else return\"#\"+(4294967296+r*16777216+g*65536+b*256+(f?m(a*255):0)).toString(16).slice(1,f?undefined:-2)\n// }\n\nexport const RGB_Linear_Blend=(p,c0,c1)=>{\n    var i=parseInt,r=Math.round,P=1-p,[a,b,c,d]=c0.split(\",\"),[e,f,g,h]=c1.split(\",\"),x=d||h,j=x?\",\"+(!d?h:!h?d:r((parseFloat(d)*P+parseFloat(h)*p)*1000)/1000+\")\"):\")\";\n    return\"rgb\"+(x?\"a(\":\"(\")+r(i(a[3]===\"a\"?a.slice(5):a.slice(4))*P+i(e[3]==\"a\"?e.slice(5):e.slice(4))*p)+\",\"+r(i(b)*P+i(f)*p)+\",\"+r(i(c)*P+i(g)*p)+j;\n}\n\nexport const RGB_Linear_Shade=(p,c)=>{\n    var i=parseInt,r=Math.round,[a,b,c,d]=c.split(\",\"),P=p<0,t=P?0:255*p,P=P?1+p:1-p;\n    return\"rgb\"+(d?\"a(\":\"(\")+r(i(a[3]===\"a\"?a.slice(5):a.slice(4))*P+t)+\",\"+r(i(b)*P+t)+\",\"+r(i(c)*P+t)+(d?\",\"+d:\")\");\n}\n\nexport const RGB_Log_Blend=(p,c0,c1)=>{\n    var i=parseInt,r=Math.round,P=1-p,[a,b,c,d]=c0.split(\",\"),[e,f,g,h]=c1.split(\",\"),x=d||h,j=x?\",\"+(!d?h:!h?d:r((parseFloat(d)*P+parseFloat(h)*p)*1000)/1000+\")\"):\")\";\n    return\"rgb\"+(x?\"a(\":\"(\")+r((P*i(a[3]===\"a\"?a.slice(5):a.slice(4))**2+p*i(e[3]==\"a\"?e.slice(5):e.slice(4))**2)**0.5)+\",\"+r((P*i(b)**2+p*i(f)**2)**0.5)+\",\"+r((P*i(c)**2+p*i(g)**2)**0.5)+j;\n}\n\nexport const RGB_Log_Shade=(p,c)=>{\n    var i=parseInt,r=Math.round,[a,b,c,d]=c.split(\",\"),P=p<0,t=P?0:p*255**2,P=P?1+p:1-p;\n    return\"rgb\"+(d?\"a(\":\"(\")+r((P*i(a[3]===\"a\"?a.slice(5):a.slice(4))**2+t)**0.5)+\",\"+r((P*i(b)**2+t)**0.5)+\",\"+r((P*i(c)**2+t)**0.5)+(d?\",\"+d:\")\");\n}\n","import React from 'react'\n\nconst defaultWidgetPages = ['dashboards']\n\nexport const DeviceTypes = {\n\n    generic: {\n        icon: 'icon-rmLogo',\n        primaryColor: '#FF4B4B',\n        startGradientColor: '#FF4B4B',\n        stopGradientColor: '#ff2424',\n        svgPath: 'M195.33,232.27c1.06,1.43.51,2.6-1.24,2.6H172a7.18,7.18,0,0,1-5.09-2.6l-58.8-79.35h35.12a29.27,29.27,0,1,0,0-58.53H96.36V234.87H73V71h70.24a52.68,52.68,0,0,1,10,104.4ZM263.64,71.13,214.18,120.6l-14-14a1.35,1.35,0,0,0-.83-.29l-.21,0a1.29,1.29,0,0,0-1.09,1.28,1.1,1.1,0,0,0,0,.26s0,.09,0,.13a57.16,57.16,0,0,1,.65,28.85l0,.13a1.1,1.1,0,0,0,0,.26,1.33,1.33,0,0,0,.29.83,1.45,1.45,0,0,0,.18.17l.6.6,8.15,8.16h0l6.27,6.27,16.32-16.31,33.15-33.15V235h23.41V71.13Z',\n        widgetPages: defaultWidgetPages,\n    },\n\n    trident: {\n        icon: 'icon-trident',\n        primaryColor: '#d7841e',\n        startGradientColor: '#d7a31e',\n        stopGradientColor: '#d7841e',\n        svgPath: \"M171.27,213.07c-2.27-1-3-2.87-2.94-5.29.06-12.66,0-25.33,0-38v-2.61c-6,2.49-11.87,4.64-17.47,7.29a98.76,98.76,0,0,0-10.57,6.33c-1.52,1-3,1.62-4.73.73s-2.06-2.35-2.18-4.09c-1.64-23.93-5.32-47.51-12.67-70.41-4.15-13-9.45-25.4-17.78-36.34A56.17,56.17,0,0,0,90.15,58.17a15.14,15.14,0,0,1-2-1.55,3.57,3.57,0,0,1-.94-4,3.4,3.4,0,0,1,3.59-2.53,91.1,91.1,0,0,1,11.31,1.47,67.94,67.94,0,0,1,37.43,22.22c1.29,1.48,2.14,3,1.3,4.92s-2.53,2.45-4.49,2.37a10.46,10.46,0,0,0-1.11.06c7.69,22,14.86,44.08,17.35,67.37l15.7-5.31V73.57a43.06,43.06,0,0,0-4.71,2.35c-2.11,1.37-3.8,1.61-5.32.39s-1.91-2.94-.87-5.24q9.39-20.74,18.8-41.49a4,4,0,0,1,3.76-2.65,4,4,0,0,1,3.9,2.72Q193.19,50.32,202.57,71c1.08,2.39.75,4.12-.89,5.39s-3.17.91-5.32-.49a43.24,43.24,0,0,0-4.67-2.32V143.2l15.69,5.3c2.5-23.14,9.63-45.25,17.41-67.43-.78,0-1.37,0-1.95,0a3.8,3.8,0,0,1-3.72-2.42,3.89,3.89,0,0,1,.79-4.22A68.45,68.45,0,0,1,240,58.15a69.71,69.71,0,0,1,27.48-8.07c2.46-.2,4.39.37,5.61,2.64V54.9a27.37,27.37,0,0,1-3.28,3.27,59.26,59.26,0,0,0-12.89,12.7c-8.23,10.85-13.49,23.18-17.61,36-7.36,22.88-11,46.46-12.7,70.39-.12,1.79-.45,3.38-2.2,4.26s-3.32.15-4.89-.84c-3.41-2.18-6.82-4.39-10.4-6.28a89.42,89.42,0,0,0-17.47-6.79v2.17c0,12.66,0,25.32,0,38,0,2.42-.66,4.24-2.93,5.29Z\",\n        widgetPages: [...defaultWidgetPages, 'statistics'],\n    },\n    arm: {\n        icon: 'icon-arm',\n        primaryColor: '#1e9cd7',\n        startGradientColor: '#1e9cd7',\n        stopGradientColor: '#005b97',\n        svgPath: 'M173.7,172.2a22.64,22.64,0,1,1-22.64,22.64A22.64,22.64,0,0,1,173.7,172.2Zm.08-4L125.61,65.38A22.53,22.53,0,0,1,103.37,75.8l48.17,102.84a22.53,22.53,0,0,1,22.24-10.42ZM82,49.35a22.64,22.64,0,1,0,22.64-22.63A22.64,22.64,0,0,0,82,49.35ZM240.43,25,127.3,34.91a22.5,22.5,0,0,1,2.14,24.46l113.13-9.9A22.55,22.55,0,0,1,240.43,25Zm1.43,10.68a13.21,13.21,0,1,0,13.21-13.21A13.22,13.22,0,0,0,241.86,35.69ZM250,81.74a57.78,57.78,0,0,0,4.17,13.78,3.78,3.78,0,0,0,.17.35l8.11-1.42-2.61-14.76,6.92-1.22,2.61,14.75,8.1-1.42c0-.14,0-.27,0-.4A57.9,57.9,0,0,0,276.7,77a57.32,57.32,0,0,0-4.18-13.78l-2.61-14.83-23.34,4.12,2.62,14.83A57.43,57.43,0,0,0,250,81.74Zm11.36-.88,5.47,31,2.45,7.46,2.17-.39-.25-7.84-5.46-31Z',\n        widgetPages: [...defaultWidgetPages, 'statistics'],\n    },\n    cart: {\n        icon: 'icon-cart',\n        deviceFontSize: '2.5rem',\n        primaryColor: '#03ffa3',\n        startGradientColor: '#03ffa3',\n        stopGradientColor: '#00b673',\n        svgPath:\n            <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 400\">\n                <path d=\"M285,90a35,35,0,0,1-35-35,39.83,39.83,0,0,1,2.05-11.22A2.67,2.67,0,0,0,249.37,40H150.63A2.67,2.67,0,0,0,148,43.78,39.83,39.83,0,0,1,150,55a35,35,0,0,1-35,35,39.83,39.83,0,0,1-11.22-2A2.67,2.67,0,0,0,100,90.63V309.37a2.67,2.67,0,0,0,3.78,2.68A39.83,39.83,0,0,1,115,310a35,35,0,0,1,35,35A39.83,39.83,0,0,1,148,356.22a2.67,2.67,0,0,0,2.68,3.78h98.74a2.67,2.67,0,0,0,2.68-3.78A39.83,39.83,0,0,1,250,345a35,35,0,0,1,35-35,39.83,39.83,0,0,1,11.22,2.05,2.67,2.67,0,0,0,3.78-2.68V90.63A2.67,2.67,0,0,0,296.22,88,39.83,39.83,0,0,1,285,90ZM159.38,167a12.9,12.9,0,0,1,2.61-6.38l36.69-45.94a16.33,16.33,0,0,1,4.83-4.13c1.27-.55,5,2.41,6.42,4.13l36.69,45.94a12.9,12.9,0,0,1,2.61,6.38c.07,1.78-5,3.24-7.24,3.24H166.62C164.42,170.19,159.32,168.73,159.38,167ZM250,248.06a13,13,0,0,1-6.61,1.94H168a13,13,0,0,1-6.61-1.94c-1.44-1.07.6-6,2-7.69l36.69-45.93a16.64,16.64,0,0,1,4.82-4.14c1.28-.55,5.05,2.42,6.43,4.14L248,240.37C249.39,242.09,251.43,247,250,248.06Z\" />\n                <circle cx=\"115\" cy=\"55\" r=\"30\" />\n                <circle cx=\"285\" cy=\"55\" r=\"30\" />\n                <circle cx=\"115\" cy=\"345\" r=\"30\" />\n                <circle cx=\"285\" cy=\"345\" r=\"30\" />\n            </svg>,\n\n        widgetPages: defaultWidgetPages,\n    },\n    rmVision: {\n        icon: 'icon-rmVision',\n        primaryColor: '#eb008a',\n        startGradientColor: '#eb008a',\n        stopGradientColor: '#9e005d',\n        svgPath: \"M306.33,121.46a54.29,54.29,0,0,1-3.68,6.06c-17.81,22.3-38.44,41.43-63.28,55.73-16.35,9.41-33.78,15.74-52.75,17a105.48,105.48,0,0,1-44.93-7.08c-21.83-8.29-40.59-21.41-57.72-37a239.89,239.89,0,0,1-27.6-29.84c-3.59-4.6-3.61-8.11,0-12.69,17.93-22.74,38.79-42.24,64-56.77,19.78-11.41,40.89-18.3,64.05-17.27a112.79,112.79,0,0,1,45.15,12c29.9,14.68,53.82,36.52,74.31,62.41a31.48,31.48,0,0,1,2.47,4.5ZM72.5,119.81c.93,1.1,1.56,2,2.29,2.71,7.68,7.88,15,16.13,23.16,23.53C113.61,160.33,131,172,151.3,178.87a86,86,0,0,0,37.38,4.47c16.4-1.8,31.28-7.88,45.3-16.28,18.21-10.92,33.79-25,47.92-40.72,1.85-2.06,3.61-4.2,5.59-6.51-4.85-5.25-9.4-10.44-14.24-15.35C257,88,239,73.8,217.53,64.5A95,95,0,0,0,184,56.26c-17.93-.84-34.42,4.16-50.12,12.28-17.55,9.07-32.74,21.32-46.56,35.31C82.25,109,77.49,114.41,72.5,119.81Z M229.92,120.19c-.2,27.69-22.78,50-50.26,49.71a49.92,49.92,0,1,1,50.26-49.71Zm-16.65-.12A33.29,33.29,0,1,0,180,153.29,33.33,33.33,0,0,0,213.27,120.07Z M176.11,135.28h-4.3V141c0,1.28-.18,1.46-1.44,1.46h-5.2c0,.84,0,1.63,0,2.41,0,.13.21.28.35.38A2.37,2.37,0,1,1,162,148a2.33,2.33,0,0,1,1-2.71.76.76,0,0,0,.37-.77c0-.85,0-1.71,0-2.56s.26-1.24,1.27-1.25H170v-5.44h-4.24c-.71,0-1-.33-1-1,0-1.19,0-2.38,0-3.56V130h-5.4c0,.22,0,.43,0,.65v4.75c0,.91-.29,1.19-1.2,1.2h-1.63a2.2,2.2,0,0,0-2.14.79,2.23,2.23,0,0,1-3.37-.11,2.36,2.36,0,0,1,.32-3.43,2.29,2.29,0,0,1,3.35.49,1,1,0,0,0,1.08.52c.59,0,1.38.14,1.72-.17s.11-1.1.12-1.68c0-1.23,0-2.45,0-3.68,0-.85.28-1.12,1.14-1.12h6v-4.26a4.22,4.22,0,0,0-.49,0h-8.74a.76.76,0,0,0-.76.39,2.29,2.29,0,0,1-2.65,1,2.37,2.37,0,0,1,0-4.54,2.4,2.4,0,0,1,2.73,1,.76.76,0,0,0,.49.35c3.12,0,6.25,0,9.37,0,0,0,0,0,.09-.06v-4.19h-.51c-2.92,0-5.83,0-8.75,0a.75.75,0,0,0-.74.4,2.3,2.3,0,0,1-2.67,1,2.36,2.36,0,0,1,0-4.51,2.3,2.3,0,0,1,2.68.94.86.86,0,0,0,.85.45h9.16V111.8H164c-1.75,0-3.5,0-5.25,0-.94,0-1.2-.25-1.2-1.18,0-1.6,0-3.21,0-4.81,0-.52-.15-.72-.67-.66a3.66,3.66,0,0,1-.81,0,1.55,1.55,0,0,0-1.61.7,2.28,2.28,0,0,1-3.42.1,2.36,2.36,0,0,1,.09-3.41,2.31,2.31,0,0,1,3.42.29,1.25,1.25,0,0,0,1.23.59c.79,0,1.58,0,2.37,0s1.13.3,1.13,1.14c0,1.58,0,3.16,0,4.75V110h5.44v-3.35c0-1.91,0-1.91,1.91-1.91h3.19a.54.54,0,0,0,.16,0V99.31h-5.39c-.93,0-1.2-.27-1.21-1.18s0-1.8,0-2.69a1,1,0,0,0-.37-.67A2.46,2.46,0,0,1,162,92a2.4,2.4,0,0,1,2.28-1.64,2.36,2.36,0,0,1,2.25,1.67,2.41,2.41,0,0,1-1,2.72.81.81,0,0,0-.36.5c0,.72,0,1.45,0,2.24.27,0,.49,0,.71,0h4.68c1,0,1.25.24,1.26,1.26v5.9h4.27c0-.21,0-.41,0-.61,0-2.86,0-5.71,0-8.56a.86.86,0,0,0-.45-.85,2.28,2.28,0,0,1-1-2.62,2.36,2.36,0,0,1,4.53,0,2.41,2.41,0,0,1-1,2.69.93.93,0,0,0-.4.59q0,4.56,0,9.12c0,.08,0,.16,0,.27h4.24v-1.08c0-2.7,0-5.41,0-8.12a.8.8,0,0,0-.41-.8,2.3,2.3,0,0,1-1-2.67A2.39,2.39,0,0,1,183,90.38a2.36,2.36,0,0,1,2.29,1.7,2.43,2.43,0,0,1-1,2.68.94.94,0,0,0-.39.6c0,3,0,6.09,0,9.13a1.31,1.31,0,0,0,0,.22h4.23c0-.21,0-.43,0-.64V98.75c0-.93.26-1.19,1.2-1.19,1.56,0,3.12,0,4.68,0h.76c0-.83,0-1.6,0-2.36,0-.18-.27-.37-.46-.51a2.37,2.37,0,0,1,1.22-4.31,2.36,2.36,0,0,1,2.32,1.47,2.32,2.32,0,0,1-.89,2.86.8.8,0,0,0-.42.8c0,.87,0,1.75,0,2.62s-.29,1.17-1.16,1.17H190c0,.22-.05.36-.05.5v4.94c1,0,2,0,2.91,0,2.51,0,2.43-.1,2.4,2.43,0,.93,0,1.86,0,2.83h5.4c0-.23,0-.45,0-.67v-4.68c0-1,.27-1.25,1.27-1.25.8,0,1.59,0,2.38,0a1,1,0,0,0,1-.49A2.3,2.3,0,0,1,208,102a2.38,2.38,0,0,1,0,4.51,2.33,2.33,0,0,1-2.72-1,.76.76,0,0,0-.75-.41c-.66,0-1.33,0-2,0,0,.28,0,.5,0,.72v4.69c0,1-.25,1.23-1.22,1.23-1.75,0-3.5,0-5.25,0h-.69v4.28l.56,0h8.63a.8.8,0,0,0,.8-.41,2.29,2.29,0,0,1,2.66-1,2.37,2.37,0,0,1,0,4.54,2.41,2.41,0,0,1-2.69-1c-.12-.17-.35-.39-.54-.39-3.12,0-6.24,0-9.41,0v4.23c.16,0,.33,0,.51,0h8.69a.81.81,0,0,0,.79-.43,2.32,2.32,0,0,1,2.68-.95,2.37,2.37,0,0,1,0,4.52,2.28,2.28,0,0,1-2.63-.92,1,1,0,0,0-1-.49c-2.79,0-5.58,0-8.37,0h-.71v4.31H201c1.35,0,1.49.15,1.49,1.53v5.12c.84,0,1.6,0,2.37,0,.18,0,.36-.29.5-.48a2.37,2.37,0,0,1,4.31,1.24,2.39,2.39,0,0,1-1.48,2.32,2.3,2.3,0,0,1-2.81-.85.92.92,0,0,0-.91-.47c-.88,0-1.75,0-2.63,0s-1.09-.31-1.1-1.11c0-1.58,0-3.17,0-4.75V130h-5.44v3.93c0,1.08-.24,1.32-1.32,1.32h-4v5.41l.7,0h4.74c.89,0,1.17.28,1.18,1.15s0,1.8,0,2.69a1,1,0,0,0,.36.68,2.47,2.47,0,0,1,1,2.74,2.41,2.41,0,0,1-2.26,1.66,2.36,2.36,0,0,1-2.26-1.65,2.31,2.31,0,0,1,1-2.71.75.75,0,0,0,.39-.76c0-.66,0-1.32,0-2.06h-5.25c-1.19,0-1.4-.2-1.4-1.37v-5.78h-4.3v.58q0,4.29,0,8.56a.86.86,0,0,0,.44.86,2.3,2.3,0,0,1,1,2.67,2.37,2.37,0,0,1-4.52,0,2.41,2.41,0,0,1,.94-2.7c.19-.14.42-.39.42-.59,0-3.08,0-6.16,0-9.24a.68.68,0,0,0,0-.15h-4.19c0,.19,0,.37,0,.55,0,2.87,0,5.75,0,8.62a.87.87,0,0,0,.45.85,2.3,2.3,0,0,1,.95,2.63,2.37,2.37,0,0,1-4.52.05,2.27,2.27,0,0,1,.88-2.64,1,1,0,0,0,.51-1C176.1,141.34,176.11,138.34,176.11,135.28Zm17.34-1.81V106.55H166.53v26.92Zm-29.3-40h.27c.16-.23.41-.44.46-.69a.5.5,0,0,0-.59-.61.84.84,0,0,0-.57.57C163.7,93,164,93.22,164.15,93.46Zm13.72-.76c-.44-.26-.7-.55-.94-.53s-.49.37-.53.6a.49.49,0,0,0,.62.57C177.27,93.29,177.47,93,177.87,92.7Zm5.13-.82c-.28.4-.6.66-.56.85a1,1,0,0,0,.6.61.5.5,0,0,0,.57-.63C183.55,92.46,183.29,92.26,183,91.88Zm12.54,1.58h.27c.17-.22.5-.47.47-.66s-.36-.45-.57-.67c-.2.19-.55.37-.57.58S195.39,93.21,195.54,93.46ZM152.62,105h.27c.16-.23.48-.49.44-.67a.92.92,0,0,0-.6-.6c-.16,0-.54.35-.56.56S152.45,104.76,152.62,105Zm55.33-.53v-.3c-.24-.16-.49-.46-.72-.45a.81.81,0,0,0-.57.56.79.79,0,0,0,.53.58C207.43,104.88,207.7,104.61,208,104.47Zm-55.26,13.41c.32-.41.6-.6.65-.85a.49.49,0,0,0-.56-.63.84.84,0,0,0-.6.52C152.15,117.16,152.43,117.43,152.69,117.88Zm55.43-.87c-.38-.29-.57-.56-.82-.62a.5.5,0,0,0-.64.56.94.94,0,0,0,.6.61C207.45,117.6,207.71,117.29,208.12,117Zm-54.66,6.18v-.29c-.24-.17-.49-.47-.73-.46a.78.78,0,0,0-.56.56c0,.2.31.56.52.59S153.2,123.34,153.46,123.19Zm53.66.54h.27c.16-.23.48-.5.43-.68s-.38-.43-.6-.64c-.19.2-.54.4-.55.61S207,123.49,207.12,123.73Zm-53.67,12.16v-.28c-.21-.17-.41-.43-.65-.49a.5.5,0,0,0-.65.55.89.89,0,0,0,.53.61C152.93,136.3,153.2,136,153.45,135.89Zm53.67.53h.26c.16-.23.42-.44.46-.69a.49.49,0,0,0-.6-.59c-.24.05-.57.36-.57.56S207,136.17,207.12,136.42ZM165,147.4l0-.28c-.24-.16-.48-.46-.71-.45s-.6.39-.57.55a1,1,0,0,0,.59.61C164.49,147.87,164.76,147.55,165,147.4Zm12.14-.87h-.27c-.16.23-.41.43-.46.68a.51.51,0,0,0,.58.62.89.89,0,0,0,.59-.57C177.58,147,177.28,146.78,177.12,146.53Zm6.76.71c-.39-.28-.64-.61-.83-.57s-.44.37-.65.58c.22.21.41.53.66.58S183.5,147.53,183.88,147.24Zm12.53.13v-.26c-.24-.16-.5-.45-.73-.44s-.5.35-.55.58a.49.49,0,0,0,.6.59C196,147.8,196.18,147.54,196.41,147.37Z M179.94,130.75H170.5c-1,0-1.25-.26-1.25-1.26v-19c0-1,.26-1.25,1.26-1.25h19c1,0,1.26.26,1.26,1.26v19c0,1-.27,1.26-1.26,1.26ZM171,129H189V111H171Z M187.75,118c0,.77,0,1.54,0,2.31s-.32,1-.85,1-.9-.35-.9-1c0-1.53,0-3.07,0-4.6,0-.64.32-1,.85-1s.89.36.9,1S187.75,117.18,187.75,118Z\",\n        widgetPages: [...defaultWidgetPages, 'view'],\n    },\n\n    shelf: {\n        primaryColor: '#fb7c4e',\n        svgPath:\n            <>\n                <rect x=\"358.42\" width=\"28\" height=\"71\" rx=\"10\" />\n                <rect x=\"0.42\" width=\"28\" height=\"71\" rx=\"10\" />\n                <rect y=\"216.99\" width=\"28\" height=\"71\" rx=\"10\" />\n                <rect x=\"358.42\" y=\"217\" width=\"28\" height=\"71\" rx=\"10\" />\n                <path d=\"M371.72,85.5h-5.89a20.71,20.71,0,0,1-20.71-20.7V36.7A10.7,10.7,0,0,0,334.42,26H52.84a10.7,10.7,0,0,0-10.7,10.7V64.8A20.71,20.71,0,0,1,21.43,85.5H15.12A10.7,10.7,0,0,0,4.42,96.2v95.58a10.7,10.7,0,0,0,10.7,10.71H21a20.71,20.71,0,0,1,20.71,20.7V251.3A10.7,10.7,0,0,0,52.42,262H334a10.7,10.7,0,0,0,10.7-10.7V223.2a20.71,20.71,0,0,1,20.71-20.7h6.31a10.7,10.7,0,0,0,10.7-10.7V96.2A10.7,10.7,0,0,0,371.72,85.5ZM166,177.5H100a10,10,0,0,1-8.19-15.74l33-47a10,10,0,0,1,16.37,0l33,47A10,10,0,0,1,166,177.5Zm120.82,0h-66a10,10,0,0,1-8.18-15.74l33-47a10,10,0,0,1,16.37,0l33,47A10,10,0,0,1,286.83,177.5Z\" />\n            </>\n\n\n    }\n\n}\nexport const DEVICE_CONSTANTS = {\n    HUMAN: \"human\",\n    MIR_100: 'MiR_100'\n}","import store from '../redux/store'\n\nimport logger from '../logger'\nconst log = logger.getLogger('Api')\n\n\nexport const getHeaders = () => {\n\n    let headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': store.getState().localReducer.idToken\n    }\n\n    return headers;\n}\n\nexport const handleError = (error) => {\n     // Error 😨\n     if (error.response) {\n        /*\n         * The request was made and the server responded with a\n         * status code that falls out of the range of 2xx\n         */\n\n        log.debug('error.response.data', error.response.data);\n        log.debug('error.response.status', error.response.status);\n        log.debug('error.response.headers', error.response.headers);\n    } else if (error.request) {\n        /*\n         * The request was made but no response was received, `error.request`\n         * is an instance of XMLHttpRequest in the browser and an instance\n         * of http.ClientRequest in Node.js\n         */\n        log.debug('error.request', error.request);\n    } else {\n        // Something happened in setting up the request and triggered an Error\n        log.debug('error.message', error.message);\n    }\n    log.debug('error', error);\n}","export const LOT_DRAGGING = 'LOT_DRAGGING'\nexport const LOT_DROPPING = 'LOT_DROPPING'\nexport const FIELD_DRAGGING = 'FIELD_DRAGGING'\nexport const COLUMN_HOVERING = 'COLUMN_HOVERING'\nexport const LOT_HOVERING = 'LOT_HOVERING'\nexport const SET_SIZE = \"SET_SIZE\"\nexport const DRAGGING_STATION_ID = \"DRAGGING_STATION_ID\"\nexport const DRAG_FROM_BIN = \"DRAG_FROM_BIN\"\nexport const LOT_DIV_HEIGHT = 'LOT_DIV_HEIGHT'\nexport const HIDE_CARD = 'HIDE_CARD'\n","import { TEMP_NEW_SCHEDULE_ID, DEFAULT_TASK_ID } from '../../constants/scheduler_constants';\n\nexport function timeout(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function mapArrayToObjById(arr) {\n    var obj = {};\n\n    for (let i = 0; i < arr.length; i++) {\n        obj[arr[i].id] = arr[i];\n    }\n\n    return obj;\n}\n\nexport const convertArrayToObject = (array, key) => {\n    const initialValue = {};\n    return array.reduce((obj, item) => {\n        return {\n            ...obj,\n            [item[key]]: item,\n        };\n    }, initialValue);\n};\n\nexport function clone_object(obj) {\n    if (null == obj || \"object\" != typeof obj) return obj;\n    var copy = obj.constructor();\n    for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\nexport function deepCopy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\n\nexport function timeString24HrToDate(timeString) {\n    if (timeString) {\n        var date = Date.parse(\"2019-01-01T\" + timeString);\n        var newDate = new Date();\n        newDate.setTime(date)\n        return newDate\n    } else {\n        return null;\n    }\n\n}\n\nexport function arraysEqual(_arr1, _arr2) {\n\n    if (!Array.isArray(_arr1) || !Array.isArray(_arr2) || _arr1.length !== _arr2.length)\n        return false;\n\n    var arr1 = _arr1.concat().sort();\n    var arr2 = _arr2.concat().sort();\n\n    for (var i = 0; i < arr1.length; i++) {\n\n        if (arr1[i] !== arr2[i])\n            return false;\n\n    }\n\n    return true;\n\n}\n\n// checks if x is a subset of y\nexport function objectIsSubet(x, y) {\n    console.log('inside objectIsSubet')\n    if (x === y) return true;\n    // if both x and y are null or undefined and exactly the same\n\n    // failure point 1\n    // if they are not strictly equal, they both need to be Objects\n    if (!(x instanceof Object) || !(y instanceof Object)) {\n        console.log('objectIsSubet: failed at 1')\n        return false;\n    }\n\n    // failure point 2\n    // they must have the exact same prototype chain, the closest we can do is\n    // test there constructor.\n    if (x.constructor !== y.constructor) {\n        console.log('objectIsSubet: failed at 2')\n        return false;\n    }\n\n\n    for (var p in x) {\n        console.log('var p in x', x)\n        if (!x.hasOwnProperty(p)) continue;\n        // other properties were tested using x.constructor === y.constructor\n\n        // failure point 3\n        // allows to compare x[ p ] and y[ p ] when set to undefined\n        if (!y.hasOwnProperty(p)) {\n            console.log('objectIsSubet: failed at 3')\n            return false;\n        }\n\n\n        if (x[p] === y[p]) continue;\n        // if they have the same strict value or identity then they are equal\n\n        // failure point 4\n        if (typeof (x[p]) !== \"object\") {\n            console.log('objectIsSubet: failure point 4:', p)\n            console.log('objectIsSubet: failure point 4:', x[p])\n            console.log('objectIsSubet: failure point 4:', typeof (x[p]))\n            console.log('objectIsSubet: failed at 4')\n            return false;\n        }\n        // Numbers, Strings, Functions, Booleans must be strictly equal\n\n        // failure point 5\n        if (!objectIsSubet(x[p], y[p])) {\n            console.log('objectIsSubet: failed at 5')\n            return false;\n        }\n        // Objects and Arrays must be tested recursively\n    }\n\n    //for ( p in y ) {\n    //if ( y.hasOwnProperty( p ) && ! x.hasOwnProperty( p ) ) return false;\n    // allows x[ p ] to be set to undefined\n    //}\n    return true;\n}\n\n\n\nexport function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nexport function LightenDarkenColor(col, amt) {\n    var usePound = false;\n    if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n\n    var num = parseInt(col, 16);\n\n    var r = (num >> 16) + amt;\n\n    if (r > 255) r = 255;\n    else if (r < 0) r = 0;\n\n    var b = ((num >> 8) & 0x00FF) + amt;\n\n    if (b > 255) b = 255;\n    else if (b < 0) b = 0;\n\n    var g = (num & 0x0000FF) + amt;\n\n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n\n    return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nexport function getIsEquivalent(a, b) {\n    // Create arrays of property names\n    if (typeof a !== 'object' || typeof b !== 'object' || a === null || b === null) {\n        return a === b;\n    }\n\n    var aProps = Object.getOwnPropertyNames(a);\n    var bProps = Object.getOwnPropertyNames(b);\n\n    // If number of properties is different,\n    // objects are not equivalent\n    if (aProps.length != bProps.length) {\n        return false;\n    }\n\n    for (var i = 0; i < aProps.length; i++) {\n        var propName = aProps[i];\n\n        // If values of same property are not equal,\n        // objects are not equivalent\n        if (!getIsEquivalent(a[propName], b[propName])) {\n            return false;\n        }\n    }\n\n    // If we made it this far, objects\n    // are considered equivalent\n    return true;\n}\n\n// export const doubleArrObjEquiv = (a,b) => {\n//     let isEquiv = true\n//\n//     for(const row of a) {\n//         for(const item of row) {\n//\n//             for()\n//\n//         }\n//     }\n// }\n\nexport function randomHash() {\n    var hash = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < 16; i++) {\n        hash += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return hash;\n}\n\nexport const upperCaseFirstLetterInString = (str) => {\n    return str\n        .toLowerCase()\n        .split(' ')\n        .map(function (word) {\n            return word[0].toUpperCase() + word.substr(1);\n        })\n        .join(' ');\n}\n\n// Returns name of day ('Mon', 'Tues', etc...)\nexport const getDateName = (date) => {\n    return date.toLocaleDateString(undefined, { weekday: 'short' });\n}\n\n// Returns date from string, this assumes the date is the first word in the string\nexport const getDateFromString = (str) => {\n    const dateStr = deepCopy(str).replace(/ .*/, '').split('-');\n    return new Date(dateStr[0], dateStr[1] - 1, dateStr[2]);\n}\n\nexport const setAcceleratingInterval = (callback, factor, initialRate, times, minRate, timeoutRef) => {\n    let internalCallback = function(tick, counter) {\n\n        return () => {\n            if (--tick >= 0) {\n                const newRate = (initialRate) - (++counter * factor)\n                timeoutRef.current && clearTimeout(timeoutRef.current)\n                timeoutRef.current = setTimeout(internalCallback, (newRate > minRate) ? newRate : minRate);\n                callback();\n            }\n\n        }\n    }(times, 0);\n\n    timeoutRef.current = setTimeout(internalCallback, factor)\n}","import { denormalize, schema } from 'normalizr';\nimport { uuidv4 } from '../methods/utils/utils';\n// condition schema - NOT CURRENTLY USED - condtions should probably have an id attribute / some unique identifier...\n\n\n// schedule schema\nexport const dashboardSchema = new schema.Entity(\n    // key\n    'dashboards',\n    // definition\n    {\n        //condition: conditionSchema\n    },\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value._id.$oid\n        },\n\n    },\n\n);\n\n// schema for list of schedules\nexport const dashboardsSchema = [dashboardSchema]\n\n// schedule schema\nexport const deviceSchema = new schema.Entity(\n    // key\n    'devices',\n    // definition\n    {\n        //condition: conditionSchema\n    },\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value._id\n        },\n\n    },\n\n);\n\n// schema for list of schedules\nexport const devicesSchema = [deviceSchema]\n\nexport const locationsSchema = new schema.Entity(\n    // key\n    'locations',\n    // definition\n    {},\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value._id.$oid\n        }\n    }\n)\n\n// Schema for events\nexport const eventsSchema = new schema.Entity(\n    // key\n    'events',\n    // definition\n    {},\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value._id.$oid\n        }\n    }\n)\n\n\n// process schema\nexport const processSchema = new schema.Entity(\n    // key\n    'processes',\n    // definition\n    {\n        //condition: conditionSchema\n    },\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value._id\n        },\n\n    },\n\n);\n\nexport const processesSchema = [processSchema]\n\n\n// sounds schema\nexport const soundSchema = new schema.Entity(\n    // key\n    'sounds',\n    // definition\n    {\n        //condition: conditionSchema\n    },\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value._id\n        },\n\n    },\n\n);\n\nexport const soundsSchema = [soundSchema]\n\n\n// sounds schema\nexport const taskAnalysisSchema = new schema.Entity(\n    // key\n    'taskAnalysis',\n    // definition\n    {\n        //condition: conditionSchema\n    },\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value.task_id\n        },\n\n    },\n\n);\n\nexport const tasksAnalysisSchema = [taskAnalysisSchema]\n\n\n// positions schema\nexport const positionSchema = new schema.Entity(\n    // key\n    'positions',\n    // definition\n    {\n        //condition: conditionSchema\n    },\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value._id\n        },\n\n    },\n\n);\n\nexport const positionsSchema = [positionSchema]\n\n\n// positions schema\nexport const stationSchema = new schema.Entity(\n    // key\n    'stations',\n    // definition\n    {},\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value._id\n        },\n\n    },\n\n);\n\nexport const stationsSchema = [stationSchema]\n\n// status schema\nexport const statusSchema = new schema.Entity(\n    // key\n    'status',\n    // definition\n    {\n        //condition: conditionSchema\n    },\n    // options\n    {\n        idAttribute: (value, parent, key) => {\n            return value._id.$oid\n        },\n\n        // processStrategy\n        processStrategy: (value, parent, key) => {\n            return value\n        }\n    },\n\n);\n\n// schema for list of status\nexport const statusesSchema = [statusSchema]","export const GET_TOUCH_EVENTS = 'GET_TOUCH_EVENTS'\nexport const GET_TOUCH_EVENTS_STARTED = 'GET_TOUCH_EVENTS_STARTED'\nexport const GET_TOUCH_EVENTS_SUCCESS = 'GET_TOUCH_EVENTS_SUCCESS'\nexport const GET_TOUCH_EVENTS_FAILURE = 'GET_TOUCH_EVENTS_FAILURE'\n\nexport const GET_LOT_TOUCH_EVENTS = 'GET_LOT_TOUCH_EVENTS'\nexport const GET_LOT_TOUCH_EVENTS_STARTED = 'GET_LOT_TOUCH_EVENTS_STARTED'\nexport const GET_LOT_TOUCH_EVENTS_SUCCESS = 'GET_LOT_TOUCH_EVENTS_SUCCESS'\nexport const GET_LOT_TOUCH_EVENTS_FAILURE = 'GET_LOT_TOUCH_EVENTS_FAILURE'\n\nexport const POST_TOUCH_EVENTS = 'POST_TOUCH_EVENTS'\nexport const POST_TOUCH_EVENTS_STARTED = 'POST_TOUCH_EVENTS_STARTED'\nexport const POST_TOUCH_EVENTS_SUCCESS = 'POST_TOUCH_EVENTS_SUCCESS'\nexport const POST_TOUCH_EVENTS_FAILURE = 'POST_TOUCH_EVENTS_FAILURE'\n\nexport const PUT_TOUCH_EVENTS = 'PUT_TOUCH_EVENTS'\nexport const PUT_TOUCH_EVENTS_STARTED = 'PUT_TOUCH_EVENTS_STARTED'\nexport const PUT_TOUCH_EVENTS_SUCCESS = 'PUT_TOUCH_EVENTS_SUCCESS'\nexport const PUT_TOUCH_EVENTS_FAILURE = 'PUT_TOUCH_EVENTS_FAILURE'\n\nexport const DELETE_TOUCH_EVENTS = 'DELETE_TOUCH_EVENTS'\nexport const DELETE_TOUCH_EVENTS_STARTED = 'DELETE_TOUCH_EVENTS_STARTED'\nexport const DELETE_TOUCH_EVENTS_SUCCESS = 'DELETE_TOUCH_EVENTS_SUCCESS'\nexport const DELETE_TOUCH_EVENTS_FAILURE = 'DELETE_TOUCH_EVENTS_FAILURE'\n","import { normalize, schema } from 'normalizr';\n\nimport {\n    GET_STATIONS_STARTED,\n    GET_STATIONS_SUCCESS,\n    GET_STATIONS_FAILURE,\n\n    POST_STATION_STARTED,\n    POST_STATION_SUCCESS,\n    POST_STATION_FAILURE,\n\n    PUT_STATION_STARTED,\n    PUT_STATION_SUCCESS,\n    PUT_STATION_FAILURE,\n\n    DELETE_STATION_STARTED,\n    DELETE_STATION_SUCCESS,\n    DELETE_STATION_FAILURE,\n\n    UPDATE_STATION_CYCLE_TIME_STARTED,\n    UPDATE_STATION_CYCLE_TIME_SUCCESS,\n    UPDATE_STATION_CYCLE_TIME_FAILURE,\n\n    ADD_STATION,\n    UPDATE_STATION,\n    UPDATE_STATIONS,\n    REMOVE_STATION,\n    SET_STATION_ATTRIBUTES,\n    SET_SELECTED_STATION,\n    EDITING_STATION,\n} from '../types/stations_types'\n\nimport uuid from 'uuid';\n\n// Import External Actions\nimport { deleteTask } from './tasks_actions'\nimport { deletePosition, putPosition, postPosition } from './positions_actions'\nimport { deleteDashboard, postDashboard } from './dashboards_actions'\n\n// Import utils\nimport { deepCopy } from '../../methods/utils/utils';\n\n// Import Schema\nimport { stationsSchema } from '../../normalizr/schema'\n\n// Import API\nimport * as api from '../../api/stations_api'\n\n// Import Store\nimport store from '../store/index'\n\n// get\n// ******************************\nexport const getStations = () => {\n    return async dispatch => {\n\n        function onStart() {\n            dispatch({ type: GET_STATIONS_STARTED });\n        }\n        function onSuccess(stations) {\n            dispatch({ type: GET_STATIONS_SUCCESS, payload: stations });\n            return stations;\n        }\n        function onError(error) {\n            dispatch({ type: GET_STATIONS_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            const stations = await api.getStations();\n\n            const normalizedStations = !!normalize(stations, stationsSchema)?.entities?.stations ? normalize(stations, stationsSchema)?.entities?.stations : {}\n\n            return onSuccess(normalizedStations);\n        } catch (error) {\n            return onError(error);\n        }\n    };\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// post\n// ******************************\nexport const postStation = (station) => {\n    return async dispatch => {\n\n        function onStart() {\n            dispatch({ type: POST_STATION_STARTED });\n        }\n        function onSuccess(station) {\n            dispatch({ type: POST_STATION_SUCCESS, payload: station });\n            return station;\n        }\n        function onError(error) {\n            dispatch({ type: POST_STATION_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            let stationCopy = deepCopy(station)\n            stationCopy = await dispatch(onPostStation(stationCopy))\n            delete stationCopy.temp\n            delete stationCopy.new\n            const newStation = await api.postStation(stationCopy);\n            return onSuccess(newStation);\n        } catch (error) {\n            return onError(error);\n        }\n    };\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// put\n// ******************************\nexport const putStation = (station) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: PUT_STATION_STARTED });\n        }\n        function onSuccess(station) {\n            dispatch({ type: PUT_STATION_SUCCESS, payload: station });\n            return station;\n        }\n        function onError(error) {\n            dispatch({ type: PUT_STATION_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            let stationCopy = deepCopy(station)\n            await dispatch(onSaveChildren())\n            delete stationCopy.temp\n            const updateStation = await api.putStation(stationCopy, stationCopy._id);\n            return onSuccess(updateStation)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// put\n// ******************************\nexport const putStationWithoutSavingChildren = (station) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: PUT_STATION_STARTED });\n        }\n        function onSuccess(station) {\n            dispatch({ type: PUT_STATION_SUCCESS, payload: station });\n            return station;\n        }\n        function onError(error) {\n            dispatch({ type: PUT_STATION_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            let stationCopy = deepCopy(station)\n            delete stationCopy.temp\n            const updateStation = await api.putStation(stationCopy, stationCopy._id);\n            return onSuccess(updateStation)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// delete\n// ******************************\nexport const deleteStation = (ID) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: DELETE_STATION_STARTED });\n        }\n        function onSuccess(id) {\n            dispatch({ type: DELETE_STATION_SUCCESS, payload: id });\n            return id;\n        }\n        function onError(error) {\n            dispatch({ type: DELETE_STATION_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            const station = dispatch(onDeleteStation(ID))\n            const removeStation = await api.deleteStation(ID);\n            return onSuccess(ID)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nexport const addStation = (station) => {\n    return { type: ADD_STATION, payload: station }\n}\n\nexport const updateStation = (station) => {\n    return { type: UPDATE_STATION, payload: station }\n}\n\nexport const updateStations = (stations, selectedStation, d3) => {\n    return { type: UPDATE_STATIONS, payload: { stations, selectedStation, d3 } }\n}\n\nexport const removeStation = (id) => {\n    // Have to use dispatch here because of onRemoveStationFunction\n    return async dispatch => {\n\n        const updatedId = await dispatch(onRemoveStation(id))\n        dispatch({ type: REMOVE_STATION, payload: updatedId })\n    }\n}\n\nexport const setStationAttributes = (id, attr) => {\n    return { type: SET_STATION_ATTRIBUTES, payload: { id, attr } }\n}\n\nexport const setSelectedStation = (station) => {\n    return { type: SET_SELECTED_STATION, payload: station }\n}\n\nexport const setEditingStation = (bool) => {\n    return { type: EDITING_STATION, payload: bool }\n}\n\n\n/**\n * Removes Station that is not on the backend yet\n * If the station has children, it deletes those as well\n * @param {*} id\n */\nconst onRemoveStation = (id) => {\n    const stationsState = store.getState().stationsReducer\n    let station = !!stationsState.selectedStation ? stationsState.selectedStation : stationsState.stations[id]\n\n    return async dispatch => {\n\n        if (!!station.children) {\n\n            // TODO: Fix this, in positions, it'll put the station to tell it's deleted, but the station is about to be deleted, so no need to put\n            station.children.forEach(async position => {\n\n                // Passes in true to tell that the deleted postion's associated station is being deleted too\n                // This way, it wont update the station\n                await dispatch(deletePosition(position, true))\n            })\n        }\n        return station._id\n    }\n}\n\n\nconst onDeleteStation = (id) => {\n\n    return async dispatch => {\n\n        const stationsState = store.getState().stationsReducer\n        const positionsState = store.getState().positionsReducer\n        const tasksState = store.getState().tasksReducer\n\n        let station = !!stationsState.selectedStation ? stationsState.selectedStation : stationsState.stations[id]\n\n        // If the station has children, delete them\n        if (!!station.children) {\n\n            // TODO: Fix this, in positions, it'll put the station to tell it's deleted, but the station is about to be deleted, so no need to put\n            station.children.forEach(async position => {\n\n                // Passes in true to tell that the deleted postion's associated station is being deleted too\n                // This way, it wont update the station\n                await dispatch(deletePosition(position, true))\n            })\n        }\n\n\n        // If the position is new, just remove it from the local station\n        // Since the position is new, it does not exist in the backend and there can't be any associated tasks\n        if (!!station.new) {\n            dispatch(removeStation(station._id))\n            return null\n        }\n\n        // Else delete in backend and delete any associated tasks\n        else {\n\n            // Delete associated dashboards\n            station.dashboards.forEach(async dashboard => {\n                await dispatch(deleteDashboard(dashboard))\n            })\n\n            // // Sees if any tasks are associated with the position and delete them\n            // const tasks = tasksState.tasks\n            // Object.values(tasks).filter(task => {\n            //     return task.load.station === station._id || task.unload.station === station._id\n            // }).forEach(async relevantTask => {\n            //     await dispatch(deleteTask(relevantTask._id))\n            // })\n\n\n        }\n        return station\n    }\n}\n\nconst onPostStation = (station) => {\n    return async dispatch => {\n        // Add dashboard\n        let defaultDashboard = {\n            name: \"\",\n            locked: false,\n            buttons: [],\n            station: station._id\n        }\n\n        //// Now post the dashboard, and on return tie that dashboard to location.dashboards and put the location\n        const postedDashboard = await dispatch(postDashboard(defaultDashboard))\n        station.dashboards = [postedDashboard._id.$oid]\n\n        // Save Children\n        await dispatch(onSaveChildren())\n\n        return station\n    }\n}\n\nconst onSaveChildren = () => {\n\n    return async dispatch => {\n        const positionsState = store.getState().positionsReducer\n        const selectedStationChildrenCopy = positionsState.selectedStationChildrenCopy\n\n        // If there children Children Position, save them\n        if (!!selectedStationChildrenCopy) {\n            Object.values(selectedStationChildrenCopy).map(async (child, ind) => {\n                // Post\n                if (!!child.new) {\n                    await dispatch(postPosition(child))\n\n                }\n                // Put\n                else {\n                    await dispatch(putPosition(child))\n\n                }\n            })\n        }\n\n        return\n    }\n}\n","export const SET_MODE = 'SET_MODE'\nexport const SET_ACTION = 'SET_ACTION'\nexport const SET_WIDTH = 'SET_WIDTH'\nexport const SET_OPEN = 'SET_OPEN'\nexport const PAGE_DATA_CHANGED = 'PAGE_DATA_CHANGED'\nexport const SET_CONFIRM_DELETE = 'SET_CONFIRM_DELETE'\nexport const SHOW_LOT_SCAN_MODAL = \"SHOW_LOT_SCAN_MODAL\"\n","import {DEVICE_CONSTANTS} from \"./device_constants\";\nimport uuid from 'uuid'\n\nexport const CUSTOM_TASK_ID = \"custom_task\"\nexport const CUSTOM_CHARGE_TASK_ID = \"custom_task_charge\"\nexport const CUSTOM_IDLE_TASK_ID = \"custom_task_idle\"\nexport const CUSTOM_IDLE_TASK_NAME = \"Send to Idle Location\"\n\n\n\nexport const ROUTE_TYPES = {\n    PUSH: \"push\",\n    PULL: \"pull\"\n}\n\n\n/*\n* NOTE: DO NOT GENERATE ID HERE, OTHERWISE IT WILL ONLY BE GENERATED ONCE ON LOAD AND NEW TASKS WILL ALL HAVE THE SAME ID\n* */\n// export const defaultTask = {\n//     name: '',\n//     obj: null,\n//     type: ROUTE_TYPES.PUSH,\n//     quantity: 1,\n//     device_types: [],\n//     handoff: true,\n//     track_quantity: true,\n//     map_id: null,\n//     new: true,\n//     processes: [],\n// }\n\nexport const defaultTask = {\n    processId: null,\n    name: '',\n    handoff: true,\n    type: ROUTE_TYPES.PUSH,\n\n    part: null,\n    inOutRatio: 1,\n    \n    load: null,\n    unload: null,\n    timeout: '09:00',\n\n    isNew: true\n}","import {\n    GET_STATIONS_STARTED,\n    GET_STATIONS_SUCCESS,\n    GET_STATIONS_FAILURE,\n\n    POST_STATION_STARTED,\n    POST_STATION_SUCCESS,\n    POST_STATION_FAILURE,\n\n    PUT_STATION_STARTED,\n    PUT_STATION_SUCCESS,\n    PUT_STATION_FAILURE,\n\n    DELETE_STATION_STARTED,\n    DELETE_STATION_SUCCESS,\n    DELETE_STATION_FAILURE,\n\n    UPDATE_STATION_CYCLE_TIME_STARTED,\n    UPDATE_STATION_CYCLE_TIME_SUCCESS,\n    UPDATE_STATION_CYCLE_TIME_FAILURE,\n\n    ADD_STATION,\n    SET_SELECTED_STATION,\n    UPDATE_STATION,\n    SET_STATION_ATTRIBUTES,\n    UPDATE_STATIONS,\n    REMOVE_STATION,\n    EDITING_STATION\n\n} from '../types/stations_types'\n\n// Import Utils\nimport { deepCopy } from '../../methods/utils/utils';\nimport { compareExistingVsIncomingLocations } from '../../methods/utils/locations_utils'\nimport {isEmpty} from \"../../methods/utils/object_utils\";\n\nconst defaultState = {\n    stations: {},\n\n    selectedStation: null,\n    editingStation: false,\n\n    d3: {},\n\n    error: {},\n    pending: false,\n}\n\nexport default function stationsReducer(state = defaultState, action) {\n    let stationsCopy\n    /**\n     * Updates the state of stations to include the incoming payload station.\n     * If the payload is the current selected Station, then update that as well\n     * @param {object} station\n     */\n    const onUpdateStation = (station) => {\n        return {\n            ...state,\n            stations: {\n                ...state.stations,\n                [station._id]: station\n            },\n            // If the post station is the selectedStation, then update selected station\n            selectedStation: (state.selectedStation !== null && state.selectedStation._id === station._id) ? station : state.selectedStation,\n            pending: false,\n        }\n    }\n\n    switch (action.type) {\n\n        // ======================================== //\n        //                                          //\n        //                UTILS                     //\n        //                                          //\n        // ======================================== //\n\n        // Adds station to front-end without adding it to the backend\n        case ADD_STATION:\n            return onUpdateStation(action.payload)\n\n        // Sets Stations Attributes\n        case SET_STATION_ATTRIBUTES:\n            // If there is a selected station and the payload is that station, then edit the selected station and dont edit the station in state\n            if (!!state.selectedStation && action.payload.id === state.selectedStation._id) {\n                return {\n                    ...state,\n                    selectedStation: {\n                        ...state.selectedStation,\n                        ...action.payload.attr\n                    }\n                }\n            }\n\n            else {\n                let updatedStation = deepCopy(state.stations[action.payload.id])\n                Object.assign(updatedStation, action.payload.attr)\n                return onUpdateStation(updatedStation)\n            }\n\n        // Sets a selected Station\n        case SET_SELECTED_STATION:\n            return {\n                ...state,\n                selectedStation: action.payload\n            }\n\n        // Updates a station locally on the front-end\n        case UPDATE_STATION:\n            return onUpdateStation(action.payload)\n\n        // Upates stations locally on the front-end\n        case UPDATE_STATIONS:\n            return {\n                ...state,\n                stations: action.payload.stations,\n                selectedStation: !!action.payload.selectedStation ? action.payload.selectedStation : state.selectedStation,\n                d3: !!action.payload.d3 ? action.payload.d3 : state.d3\n            }\n\n        case EDITING_STATION:\n            return {\n                ...state,\n                editingStation: action.payload\n            }\n\n        case REMOVE_STATION:\n            stationsCopy = deepCopy(state.stations)\n            delete stationsCopy[action.payload]\n            return {\n                ...state,\n                stations: stationsCopy\n            }\n\n        // ========== GET ========== //\n        case GET_STATIONS_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case GET_STATIONS_SUCCESS:\n            if(isEmpty(state.d3)) {\n                return {\n                    ...state,\n                    stations: {...action.payload},\n                    pending: false\n                }\n            }\n\n            else {\n                const parsedStations = compareExistingVsIncomingLocations(deepCopy(action.payload), deepCopy(state.stations), state.d3)\n\n                return {\n                    ...state,\n                    stations: parsedStations,\n                    pending: false\n                }\n            }\n\n\n        case GET_STATIONS_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ========== POST ========== //\n        case POST_STATION_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case POST_STATION_SUCCESS:\n            return onUpdateStation(action.payload)\n\n        case POST_STATION_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ========== PUT ========== //\n        case PUT_STATION_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case PUT_STATION_SUCCESS:\n            return onUpdateStation(action.payload)\n\n        case PUT_STATION_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ========== DELETE ========== //\n        case DELETE_STATION_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case DELETE_STATION_SUCCESS:\n            stationsCopy = deepCopy(state.stations)\n            delete stationsCopy[action.payload]\n            return {\n                ...state,\n                stations: stationsCopy,\n                selectedStation: null,\n                pending: false,\n                hello: true,\n            }\n\n        case DELETE_STATION_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        default:\n            return state\n    }\n\n}\n","import {\n    GET_POSITIONS_STARTED,\n    GET_POSITIONS_SUCCESS,\n    GET_POSITIONS_FAILURE,\n\n    POST_POSITION_STARTED,\n    POST_POSITION_SUCCESS,\n    POST_POSITION_FAILURE,\n\n    PUT_POSITION_STARTED,\n    PUT_POSITION_SUCCESS,\n    PUT_POSITION_FAILURE,\n\n    DELETE_POSITION_STARTED,\n    DELETE_POSITION_SUCCESS,\n    DELETE_POSITION_FAILURE,\n\n    ADD_POSITION,\n    SET_SELECTED_POSITION,\n    UPDATE_POSITION,\n    SET_POSITION_ATTRIBUTES,\n    UPDATE_POSITIONS,\n    REMOVE_POSITION,\n    EDITING_POSITION,\n    SET_SELECTED_STATION_CHILDREN_COPY\n\n} from '../types/positions_types'\n\n// Import Utils\nimport { deepCopy } from '../../methods/utils/utils';\nimport { compareExistingVsIncomingLocations } from '../../methods/utils/locations_utils'\n\nconst defaultState = {\n    positions: {},\n\n    selectedPosition: null,\n\n    editingPosition: false,\n    selectedStationChildrenCopy: null,\n\n    d3: {},\n\n    error: {},\n    pending: false,\n}\n\nconst positionsReducer = (state = defaultState, action) => {\n    let positionsCopy\n\n    /**\n     * Updates the state of positions to include the incoming payload position.\n     * If the payload is the current selected Position, then update that as well\n     * @param {object} position \n     */\n    const onUpdatePosition = (position) => {\n        return {\n            ...state,\n            positions: {\n                ...state.positions,\n                [position._id]: position\n            },\n            // If the post position is the selectedPosition, then update selected position\n            selectedPosition: state.selectedPosition !== null && state.selectedPosition._id === position._id && position,\n            pending: false,\n        }\n    }\n\n    switch (action.type) {\n\n        // ========== UTILS ========== //\n\n        // Adds position to front-end without adding it to the backend\n        case ADD_POSITION:\n            return onUpdatePosition(action.payload)\n\n        // Sets Positions Attributes\n        case SET_POSITION_ATTRIBUTES:\n            // If editing a child position then update the position in the childrencopy\n            if (!!state.selectedStationChildrenCopy && action.payload.id in state.selectedStationChildrenCopy) {\n                return {\n                    ...state,\n                    selectedStationChildrenCopy: {\n                        ...state.selectedStationChildrenCopy,\n                        [action.payload.id]: {\n                            ...state.selectedStationChildrenCopy[action.payload.id],\n                            ...action.payload.attr,\n                        }\n                    },\n                }\n            }\n\n            // If there is a selected station and the payload is that station, then edit the selected station and dont edit the station in state\n            else if (!!state.selectedPosition && action.payload.id === state.selectedPosition._id) {\n                return {\n                    ...state,\n                    selectedPosition: {\n                        ...state.selectedPosition,\n                        ...action.payload.attr\n                    }\n                }\n            }\n\n            else {\n                let updatedPosition = state.positions[action.payload.id]\n                Object.assign(updatedPosition, action.payload.attr)\n                return onUpdatePosition(updatedPosition)\n            }\n\n        // Sets a selected Position\n        case SET_SELECTED_POSITION:\n            return {\n                ...state,\n                selectedPosition: action.payload\n            }\n\n        // Updates a position locally on the front-end\n        case UPDATE_POSITION:\n            return onUpdatePosition(action.payload)\n\n        // Upates positions locally on the front-end\n        case UPDATE_POSITIONS:\n            // TODO Comment\n            return {\n                ...state,\n                positions: action.payload.positions,\n                selectedPosition: !!action.payload.selectedPosition ? action.payload.selectedPosition : state.selectedPosition,\n                selectedStationChildrenCopy: !!action.payload.childrenPositions ? action.payload.childrenPositions : state.selectedStationChildrenCopy,\n                d3: !!action.payload.d3 ? action.payload.d3 : state.d3\n            }\n\n        case EDITING_POSITION:\n            return {\n                ...state,\n                editingPosition: action.payload\n            }\n\n        case SET_SELECTED_STATION_CHILDREN_COPY:\n            return {\n                ...state,\n                selectedStationChildrenCopy: action.payload\n            }\n\n        case REMOVE_POSITION:\n            positionsCopy = deepCopy(state.positions)\n            delete positionsCopy[action.payload]\n            // positionsCopy.delete(action.payload)\n            return {\n                ...state,\n                positions: positionsCopy\n            }\n\n        // ========== GET ========== //\n        case GET_POSITIONS_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case GET_POSITIONS_SUCCESS:\n\n            const parsedPositions = compareExistingVsIncomingLocations(deepCopy(action.payload), deepCopy(state.positions), state.d3)\n\n            return {\n                ...state,\n                positions: parsedPositions,\n                pending: false\n            }\n\n        case GET_POSITIONS_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ========== POST ========== //\n        case POST_POSITION_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case POST_POSITION_SUCCESS:\n            return onUpdatePosition(action.payload)\n\n        case POST_POSITION_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ========== PUT ========== //\n        case PUT_POSITION_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case PUT_POSITION_SUCCESS:\n            if (action.payload.change_key === 'deleted') {\n                return state\n            }\n            return onUpdatePosition(action.payload)\n\n        case PUT_POSITION_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ========== DELETE ========== //\n        case DELETE_POSITION_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case DELETE_POSITION_SUCCESS:\n            positionsCopy = deepCopy(state.positions)\n            delete positionsCopy[action.payload]\n            return {\n                ...state,\n                positions: positionsCopy,\n                selectedPosition: null,\n                pending: false,\n            }\n\n        case DELETE_POSITION_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        default:\n            return state\n    }\n\n}\n\nexport default positionsReducer","import {\n    GET_DASHBOARDS,\n    GET_DASHBOARDS_STARTED,\n    GET_DASHBOARDS_SUCCESS,\n    GET_DASHBOARDS_FAILURE,\n\n    POST_DASHBOARD,\n    POST_DASHBOARD_STARTED,\n    POST_DASHBOARD_SUCCESS,\n    POST_DASHBOARD_FAILURE,\n\n    PUT_DASHBOARD,\n    PUT_DASHBOARD_STARTED,\n    PUT_DASHBOARD_SUCCESS,\n    PUT_DASHBOARD_FAILURE,\n\n    DELETE_DASHBOARD,\n    DELETE_DASHBOARD_STARTED,\n    DELETE_DASHBOARD_SUCCESS,\n    DELETE_DASHBOARD_FAILURE,\n\n    DASHBOARD_OPEN,\n} from '../types/dashboards_types'\n\nimport { deepCopy } from '../../methods/utils/utils';\nimport {SET} from \"../types/prefixes\";\nimport {DASHBOARD} from \"../types/data_types\";\nimport {FINISH_ENABLED, KICK_OFF_ENABLED} from \"../types/suffixes\";\n\n\nconst defaultState = {\n\n    dashboards: null,\n    kickOffEnabledDashboards: {}, // key = dashboard id - value = list of processes where the processes first station is the same as the dashboard's station\n    finishEnabledDashboards: {}, // key = dashboard id - value = list of processes where the processes first station is the same as the dashboard's station\n\n    error: {},\n    pending: false,\n\n    dashboardOpen: false,\n};\n\nexport default function dashboardsReducer(state = defaultState, action) {\n    let dashboardsCopy = {}\n\n    switch (action.type) {\n\n        case SET + DASHBOARD + KICK_OFF_ENABLED: {\n            const {\n                dashboardId,\n                kickOffEnabled\n            } = action.payload\n\n            return {\n                ...state,\n                kickOffEnabledDashboards: {...state.kickOffEnabledDashboards, [dashboardId]: kickOffEnabled},\n            }\n        }\n\n\n        case SET + DASHBOARD + FINISH_ENABLED: {\n            const {\n                dashboardId,\n                finishEnabled\n            } = action.payload\n\n            return {\n                ...state,\n                finishEnabledDashboards: {...state.finishEnabledDashboards, [dashboardId]: finishEnabled},\n            }\n        }\n\n\n\n        case DASHBOARD_OPEN:\n            return {\n                ...state,\n                dashboardOpen: action.payload\n            }\n\n        // ======================================== //\n        //                                          //\n        //              Get Dashboards              //\n        //                                          //\n        // ======================================== //\n        case GET_DASHBOARDS:\n            break;\n\n        case GET_DASHBOARDS_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case GET_DASHBOARDS_SUCCESS:\n            dashboardsCopy = deepCopy(action.payload)\n            return {\n                ...state,\n                dashboards: action.payload,\n                pending: false\n            }\n\n        case GET_DASHBOARDS_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ======================================== //\n        //                                          //\n        //             Post Dashboards               //\n        //                                          //\n        // ======================================== //\n\n        case POST_DASHBOARD:\n            break;\n\n        case POST_DASHBOARD_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case POST_DASHBOARD_SUCCESS:\n            return {\n                ...state,\n                dashboards: {...state.dashboards, [action.payload._id.$oid]: action.payload},\n                pending: false,\n\n            }\n\n        case POST_DASHBOARD_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ======================================== //\n        //                                          //\n        //             Put Dashboards                //\n        //                                          //\n        // ======================================== //\n\n        case PUT_DASHBOARD:\n            break;\n\n        case PUT_DASHBOARD_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case PUT_DASHBOARD_SUCCESS:\n\n            return {\n                ...state,\n                dashboards: {...state.dashboards, [action.payload._id.$oid]: action.payload},\n            }\n\n        case PUT_DASHBOARD_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case DELETE_DASHBOARD:\n            break;\n\n        case DELETE_DASHBOARD_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case DELETE_DASHBOARD_SUCCESS:\n            dashboardsCopy = deepCopy(state.dashboards)\n\n            delete dashboardsCopy[action.payload]\n\n            return {\n                ...state,\n                dashboards: dashboardsCopy\n            }\n\n        case DELETE_DASHBOARD_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n\n        default:\n            return state;\n    }\n}\n","import {\n    GET_TASKS,\n    GET_TASKS_STARTED,\n    GET_TASKS_SUCCESS,\n    GET_TASKS_FAILURE,\n\n    // GET_TASK,\n    // GET_TASK_STARTED,\n    // GET_TASK_SUCCESS,\n    // GET_TASK_FAILURE,\n\n    POST_TASK,\n    POST_TASK_STARTED,\n    POST_TASK_SUCCESS,\n    POST_TASK_FAILURE,\n\n    PUT_TASK,\n    PUT_TASK_STARTED,\n    PUT_TASK_SUCCESS,\n    PUT_TASK_FAILURE,\n\n    DELETE_TASK,\n    DELETE_TASK_STARTED,\n    DELETE_TASK_SUCCESS,\n    DELETE_TASK_FAILURE,\n\n    ADD_TASK,\n    SET_TASKS,\n    UPDATE_TASK,\n    UPDATE_TASKS,\n    REMOVE_TASK,\n    SET_TASK_ATTRIBUTES,\n    SELECT_TASK,\n    SET_SELECTED_TASK,\n    DESELECT_TASK,\n    EDITING_TASK, REMOVE_TASKS,\n    SET_SELECTED_HOVERING_TASK,\n    SET_SHOW_ROUTE_CONFIRMATION,\n    SET_ROUTE_CONFIRMATION_LOCATION,\n    AUTO_ADD_ROUTE,\n\n} from '../types/tasks_types'\n\nimport { deepCopy } from '../../methods/utils/utils';\nimport { isObject } from \"../../methods/utils/object_utils\";\n\n\nconst defaultState = {\n    tasks: {},\n    selectedTask: null,\n    selectedHoveringTask: null,\n\n    error: {},\n    pending: false,\n    showRouteConfirmation: false,\n    routeConfirmationLocation: null,\n    autoAddRoute: false\n};\n\nexport default function tasksReducer(state = defaultState, action) {\n\n    switch (action.type) {\n\n        // ======================================== //\n        //                                          //\n        //              Get Tasks               //\n        //                                          //\n        // ======================================== //\n        case GET_TASKS:\n            break;\n\n        case GET_TASKS_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case GET_TASKS_SUCCESS:\n            return {\n                ...state,\n                tasks: action.payload,\n                pending: false\n            }\n\n        case GET_TASKS_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ======================================== //\n        //                                          //\n        //              Get Task               //\n        //                                          //\n        // ======================================== //\n        // case GET_TASK:\n        //     break;\n\n        // case GET_TASK_STARTED:\n        //     return Object.assign({}, state, {\n        //         pending: true\n        //     });\n\n        // case GET_TASK_SUCCESS:\n        //     tasksCopy = deepCopy(state.tasks)\n        //     tasksCopy[action.payload.id] = action.payload.task\n        //     return {\n        //         ...state,\n        //         tasks: tasksCopy,\n        //         pending: false\n        //     }\n\n        // case GET_TASK_FAILURE:\n        //     return Object.assign({}, state, {\n        //         error: action.payload,\n        //         pending: false\n        //     });\n\n        // ======================================== //\n        //                                          //\n        //             Post Tasks               //\n        //                                          //\n        // ======================================== //\n\n        case POST_TASK:\n            break;\n\n        case POST_TASK_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case POST_TASK_SUCCESS:\n            const ID = deepCopy(action.payload._id)\n            return {\n                ...state,\n                tasks: {\n                    ...state.tasks,\n                    [ID]: action.payload,\n                },\n                pending: false,\n\n            }\n\n        case POST_TASK_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ======================================== //\n        //                                          //\n        //             Put Tasks                //\n        //                                          //\n        // ======================================== //\n\n        case PUT_TASK:\n            break;\n\n        case PUT_TASK_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case PUT_TASK_SUCCESS:\n            return {\n                ...state,\n                tasks: {\n                    ...state.tasks,\n                    [action.payload._id]: action.payload,\n                }\n            }\n\n        case PUT_TASK_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case DELETE_TASK:\n            break;\n\n        case DELETE_TASK_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        case DELETE_TASK_SUCCESS:\n            tasksCopy = deepCopy(state.tasks)\n            delete tasksCopy[action.payload]\n\n            return {\n                ...state,\n                tasks: tasksCopy\n            }\n\n        case DELETE_TASK_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n\n\n        // ======================================== //\n        //                                          //\n        //             Tasks Utils              //\n        //                                          //\n        // ======================================== //\n\n        case ADD_TASK:\n            tasksCopy = deepCopy(state.tasks)\n            tasksCopy[action.payload.task._id] = action.payload.task\n            return {\n                ...state,\n                tasks: tasksCopy\n            }\n\n        case SET_TASKS:\n            return {\n                ...state,\n                tasks: {\n                    ...state.tasks,\n                    ...action.payload\n                }\n            }\n\n        case UPDATE_TASK:\n            tasksCopy = deepCopy(state.tasks)\n            tasksCopy[action.payload.task._id] = action.payload.task\n\n            if (state.selectedTask !== null) {\n                return {\n                    ...state,\n                    tasks: tasksCopy,\n                    selectedTask: tasksCopy[state.selectedTask._id]\n                }\n            } else {\n                return {\n                    ...state,\n                    tasks: tasksCopy\n                }\n            }\n\n        case UPDATE_TASKS:\n            tasksCopy = deepCopy(action.payload.tasks)\n\n            if (state.selectedTask !== null) {\n                return {\n                    ...state,\n                    tasks: deepCopy(action.payload.tasks),\n                    selectedTask: deepCopy(action.payload.tasks[state.selectedTask._id])\n                }\n            } else {\n                return {\n                    ...state,\n                    tasks: deepCopy(action.payload.tasks)\n                }\n            }\n\n        case REMOVE_TASK: {\n            const {\n                [action.payload.id]: taskToRemove,  // extract task to remove\n                ...remainingTasks                   // all other tasks are left here\n            } = state.tasks\n\n            return {\n                ...state,\n                tasks: { ...remainingTasks },         // keep all tasks but the one to remove\n            }\n        }\n\n        case REMOVE_TASKS: {\n\n\n            let temp = { ...state.tasks }\n\n            action.payload.ids.forEach((currId) => {\n                const {\n                    [currId]: removed,\n                    ...remainingTasks\n                } = temp\n\n                temp = remainingTasks\n            })\n\n            return {\n                ...state,\n                tasks: { ...temp },         // keep all tasks but the one to remove\n            }\n        }\n\n\n        case SET_TASK_ATTRIBUTES: {\n            var newState\n\n            if (isObject(state.selectedTask) && state.selectedTask._id === action.payload.id) {\n                newState = {\n                    ...state,\n                    tasks: state.tasks[action.payload.id] ?\n                        {\n                            ...state.tasks,\n                            [action.payload.id]: { ...state.tasks[action.payload.id], ...action.payload.attr },\n                        }\n                        :\n                        {\n                            ...state.tasks\n                        },\n                    selectedTask: {\n                        ...state.selectedTask,\n                        ...action.payload.attr\n                    }\n                }\n            } else {\n                newState = {\n                    ...state,\n                    tasks: state.tasks[action.payload.id] ? {\n                        ...state.tasks,\n                        [action.payload.id]: { ...state.tasks[action.payload.id], ...action.payload.attr },\n                    }\n                        :\n                        {\n                            ...state.tasks\n                        }\n                }\n            }\n\n            return newState\n\n        }\n\n\n        case SELECT_TASK:\n            return {\n                ...state,\n                selectedTask: state.tasks[action.payload.id]\n            }\n\n        case SET_SELECTED_TASK:\n            let tasksCopy = state.tasks;\n            if (action.payload.task !== null && state.tasks[action.payload.task._id] === undefined) {\n                tasksCopy[action.payload.task._id] = action.payload.task\n            }\n\n            return {\n                ...state,\n                tasks: tasksCopy,\n                selectedTask: action.payload.task\n            }\n\n        case SET_SELECTED_HOVERING_TASK:\n            return {\n                ...state,\n                selectedHoveringTask: action.payload.task\n            }\n\n        case DESELECT_TASK:\n            return {\n                ...state,\n                selectedTask: null,\n            }\n\n        case EDITING_TASK:\n            return {\n                ...state,\n                editingTask: action.payload,\n            }\n\n        case SET_SHOW_ROUTE_CONFIRMATION:\n            return {\n                ...state,\n                showRouteConfirmation: action.payload,\n            }\n\n        case SET_ROUTE_CONFIRMATION_LOCATION:\n            return {\n                ...state,\n                routeConfirmationLocation: action.payload,\n            }\n\n        case AUTO_ADD_ROUTE:\n            return {\n                ...state,\n                autoAddRoute: action.payload,\n            }\n\n        default:\n            return state;\n    }\n}\n","import {\n    GET_SETTINGS,\n    GET_SETTINGS_STARTED,\n    GET_SETTINGS_SUCCESS,\n    GET_SETTINGS_FAILURE,\n\n    POST_SETTINGS,\n    POST_SETTINGS_STARTED,\n    POST_SETTINGS_SUCCESS,\n    POST_SETTINGS_FAILURE,\n    DEVICE_ENABLED,\n\n} from '../types/setting_types'\n\nconst defaultState = {\n    settings: {\n        loggers: {\n            Dashboards: false,\n            Scheduler: false,\n            Tasks: false,\n            Objects: false,\n            ModelViewer: false,\n            Api: false,\n            ReduxLogger: false,\n            All: false,\n        },\n        shiftDetails: {\n            startOfShift: '07:00',\n            endOfShift: '15:00',\n            expectedOutput: null,\n            breaks: {\n                break1: {\n                    enabled: false,\n                    startOfBreak: '08:30',\n                    endOfBreak: '9:00',\n                },\n                break2: {\n                    enabled: false,\n                    startOfBreak: '11:00',\n                    endOfBreak: '12:00',\n                },\n                break3: {\n                    enabled: false,\n                    startOfBreak: '13:00',\n                    endOfBreak: '14:00',\n                },\n            },\n        },\n    },\n\n    error: {},\n    pending: false,\n    enableLogger: '',\n    muteReducer: false,\n    apiSim: false,\n\n    mapApps: {\n        heatmap: true,\n        ratsnest: true,\n        labels: true\n    },\n\n    emailNotifications: {\n        enabled: false,\n        emailAddress: '',\n        addresseeName: ''\n    }\n}\n\nexport const mirUrl = (state = defaultState) => {\n    return state.settings\n}\n\nconst settingsReducer = (state = defaultState, action) => {\n    switch (action.type) {\n\n        case 'apiSim':\n            return {\n                ...state,\n                apiSim: action.payload\n            }\n\n        case DEVICE_ENABLED:\n            return {\n                ...state,\n                deviceEnabled: action.payload,\n            };\n\n        // ======================================== //\n        //                                          //\n        //              Get SETTINGS                //\n        //                                          //\n        // ======================================== //\n        case GET_SETTINGS:\n            break;\n\n        case GET_SETTINGS_SUCCESS:\n            return {\n                ...state,\n                settings: {\n                    ...state.settings,\n                    ...action.payload,\n                    loggers: { ...state.settings.loggers, ...action.payload.loggers },\n                },\n                pending: false,\n            }\n\n        case GET_SETTINGS_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case GET_SETTINGS_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        // ======================================== //\n        //                                          //\n        //             Post SETTINGS                //\n        //                                          //\n        // ======================================== //\n        case POST_SETTINGS:\n            break;\n\n        case POST_SETTINGS_SUCCESS:\n            return {\n                ...state,\n                settings: { ...state.settings, ...action.payload },\n                pending: false,\n\n            }\n\n        case POST_SETTINGS_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case POST_SETTINGS_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n        // ~~~~~~~~~~~~~~~\n\n        default:\n            return {\n                ...state\n            }\n    }\n    return state\n}\n\nexport default settingsReducer\n","// This reducer is for api calls to local storage\n\nimport {\n  GET_LOGGERS,\n  GET_LOGGERS_STARTED,\n  GET_LOGGERS_SUCCESS,\n  GET_LOGGERS_FAILURE,\n\n  POST_LOGGERS,\n  POST_LOGGERS_STARTED,\n  POST_LOGGERS_SUCCESS,\n  POST_LOGGERS_FAILURE,\n\n  GET_LOCAL_SETTINGS,\n  GET_LOCAL_SETTINGS_STARTED,\n  GET_LOCAL_SETTINGS_SUCCESS,\n  GET_LOCAL_SETTINGS_FAILURE,\n\n  POST_LOCAL_SETTINGS,\n  POST_LOCAL_SETTINGS_STARTED,\n  POST_LOCAL_SETTINGS_SUCCESS,\n  POST_LOCAL_SETTINGS_FAILURE,\n\n  STOP_API_CALLS,\n  SET_TEMP_SIGN_IN_DATA,\n\n} from '../types/local_types';\nimport {defaultLocalSettings} from \"../../constants/local_settings_constants\";\n\n\nconst defaultState = {\n    loggers: {\n        /*\n        All: {\n          enabled: false,\n          level: 0,\n          name: \"All\"\n        },\n        Dashboards: {\n          enabled: false,\n          level: 0,\n          name: \"Dashboards\"\n        },\n        Scheduler: {\n          enabled: false,\n          level: 0,\n          name: \"Scheduler\"\n        },\n        Tasks: {\n          enabled: false,\n          level: 0,\n          name: \"Tasks\"\n        },\n        Objects: {\n          enabled: false,\n          level: 0,\n          name: \"Objects\"\n        },\n        Api: {\n          enabled: false,\n          level: 0,\n          name: \"Api\"\n        },\n        ReduxLogger: {\n          enabled: false,\n          level: 0,\n          name: \"ReduxLogger\"\n        }\n        */\n    },\n\n    localSettings: defaultLocalSettings,\n\n    authenticated: false,\n\n    devicesEnabled: false,\n    disableAll: false,\n    enableAll: false,\n    loaded: false,\n};\n\nconst localReducer = (state = defaultState, action) => {\n    switch(action.type) {\n\n    // ======================================== //\n    //                                          //\n    //              Get SETTINGS                //\n    //                                          //\n    // ======================================== //\n        case GET_LOGGERS:\n            break;\n\n        case GET_LOGGERS_SUCCESS:\n            return  {\n                ...state,\n                ...action.payload,\n                loggers: {\n                  ...state.loggers, ...action.payload.loggers\n                },\n\n                pending: false,\n                loaded: true,\n            }\n\n        case GET_LOGGERS_FAILURE:\n            return  Object.assign({}, state, {\n                error: action.payload,\n                pending: false,\n                loaded: true,\n            });\n\n        case GET_LOGGERS_STARTED:\n            return  Object.assign({}, state, {\n                pending: true\n            });\n\n    // ======================================== //\n    //                                          //\n    //             Post LOGGERS                //\n    //                                          //\n    // ======================================== //\n        case POST_LOGGERS:\n            break;\n\n        case POST_LOGGERS_SUCCESS:\n            return{\n                ...state,\n                 ...action.payload,\n                pending: false\n            }\n\n        case POST_LOGGERS_FAILURE:\n            return  Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case POST_LOGGERS_STARTED:\n            return  Object.assign({}, state, {\n                pending: true\n            });\n\n    // ======================================== //\n    //                                          //\n    //          Get Local Settings              //\n    //                                          //\n    // ======================================== //\n        case GET_LOCAL_SETTINGS:\n            break\n\n        case GET_LOCAL_SETTINGS_SUCCESS:\n            return  {\n                ...state,\n                localSettings: action.payload,\n                pending: false,\n                loaded: true,\n            }\n\n        case GET_LOCAL_SETTINGS_FAILURE:\n            return  Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case GET_LOCAL_SETTINGS_STARTED:\n            return  Object.assign({}, state, {\n                pending: true\n            });\n\n    // ======================================== //\n    //                                          //\n    //           Post Local Settings            //\n    //                                          //\n    // ======================================== //\n        case POST_LOCAL_SETTINGS:\n            break;\n\n        case POST_LOCAL_SETTINGS_SUCCESS:\n            return{\n                ...state,\n                localSettings: {\n                    ...state.localSettings,\n                    ...action.payload\n                },\n                pending: false\n            }\n\n        case POST_LOCAL_SETTINGS_FAILURE:\n            return  Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case POST_LOCAL_SETTINGS_STARTED:\n            return  Object.assign({}, state, {\n                pending: true\n            });\n\n        case STOP_API_CALLS:\n            return {\n                ...state,\n                stopAPICalls: action.payload,\n            }\n\n        case 'UPDATE_STATE':\n            return {\n                ...state,\n                ...action.payload\n            }\n\n        // ~~~~~~~~~~~~~~~\n        default:\n            return {\n                ...state\n            }\n    }\n\n    return state\n}\n\nexport default localReducer\n","import {\n    GET_MAPS,\n    GET_MAPS_STARTED,\n    GET_MAPS_SUCCESS,\n    GET_MAPS_FAILURE,\n\n    GET_MAP,\n    GET_MAP_STARTED,\n    GET_MAP_SUCCESS,\n    GET_MAP_FAILURE,\n\n    SET_MAP_ATTRIBUTES,\n    SET_CURRENT_MAP,\n} from '../types/map_types'\n\nimport { deepCopy } from '../../methods/utils/utils'\n\nconst defaultState = {\n    maps: [],\n    currentMap: {},\n\n    error: {},\n    pending: false,\n    reduxZoom: 2\n};\n\nexport default function mapReducer(state=defaultState, action) {\n    let currentMapCopy = {}\n\n    switch (action.type) {\n\n        // ======================================== //\n        //                                          //\n        //              Get All Maps                //\n        //                                          //\n        // ======================================== //\n\n        case GET_MAPS:\n            break;\n\n        case GET_MAPS_STARTED:\n            return  Object.assign({}, state, {\n                pending: true\n            });\n\n        case GET_MAPS_SUCCESS:\n            return  {\n                ...state,\n                maps: action.payload,\n                pending: false\n            }\n\n        case GET_MAPS_FAILURE:\n            return  Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ======================================== //\n        //                                          //\n        //            Get Map Details               //\n        //                                          //\n        // ======================================== //\n\n        case GET_MAP:\n            break;\n\n        case GET_MAP_STARTED:\n            return  Object.assign({}, state, {\n                pending: true\n            });\n\n        case GET_MAP_SUCCESS:\n            currentMapCopy = deepCopy(action.payload)\n            currentMapCopy.d3 = {\n                scale: 1,\n                translate: [0,0],\n                boundingClientHeight: null\n            }\n\n            return{\n                ...state,\n                currentMap: currentMapCopy,\n                pending: false\n            }\n\n        case GET_MAP_FAILURE:\n            return  Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        // ======================================== //\n        //                                          //\n        //            Map Utility Funcs             //\n        //                                          //\n        // ======================================== //\n\n        case SET_MAP_ATTRIBUTES:\n            currentMapCopy = deepCopy(state.currentMap)\n            Object.assign(currentMapCopy, {...action.payload.attr})\n\n            return {\n                ...state,\n                currentMap: currentMapCopy\n            }\n\n        case SET_CURRENT_MAP:\n            return {\n                ...state,\n                currentMap: action.payload\n            }\n\n        default:\n            return state;\n    }\n}\n","import {\n    SET_MODE,\n    SET_ACTION,\n    SET_WIDTH,\n    SET_OPEN,\n    PAGE_DATA_CHANGED, SET_CONFIRM_DELETE,\n    SHOW_LOT_SCAN_MODAL,\n} from '../types/sidebar_types'\n\n\nconst defaultState = {\n    mode: 'locations',\n    action: null,\n    width: 450,\n    open: false,\n    pageDataChanged:false,\n    showConfirmDeleteModal: false,\n    confirmDeleteCallback: null,\n    showLotScanModal: false,\n};\n\nexport default function sidebarReducer(state = defaultState, action) {\n\n    switch (action.type) {\n\n        case SET_CONFIRM_DELETE: {\n            return {\n                ...state,\n                showConfirmDeleteModal: action.payload.show,\n                confirmDeleteCallback: action.payload.callback,\n            }\n        }\n\n        case SET_MODE:\n            return {\n                ...state,\n                mode: action.payload.mode\n            }\n\n        case SET_ACTION:\n            return {\n                ...state,\n                action: action.payload.action\n            }\n\n        case SET_WIDTH:\n            return {\n                ...state,\n                width: action.payload\n            }\n\n        case SET_OPEN:\n            return {\n                ...state,\n                open: action.payload\n            }\n\n        case PAGE_DATA_CHANGED:\n            return {\n                ...state,\n                pageDataChanged: action.payload\n            }\n\n        case SHOW_LOT_SCAN_MODAL:\n            return {\n                ...state,\n                showLotScanModal: action.payload\n            }\n\n\n        default:\n            return state;\n    }\n}\n","import {\n  WIDGET_PAGE_LOADED,\n  WIDGET_XY_COORDINATES,\n  WIDGET_LOADED,\n  HOVER_STATION_INFO,\n\n} from '../types/widget_types'\n\n\n  const defaultState = {\n    widgetPageLoaded: false,\n    widgetXYCoordinates: {x: '', y: ''},\n    widgetLoaded: false,\n    hoverStationInfo: null,\n};\n\nconst widgetReducer = (state = defaultState, action) => {\n\n\n    switch (action.type) {\n        case WIDGET_PAGE_LOADED:\n            return {\n                ...state,\n                widgetPageLoaded: action.payload\n            }\n\n        case WIDGET_XY_COORDINATES:\n            return {\n                ...state,\n                widgetXYCoordinates: action.payload\n            }\n\n          case WIDGET_LOADED:\n              return {\n                  ...state,\n                  widgetLoaded: action.payload,\n              }\n\n          case HOVER_STATION_INFO:\n              return {\n                  ...state,\n                  hoverStationInfo: action.payload.info,\n              }\n\n\n        default:\n            return state\n    }\n}\n\nexport default widgetReducer\n","export const GET_NOTIFICATIONS = 'GET_NOTIFICATIONS'\nexport const GET_NOTIFICATIONS_STARTED = 'GET_NOTIFICATIONS_STARTED'\nexport const GET_NOTIFICATIONS_SUCCESS = 'GET_NOTIFICATIONS_SUCCESS'\nexport const GET_NOTIFICATIONS_FAILURE = 'GET_NOTIFICATIONS_FAILURE'\n\nexport const POST_NOTIFICATIONS = 'POST_NOTIFICATIONS'\nexport const POST_NOTIFICATIONS_STARTED = 'POST_NOTIFICATIONS_STARTED'\nexport const POST_NOTIFICATIONS_SUCCESS = 'POST_NOTIFICATIONS_SUCCESS'\nexport const POST_NOTIFICATIONS_FAILURE = 'POST_NOTIFICATIONS_FAILURE'\n\nexport const PUT_NOTIFICATION = 'PUT_NOTIFICATIONS'\nexport const PUT_NOTIFICATION_STARTED = 'PUT_NOTIFICATIONS_STARTED'\nexport const PUT_NOTIFICATION_SUCCESS = 'PUT_NOTIFICATIONS_SUCCESS'\nexport const PUT_NOTIFICATION_FAILURE = 'PUT_NOTIFICATIONS_FAILURE'\n\nexport const DELETE_NOTIFICATIONS = 'DELETE_NOTIFICATIONS'\nexport const DELETE_NOTIFICATIONS_STARTED = 'DELETE_NOTIFICATIONS_STARTED'\nexport const DELETE_NOTIFICATIONS_SUCCESS = 'DELETE_NOTIFICATIONS_SUCCESS'\nexport const DELETE_NOTIFICATIONS_FAILURE = 'DELETE_NOTIFICATIONS_FAILURE'\n\nexport const DELETE_NOTIFICATION = 'DELETE_NOTIFICATIONS'\nexport const DELETE_NOTIFICATION_STARTED = 'DELETE_NOTIFICATIONS_STARTED'\nexport const DELETE_NOTIFICATION_SUCCESS = 'DELETE_NOTIFICATIONS_SUCCESS'\nexport const DELETE_NOTIFICATION_FAILURE = 'DELETE_NOTIFICATIONS_FAILURE'\n\n\nexport const TOGGLE_NOTIFICATION_TASK_QUEUE = 'TOGGLE_NOTIFICATION_TASK_QUEUE'\n","import {\n    TOGGLE_NOTIFICATION_TASK_QUEUE,\n} from '../types/notifications_types'\n\n\nconst defaultState = {\n    hiddenNotifications: {},\n    notifications: [\n        {\n            type: \"station_alert\",\n            label: \"Workstation 3\",\n            message: \"Takt time is 10s slower than normal\",\n            priority: \"warning\",\n            dateTime: new Date(2020, 7, 25, 11, 34)\n        },\n        {\n            type: \"device_alert\",\n            label: \"MiR 3\",\n            message: \"Battery low\",\n            priority: \"critical\",\n            dateTime: new Date(2020, 7, 24, 15, 12)\n        },\n        {\n            type: \"station_alert\",\n            label: \"Shipping\",\n            message: \"Station has denyed task request 'Finished Cartridges to Shipping'\",\n            priority: \"alert\",\n            dateTime: new Date(2020, 7, 22, 15, 54)\n        },\n        {\n            type: \"station_alert\",\n            label: \"Workstation 4\",\n            message: \"Takt time is 8s faster than normal\",\n            priority: \"alert\",\n            dateTime: new Date(2020, 7, 10, 16, 32)\n        }\n\n    ],\n\n    toggleNotificationTaskQueue: 'taskQueue'\n}\n\nconst notificationsReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case 'HIDDEN_NOTIFICATIONS':\n\n            // Need to assign to new object because React doesn't see the object change as a state change. \n            // This makes react think a state change is happening so the component rerenders\n            const newPayload = { ...action.payload }\n\n            return {\n                ...state,\n                hiddenNotifications: newPayload,\n            }\n\n        case TOGGLE_NOTIFICATION_TASK_QUEUE:\n            return {\n                ...state,\n                toggleNotificationTaskQueue: action.payload,\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default notificationsReducer","import {\n    GET_TOUCH_EVENTS,\n    GET_TOUCH_EVENTS_STARTED,\n    GET_TOUCH_EVENTS_SUCCESS,\n    GET_TOUCH_EVENTS_FAILURE,\n\n    GET_LOT_TOUCH_EVENTS,\n    GET_LOT_TOUCH_EVENTS_STARTED,\n    GET_LOT_TOUCH_EVENTS_SUCCESS,\n    GET_LOT_TOUCH_EVENTS_FAILURE,\n\n    POST_TOUCH_EVENTS,\n    POST_TOUCH_EVENTS_STARTED,\n    POST_TOUCH_EVENTS_SUCCESS,\n    POST_TOUCH_EVENTS_FAILURE,\n\n    PUT_TOUCH_EVENTS,\n    PUT_TOUCH_EVENTS_STARTED,\n    PUT_TOUCH_EVENTS_SUCCESS,\n    PUT_TOUCH_EVENTS_FAILURE,\n\n    DELETE_TOUCH_EVENTS,\n    DELETE_TOUCH_EVENTS_STARTED,\n    DELETE_TOUCH_EVENTS_SUCCESS,\n    DELETE_TOUCH_EVENTS_FAILURE,\n} from '../types/touch_events_types'\n\nimport { deepCopy } from '../../methods/utils/utils';\n\nconst defaultState = {\n    events: [],\n    lotEvents: {}\n}\n\nconst eventsReducer = (state = defaultState, action) => {\n    \n    let eventsClone = {}\n    let currentEvent = ''\n\n    switch (action.type) {\n\n        // ======================================== //\n        //                                          //\n        //              Get Lot Events              //\n        //                                          //\n        // ======================================== //\n        case GET_LOT_TOUCH_EVENTS:\n            break;\n\n        case GET_LOT_TOUCH_EVENTS_SUCCESS:\n            return {\n    \n                ...state,\n                lotEvents: {\n                    ...state.lotEvents,\n                    [action.payload.lotId]: action.payload.events\n                },\n                pending: false,\n            }\n\n\n        case GET_LOT_TOUCH_EVENTS_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case GET_LOT_TOUCH_EVENTS_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        // ======================================== //\n        //                                          //\n        //             Post Events                 //\n        //                                          //\n        // ======================================== //\n        case POST_TOUCH_EVENTS:\n            break;\n\n        case POST_TOUCH_EVENTS_SUCCESS:\n\n            eventsClone = deepCopy(state.events)\n\n            eventsClone[action.payload._id.$oid] = action.payload\n\n            return {\n                ...state,\n                pending: false\n            }\n\n\n        case POST_TOUCH_EVENTS_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case POST_TOUCH_EVENTS_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n\n        // ======================================== //\n        //                                          //\n        //             Utilities                    //\n        //                                          //\n        // ======================================== //\n\n        default:\n            return state\n\n\n    }\n}\n\nexport default eventsReducer","import {\n    GET_PROCESSES,\n    GET_PROCESSES_STARTED,\n    GET_PROCESSES_SUCCESS,\n    GET_PROCESSES_FAILURE,\n\n    POST_PROCESSES,\n    POST_PROCESSES_STARTED,\n    POST_PROCESSES_SUCCESS,\n    POST_PROCESSES_FAILURE,\n\n    PUT_PROCESSES,\n    PUT_PROCESSES_STARTED,\n    PUT_PROCESSES_SUCCESS,\n    PUT_PROCESSES_FAILURE,\n\n    DELETE_PROCESSES,\n    DELETE_PROCESSES_STARTED,\n    DELETE_PROCESSES_SUCCESS,\n    DELETE_PROCESSES_FAILURE,\n    EDITING_PROCESS,\n    SET_EDITING_VALUES,\n} from '../types/processes_types'\n\nimport { deepCopy } from '../../methods/utils/utils';\nimport { isObject } from \"../../methods/utils/object_utils\";\n\nconst defaultState = {\n    // processes: {'qqq':{\n    //     id: 'qqq',\n    //     name: 'Fakey McFake Fake',\n    //     routes: [\n    //         \"5fa06a9dfacd1af9a74c1925\",\n    //         \"5fa06aa4facd1af9a74c1926\",\n    //         \"5fa06ac3facd1af9a74c1927\",\n    //     ],\n    // },},\n    processes: {},\n    selectedProcess: null,\n    fixingProcess: false,\n}\n\nconst processesReducer = (state = defaultState, action) => {\n    let processesClone = {}\n\n    switch (action.type) {\n\n        // ======================================== //\n        //                                          //\n        //              Get Processes               //\n        //                                          //\n        // ======================================== //\n        case GET_PROCESSES:\n            break;\n\n        case GET_PROCESSES_SUCCESS:\n            return {\n                ...state,\n                processes: action.payload,\n                pending: false,\n            }\n\n        case GET_PROCESSES_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case GET_PROCESSES_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n\n        // ======================================== //\n        //                                          //\n        //             Post Processes                 //\n        //                                          //\n        // ======================================== //\n        case POST_PROCESSES:\n            break;\n\n        case POST_PROCESSES_SUCCESS:\n            processesClone = deepCopy(state.processes)\n            processesClone[action.payload._id] = action.payload\n\n            return {\n                ...state,\n                processes: processesClone,\n                pending: false\n            }\n\n\n        case POST_PROCESSES_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case POST_PROCESSES_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n        // ~~~~~~~~~~~~~~~\n\n        // ======================================== //\n        //                                          //\n        //              Put Processes                 //\n        //                                          //\n        // ======================================== //\n        case PUT_PROCESSES:\n            break;\n\n        case PUT_PROCESSES_SUCCESS:\n            return {\n                ...state,\n                processes: {\n                    ...state.processes,\n                    [action.payload._id]: action.payload\n                },\n                pending: false\n            }\n\n        case PUT_PROCESSES_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case PUT_PROCESSES_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n        // ~~~~~~~~~~~~~~~\n\n        // ======================================== //\n        //                                          //\n        //           Delete Processes                 //\n        //                                          //\n        // ======================================== //\n        case DELETE_PROCESSES:\n            break;\n\n        case DELETE_PROCESSES_SUCCESS:\n\n            processesClone = deepCopy(state.processes)\n\n            delete processesClone[action.payload]\n            return {\n                ...state,\n                processes: processesClone\n            }\n\n        case DELETE_PROCESSES_FAILURE:\n            return Object.assign({}, state, {\n                error: action.payload,\n                pending: false\n            });\n\n        case DELETE_PROCESSES_STARTED:\n            return Object.assign({}, state, {\n                pending: true\n            });\n        // ~~~~~~~~~~~~~~~\n\n        // ======================================== //\n        //                                          //\n        //             Utilities                    //\n        //                                          //\n        // ======================================== //\n        case 'UPDATE_PROCESSES':\n            return {\n                ...state,\n                processes: deepCopy(action.payload.processes),\n                // processes: action.payload.processes,\n                d3: action.payload.d3,\n            }\n\n        case 'SET_SELECTED_PROCESS':\n            return {\n                ...state,\n                selectedProcess: action.payload\n\n            }\n\n        case 'SET_PROCESS_ATTRIBUTES': {\n            var newState\n\n            if (isObject(state.selectedProcess) && state.selectedProcess._id === action.payload.id) {\n                newState = {\n                    ...state,\n                    processes: state.processes[action.payload.id] ?\n                        {\n                            ...state.processes,\n                            [action.payload.id]: { ...state.processes[action.payload.id], ...action.payload.attr },\n                        }\n                        :\n                        {\n                            ...state.processes\n                        },\n                    selectedProcess: {\n                        ...state.selectedProcess,\n                        ...action.payload.attr\n                    }\n                }\n            } else {\n                newState = {\n                    ...state,\n                    processes: state.processes[action.payload.id] ? {\n                        ...state.processes,\n                        [action.payload.id]: { ...state.processes[action.payload.id], ...action.payload.attr },\n                    }\n                        :\n                        {\n                            ...state.processes\n                        }\n                }\n            }\n\n            return newState\n\n        }\n\n        case EDITING_PROCESS:\n            return {\n                ...state,\n                editingProcess: action.payload,\n            }\n\n        case SET_EDITING_VALUES:\n            return {\n                ...state,\n                editingValues: action.payload,\n            }\n\n        case 'SET_FIXING_PROCESS':\n            return {\n                ...state,\n                fixingProcess: action.payload\n            }\n\n        default:\n            return state\n\n\n    }\n}\n\nexport default processesReducer\n","// import types\nimport {\n  GET,\n  POST,\n  DELETE,\n  PUT\n} from '../types/prefixes';\n\nimport {\n  REPORT_EVENTS,\n  REPORT_EVENT\n} from '../types/data_types';\n\nimport {\n  STARTED,\n  SUCCESS,\n  FAILURE\n} from '../types/suffixes';\n\nconst defaultState = {\n  reportEvents: {},\n  id: {},\n  dashboard_id: {},\n  station_id: {},\n  report_button_id: {},\n  error: {},\n  pending: false\n};\n\nexport default function reportEventsReducer(state = defaultState, action) {\n\n  switch (action.type) {\n\n    // get\n    // ***************\n    case GET + REPORT_EVENTS + SUCCESS:\n      return  Object.assign({}, state, {\n        reportEvents: {...state.reportEvents, ...action.payload.reportEventsObj},\n        pending: false\n      });\n\n    case GET + REPORT_EVENTS + FAILURE:\n      return  Object.assign({}, state, {\n        error: action.payload,\n        pending: false\n      });\n\n    case GET + REPORT_EVENTS + STARTED:\n      return  Object.assign({}, state, {\n        pending: true\n      });\n    // ~~~~~~~~~~~~~~~\n\n    // create\n    // ***************\n    case POST + REPORT_EVENT + SUCCESS:\n      const created = action.payload.createdReportEvent\n\n      return  Object.assign({}, state, {\n        reportEvents: {\n          ...state.reportEvents,\n          _id: {\n            ...state.reportEvents._id,\n            [created.report_button_id]: created\n          }\n        },\n        pending: false\n      });\n\n\n    case POST + REPORT_EVENT + FAILURE:\n      return  Object.assign({}, state, {\n        error: action.payload,\n        pending: false\n      });\n\n    case POST + REPORT_EVENT + STARTED:\n      return  Object.assign({}, state, {\n        pending: true\n      });\n    // ~~~~~~~~~~~~~~~\n\n    // delete\n    // ***************\n    case DELETE + REPORT_EVENT + SUCCESS:\n\n      const {\n        [action.payload.id]: old,\n          ...rest\n      } = state.reportEvents._id\n\n      return  Object.assign({}, state, {\n        reportEvents: {\n          ...state.reportEvents,\n          _id: {...rest,}\n        },\n        pending: false\n      });\n\n\n    case  DELETE + REPORT_EVENT + FAILURE:\n      return  Object.assign({}, state, {\n        error: action.payload,\n        pending: false\n      });\n\n    case  DELETE + REPORT_EVENT + STARTED:\n      return  Object.assign({}, state, {\n        pending: true\n      });\n    // ~~~~~~~~~~~~~~~\n\n    // update\n    // ***************\n    case  PUT + REPORT_EVENT + SUCCESS:\n\n      return  Object.assign({}, state, {\n        reportEvents: {\n          ...state.reportEvents,\n          _id: {\n            ...state.reportEvents._id,\n            [action.payload.updatedReportEvent.report_button_id]: action.payload.updatedReportEvent\n          }\n        },\n        pending: false\n      });\n\n\n    case PUT + REPORT_EVENT + FAILURE:\n      return  Object.assign({}, state, {\n        error: action.payload,\n        pending: false\n      });\n\n    case PUT + REPORT_EVENT + STARTED:\n      return  Object.assign({}, state, {\n        pending: true\n      });\n    // ~~~~~~~~~~~~~~~\n\n    default:\n      return state\n  }\n}\n","import {\n  GET,\n  POST,\n  DELETE,\n  PUT\n} from '../types/prefixes';\n\nimport {\n  SUCCESS,\n} from '../types/suffixes'\n\nimport {\n  CARD,\n  CARDS,\n  CARD_HISTORY,\n  PROCESS_CARDS,\n  SHOW_EDITOR,\n  SHOW_FORM_EDITOR,\n  SHOW_BARCODE_MODAL\n\n} from '../types/data_types'\n\nconst defaultState = {\n\n  cards: {},\n  processCards: {},\n  cardHistories: {},\n  error: {},\n  pending: false,\n  showEditor:false,\n  showFormEditor:false,\n  showBarcodeModal: false,\n\n};\n\nexport default function cardsReducer(state = defaultState, action) {\n  let processCards = {}\n\n  switch (action.type) {\n    case GET + CARD + SUCCESS:\n      return {\n        ...state,\n        cards: {...state.cards, [action.payload.card._id]: action.payload.card},\n        pending: false,\n      }\n\n    case GET + CARDS + SUCCESS:\n\n      Object.values(action.payload.cards).forEach((card,index) => {\n        if(processCards[card.process_id]) {\n          processCards[card.process_id][card._id] = card\n        } else {\n          processCards[card.process_id] = {\n            [card._id]: card\n          }\n        }\n\n      })\n      return {\n        ...state,\n        cards: {...state.cards, ...action.payload.cards},\n        processCards: processCards,\n        pending: false,\n      }\n\n    case GET + PROCESS_CARDS + SUCCESS:\n      return {\n        ...state,\n        processCards: {...state.processCards, [action.payload.processId]: {\n          ...state.processCards[action.payload.processId], ...action.payload.cards\n          }},\n        pending: false,\n      }\n\n    case PUT + CARD + SUCCESS:\n      return {\n        ...state,\n        cards: {...state.cards, [action.payload.card._id]: action.payload.card},\n        processCards: {...state.processCards, [action.payload.processId]: {\n            ...state.processCards[action.payload.processId], [action.payload.card._id]: action.payload.card\n          }},\n        pending: false,\n      }\n\n    case POST + CARD + SUCCESS:\n      return {\n        ...state,\n        cards: {...state.cards, [action.payload.card._id]: action.payload.card},\n        processCards: {...state.processCards, [action.payload.processId]: {\n            ...state.processCards[action.payload.processId], [action.payload.card._id]: action.payload.card\n          }},\n        pending: false,\n      }\n\n    case DELETE + CARD + SUCCESS:\n      const { [action.payload.cardId]: value, ...rest } = state.cards; // extracts payload lot from rest\n      const {\n\n        [action.payload.processId]: {[action.payload.cardId]: removedCard, ...remaining} ,\n        ...unchangedProcessGroups\n\n      } = state.processCards; // extracts payload lot from rest\n\n      return {\n        ...state,\n        cards: {...rest},\n        processCards: {...unchangedProcessGroups, [action.payload.processId]: remaining},\n        pending: false,\n      }\n\n    case GET + CARD_HISTORY + SUCCESS:\n      return {\n        ...state,\n        cardHistories: {...state.cardHistories, [action.payload.cardHistory.card_id]: action.payload.cardHistory},\n        pending: false,\n      }\n\n    case POST + CARD_HISTORY + SUCCESS:\n      return {\n        ...state,\n        cardHistories: {...state.cardHistories, [action.payload.cardHistory.card_id]: action.payload.cardHistory},\n        pending: false,\n      }\n\n    case PUT + CARD_HISTORY + SUCCESS:\n      return {\n        ...state,\n        cardHistories: {...state.cardHistories, [action.payload.cardHistory.card_id]: action.payload.cardHistory},\n        pending: false,\n      }\n\n      case SHOW_EDITOR:\n          return {\n              ...state,\n              showEditor: action.payload,\n          }\n\n    case SHOW_FORM_EDITOR:\n      return {\n        ...state,\n        showFormEditor: action.payload,\n      }\n\n    case SHOW_BARCODE_MODAL:\n      return {\n        ...state,\n        showBarcodeModal: action.payload,\n      }\n\n    default:\n      return state\n  }\n}\n","import { SET } from \"../types/prefixes\"\nimport {LOT_DRAGGING, COLUMN_HOVERING, HIDE_CARD, LOT_HOVERING, FIELD_DRAGGING, SET_SIZE, LOT_DROPPING, DRAGGING_STATION_ID, DRAG_FROM_BIN, LOT_DIV_HEIGHT} from \"../types/ui_types\"\n\n\nconst defaultState = {\n\tisCardDragging: false,\n\tisFieldDragging: null,\n\tisHoveringOverColumn: false,\n\thoveringLotId: null,\n\tsizes: {},\n\tdroppedLotInfo: {},\n\tdraggingLotId: null,\n\tdraggingStationId: null,\n\tdragFromBin: null,\n\tlotDivHeight: 160,\n\thideCard: null,\n\n}\n\nconst cardPageReducer = (state = defaultState, action) => {\n\n\n\tswitch (action.type) {\n\t\tcase SET + LOT_DROPPING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdroppedLotInfo: action.payload\n\t\t\t}\n\n\t\tcase SET + LOT_DRAGGING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdraggingLotId: action.payload.lotId\n\t\t\t}\n\n\t\tcase SET + HIDE_CARD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\thideCard: action.payload.card\n\t\t\t}\n\n\t\tcase SET + LOT_HOVERING: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\thoveringLotId: action.payload.lotId\n\t\t\t}\n\t\t}\n\n\n\t\tcase SET + FIELD_DRAGGING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisFieldDragging: action.payload\n\t\t\t}\n\n\t\tcase SET_SIZE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tsizes: {...state.sizes, [action.payload.processId]: action.payload.size},\n\t\t\t}\n\n\t\tcase DRAGGING_STATION_ID:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdraggingStationId: action.payload\n\t\t\t}\n\n\t\tcase LOT_DIV_HEIGHT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlotDivHeight: action.payload\n\t\t\t}\n\n\t\t\tcase DRAG_FROM_BIN:\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tdragFromBin: action.payload\n\t\t\t\t}\n\n\n\t\tcase SET + COLUMN_HOVERING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisHoveringOverColum: action.payload\n\t\t\t}\n\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default cardPageReducer\n","import { combineReducers } from 'redux'\n\nimport stationsReducer from './stations_reducer';\nimport positionsReducer from './positions_reducer'\nimport dashboardsReducer from './dashboards_reducer'\nimport tasksReducer from './tasks_reducer';\nimport settingsReducer from './settings_reducer';\nimport localReducer from './local_reducer';\nimport mapReducer from './map_reducer'\nimport lotTemplatesReducer from './lot_templates_reducer'\nimport sidebarReducer from './sidebar_reducer'\nimport widgetReducer from './widget_reducer'\nimport notificationsReducer from './notifications_reducer'\nimport touchEventsReducer from './touch_events_reducer'\nimport processesReducer from './processes_reducer'\nimport reportEventsReducer from './report_events_reducer'\nimport cardsReducer from './cards_reducer'\nimport cardPageReducer from \"./card_page_reducer\"\n\n// TEST\n\nexport default combineReducers({\n    // Local side Reducers\n    cardPageReducer,\n    sidebarReducer,\n    localReducer,\n    widgetReducer,\n\n    // API Reducers\n    lotTemplatesReducer,\n    reportEventsReducer,\n    cardsReducer,\n    stationsReducer,\n    dashboardsReducer,\n    tasksReducer,\n    settingsReducer,\n    touchEventsReducer,\n    mapReducer,\n    processesReducer,\n\n    // Not implemented reducers (will be reintroduced)\n    positionsReducer,\n    notificationsReducer,\n    \n    \n})\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport { createLogger } from 'redux-logger'\nimport reducers from '../reducers/index';\nimport thunk from 'redux-thunk';\n\nimport log_module from '../../logger.js';\n\nconst reduxLogger = log_module.getLogger('ReduxLogger');\n\nvar logger = createLogger({logger: reduxLogger, level: \"info\"});\n\n// const muteReducer = () => {\n//   if(reducers.settingsReducer.muteReducer){\n//     return applyMiddleware(thunk)\n//   } else {\n//     return applyMiddleware(logger, thunk)\n//   }\n// }\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n      // actionCreators,\n      trace: true,\n      traceLimit: 25,\n    }) : compose;\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(logger, thunk),\n  // other store enhancers if any\n);\n\nconst store = createStore(reducers, enhancer);\n\nif (module.hot) {\n  module.hot.accept('../reducers/index.js', () => {\n    // const nextReducer = combineReducers(require('../reducers'))\n    // store.replaceReducer(nextReducer)\n    store.replaceReducer(require('../reducers/index.js').default)\n  })\n}\n\nexport default store\n","import axios from 'axios';\n\nimport { apiIPAddress } from '../settings/settings'\nimport store from '../redux/store'\nimport { getHeaders, handleError } from './helpers';\n\nconst operator = 'cards'\n\nexport async function getCard(cardId) {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + operator + \"/\" + cardId,\n            headers: getHeaders()\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n}\n\nexport async function getCardsCount() {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + operator + \"/count\",\n            headers: getHeaders()\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n}\n\nexport async function getCards() {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + `site_maps/${currMapId}/${operator}`,\n            headers: getHeaders()\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n}\n\n\nexport async function getProcessCards(processId) {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + \"processes/\" + processId + \"/cards\",\n            headers: getHeaders()\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n}\n\nexport async function deleteCard(ID) {\n    try {\n        const response = await axios({\n            method: 'DELETE',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders()\n        });\n\n        return response;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function postCard(card) {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        card.map_id = currMapId\n\n        const response = await axios({\n            method: 'POST',\n            url: apiIPAddress() + operator,\n            headers: getHeaders(),\n            data: card\n        });\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n\n        return dataJson;\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n\nexport async function putCard(card, ID) {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        card.map_id = currMapId\n        \n        const response = await axios({\n            method: 'PUT',\n            url: apiIPAddress() + operator + '/' + ID,\n            headers: getHeaders(),\n            data: JSON.stringify(card)\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n}\n","import axios from 'axios';\nimport { apiIPAddress } from '../settings/settings'\nimport store from '../redux/store'\nimport { getHeaders, handleError } from './helpers';\n\n\nconst operator = 'tasks'\n\nexport async function getTasks() {\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + `site_maps/${currMapId}/${operator}`,\n            headers: getHeaders()\n        });\n\n        // Success 🎉\n        // log.debug('getTasks :res:',response);\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        // log.debug('getTasks: dataJson: ', dataJson)\n        return dataJson;\n\n    } catch (error) {\n        handleError(error);\n    }\n\n\n};\n\nexport async function getTask(id) {\n    // log.debug('getTask: id: ', id)\n    try {\n        const response = await axios({\n            method: 'get',\n            url: apiIPAddress() + operator + '/' + id,\n            headers: getHeaders(),\n        });\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n\n    } catch (error) {\n        handleError(error);\n    }\n\n\n};\n\nexport async function postTask(task) {\n    // log.debug('postTask task:',task, JSON.stringify(task));\n    try {\n        const currMapId = store.getState().localReducer.localSettings.currentMapId\n        task.map_id = currMapId\n\n        const response = await axios({\n            method: 'post',\n            headers: getHeaders(),\n            url: apiIPAddress() + operator,\n            data: JSON.stringify(task)\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n    } catch (error) {\n        handleError(error);\n    }\n\n\n};\n\nexport async function deleteTask(id) {\n\n    try {\n        const response = await axios({\n            method: 'delete',\n            headers: getHeaders(),\n            url: apiIPAddress() + operator + '/' + id\n        });\n\n        // Success 🎉\n        return response;\n\n    } catch (error) {\n        handleError(error);\n    }\n\n\n};\n\nexport async function putTask(task, id) {\n    try {\n        const response = await axios({\n            method: 'put',\n            headers: getHeaders(),\n            url: apiIPAddress() + operator + '/' + id,\n            data: JSON.stringify(task)\n        });\n\n        // Success 🎉\n        const data = response.data;\n        const dataJson = JSON.parse(data)\n        return dataJson;\n\n    } catch (error) {\n        handleError(error);\n    }\n\n}\n","import {\n    GET_TASKS_STARTED,\n    GET_TASKS_SUCCESS,\n    GET_TASKS_FAILURE,\n\n    GET_TASK_STARTED,\n    GET_TASK_SUCCESS,\n    GET_TASK_FAILURE,\n\n    POST_TASK_STARTED,\n    POST_TASK_SUCCESS,\n    POST_TASK_FAILURE,\n\n    PUT_TASK_STARTED,\n    PUT_TASK_SUCCESS,\n    PUT_TASK_FAILURE,\n\n    DELETE_TASK_STARTED,\n    DELETE_TASK_SUCCESS,\n    DELETE_TASK_FAILURE,\n\n    ADD_TASK,\n    SET_TASKS,\n    UPDATE_TASK,\n    UPDATE_TASKS,\n    REMOVE_TASK,\n    SET_TASK_ATTRIBUTES,\n    SELECT_TASK,\n    SET_SELECTED_TASK,\n    DESELECT_TASK,\n    EDITING_TASK,\n    REMOVE_TASKS,\n    SET_SELECTED_HOVERING_TASK,\n    SET_SHOW_ROUTE_CONFIRMATION,\n    SET_ROUTE_CONFIRMATION_LOCATION,\n    AUTO_ADD_ROUTE,\n} from '../types/tasks_types'\n\nimport { deepCopy } from '../../methods/utils/utils';\n\nimport * as api from '../../api/tasks_api'\nimport * as processesActions from \"./processes_actions\";\nimport * as dashboardsActions from \"./dashboards_actions\";\n\n// get\n// ******************************\nexport const getTasks = () => {\n    return async (dispatch) => {\n\n        function onStart() {\n            dispatch({ type: GET_TASKS_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: GET_TASKS_SUCCESS, payload: response });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: GET_TASKS_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            const tasks = await api.getTasks();\n\n            const normalizedTasks = {}\n            tasks.forEach((task) => {\n                normalizedTasks[task._id] = task\n            })\n\n            return onSuccess(normalizedTasks);\n        } catch (error) {\n            return onError(error);\n        }\n    };\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// get task details\n// ******************************\n// export const getTask = (task_id) => {\n//   return async dispatch => {\n\n//     function onStart() {\n//       dispatch({ type: GET_TASK_STARTED });\n//     }\n//     function onSuccess(response) {\n//       dispatch({ type: GET_TASK_SUCCESS, payload: {id: task_id, task: response} });\n//       return response;\n//     }\n//     function onError(error) {\n//       dispatch({ type: GET_TASK_FAILURE, payload: error });\n//       return error;\n//     }\n\n//     try {\n//       onStart();\n//       const task_details = await api.getTask(task_id);\n//       return onSuccess(task_details);\n//     } catch (error) {\n//       return onError(error);\n//     }\n//   };\n// };\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// post\n// ******************************\nexport const postTask = (task) => {\n    return async dispatch => {\n\n        function onStart() {\n            dispatch({ type: POST_TASK_STARTED });\n        }\n        const onSuccess = async (newTask) => {\n            await dispatch({ type: POST_TASK_SUCCESS, payload: newTask });\n            return newTask;\n        }\n        function onError(error) {\n            dispatch({ type: POST_TASK_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            delete task.new\n            delete task.isNew\n            delete task.changed\n\n            const newTask = await api.postTask(task);\n            return onSuccess(newTask);\n        } catch (error) {\n            return onError(error);\n        }\n    };\n};\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// put\n// ******************************\nexport const putTask = (task, ID) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: PUT_TASK_STARTED });\n        }\n        function onSuccess(updateTask) {\n            dispatch({ type: PUT_TASK_SUCCESS, payload: updateTask });\n            return updateTask;\n        }\n        function onError(error) {\n            dispatch({ type: PUT_TASK_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            let taskCopy = deepCopy(task)\n            delete taskCopy.new\n            delete taskCopy.changed\n            // delete taskCopy._id\n            const updateTask = await api.putTask(taskCopy, ID);\n            return onSuccess(updateTask)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// delete\n// ******************************\nexport const deleteTask = (ID) => {\n    return async dispatch => {\n        function onStart() {\n            dispatch({ type: DELETE_TASK_STARTED });\n        }\n        function onSuccess(response) {\n            dispatch({ type: DELETE_TASK_SUCCESS, payload: ID });\n            return response;\n        }\n        function onError(error) {\n            dispatch({ type: DELETE_TASK_FAILURE, payload: error });\n            return error;\n        }\n\n        try {\n            onStart();\n            await api.deleteTask(ID);\n            return onSuccess(ID)\n        } catch (error) {\n            return onError(error)\n        }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// delete\n// ******************************\nexport const deleteRouteClean = (routeId) => {\n    return async (dispatch, getState) => {\n\n        // remove route from all dashboards\n        await dispatch(dashboardsActions.removeRouteFromAllDashboards(routeId))\n\n        // remove route from all processes\n        await dispatch(processesActions.removeRouteFromAllProcesses(routeId))\n\n        // delete route\n        await dispatch(deleteTask(routeId));\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// PUT clean\n// ******************************\nexport const putRouteClean = (route, routeId) => {\n    return async (dispatch, getState) => {\n\n        // put task\n        await dispatch(putTask(route, routeId));\n\n        // remove buttons associated with route at dashboards at the wrong station\n        await dispatch(dashboardsActions.removeRouteFromWrongDashboards(route))\n\n        // handle adding buttons to dashboards\n        await dispatch(dashboardsActions.addRouteToDashboards(route))\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// POST clean\n// ******************************\nexport const postRouteClean = (route) => {\n    return async (dispatch, getState) => {\n\n        // post route\n        await dispatch(postTask(route));\n\n        // remove buttons associated with route at dashboards at the wrong station\n        await dispatch(dashboardsActions.removeRouteFromWrongDashboards(route))\n\n        // handle adding buttons to dashboards\n        await dispatch(dashboardsActions.addRouteToDashboards(route))\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n//\n// ******************************\nexport const saveFormRoute = (formRoute) => {\n    return async (dispatch) => {\n\n        // extract values\n        const {\n            unsaved,        // remove key\n            new: isNew,     // remove key\n            changed,        // remove key\n            needsSubmit,    // remove key\n            obj = {},\n            ...remainingRoute\n        } = formRoute\n        // get objectId\n        const {\n            _id: objectId\n        } = obj || {}\n\n        // create payload\n        const payload = {\n            ...remainingRoute,\n            obj: objectId\n        }\n\n        // create new route\n        if(isNew) {\n            await dispatch(postRouteClean(payload))\n        }\n\n        // update existing route\n        else {\n            await dispatch(putRouteClean(payload, payload._id))\n        }\n    }\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nexport const addTask = (task) => {\n    return { type: ADD_TASK, payload: { task } }\n}\n\nexport const setTasks = (tasks) => {\n    return { type: SET_TASKS, payload: tasks}\n}\n\nexport const updateTask = (task) => {\n    return { type: UPDATE_TASK, payload: { task } }\n}\n\nexport const updateTasks = (tasks) => {\n    return { type: UPDATE_TASKS, payload: { tasks } }\n}\n\nexport const removeTask = (id) => {\n    return { type: REMOVE_TASK, payload: { id } }\n}\n\nexport const removeTasks = (ids) => {\n    return { type: REMOVE_TASKS, payload: { ids } }\n}\n\nexport const setTaskAttributes = (id, attr) => {\n    return { type: SET_TASK_ATTRIBUTES, payload: { id, attr } }\n}\n\nexport const selectTask = (id) => {\n    return { type: SELECT_TASK, payload: { id } }\n}\n\nexport const setSelectedTask = (task) => {\n    return { type: SET_SELECTED_TASK, payload: { task }}\n}\n\nexport const setSelectedHoveringTask = (task) => {\n    return { type: SET_SELECTED_HOVERING_TASK, payload: { task }}\n}\n\nexport const deselectTask = () => {\n    return { type: DESELECT_TASK }\n}\n\nexport const editingTask = (bool) => {\n    return { type: EDITING_TASK, payload: bool }\n}\n\nexport const showRouteConfirmation = (bool) => {\n    return { type: SET_SHOW_ROUTE_CONFIRMATION, payload: bool }\n}\n\nexport const setRouteConfirmationLocation = (id) => {\n    return { type: SET_ROUTE_CONFIRMATION_LOCATION, payload: id }\n}\n\nexport const autoAddRoute = (bool) => {\n    return { type: AUTO_ADD_ROUTE, payload: bool }\n}\n","import { deepCopy } from \"./utils\";\nimport { isObject } from \"./object_utils\";\nimport store from \"../../redux/store\";\nimport { getLoadStationId, getUnloadStationId } from \"./route_utils\";\nimport { useSelector } from \"react-redux\";\nimport { isArray, isNonEmptyArray } from \"./array_utils\";\n\n/**\n * This function checks to see if a process is broken.\n * A process is broken because it has dissjointed routes, theres a gap between an unload station and a load station between 2 consecutive routes\n *\n *\n * @param {object} processRoutes Process to check and see if it is broken\n * @param {object} routes All routes\n */\nexport const isBrokenProcess = (routes) => {\n    return false;\n\n    // can't be broken if there is only 1 route\n    if (routes.length > 1) {\n        // Loops through and\n        for (let i = 0; i < routes.length - 1; i++) {\n            const currentRoute = routes[i];\n            const nextRoute = routes[i + 1];\n\n            const unloadStationId = getUnloadStationId(currentRoute);\n            const loadStationId = getLoadStationId(nextRoute);\n\n            if (unloadStationId !== loadStationId) {\n                // Have to return the current route index plus 1 because if the route that is before the broken route is the first route in s process, then the index is 0, which is considered falsy\n                return i + 1;\n            }\n        }\n    }\n\n    return 0;\n};\n\n/**\n * This function returns true if the route you are deleting will break the Process\n *\n * Currently the way it tells if it will break the process is to tell if its not the first or last route in a process\n * If it is the first or last route, then the process does not break\n *\n * RETURNS FALSE IF DELETE DOES NOT BREAK PROCESS\n * It returns an int of where the break will be (int's are truthy)\n *\n * @param {array} processRoutes Selected Process\n * @param {object} routeId Selected Route\n */\nexport const willRouteDeleteBreakProcess = (routes, routeId) => {\n    // if not first or last route\n    if (\n        routeId !== routes[routes.length - 1]._id &&\n        routeId !== routes[0]._id\n    ) {\n        const copyProcessRoutes = deepCopy(routes);\n        const index = copyProcessRoutes.findIndex(\n            (currRoute) => currRoute._id === routeId\n        );\n        copyProcessRoutes.splice(index, 1);\n\n        return isBrokenProcess(copyProcessRoutes);\n    } else {\n        return false;\n    }\n};\n\n/**\n * This checks to see if the route being added to the process will fix the broken process\n *\n * The way it tells is by getting the route before the break and checks to see if the new route's load location is the route before breaks unload location.\n * If thats the case than we see if the route after break's load station is the new routes unload location.\n *\n * If the new route's load and unload location fix the missing gap then it fixes that part of the broken process\n *\n * Perform a check to see if there's still another part of the process is broken after fix\n * If it's fix then the process is not broken anymore, if not, update the break point\n *\n * RETURNS FALSE IF THE PROCESS IS FIXED\n * It returns an int of where the new break is if it's still broken (int's are truthy)\n *\n * @param {object} processRoutes Selected Process\n * @param {int} brokenIndex index of broken route\n * @param {object} route New Route\n */\nexport const willRouteAdditionFixProcess = (routes, brokenIndex, route) => {\n    const copyRoutes = deepCopy(routes);\n    const routeBeforeBreak = routes[brokenIndex - 1];\n    const routeAfterBreak = routes[brokenIndex];\n\n    if (\n        getUnloadStationId(routeBeforeBreak) === getLoadStationId(route) &&\n        getLoadStationId(routeAfterBreak) === getUnloadStationId(route)\n    ) {\n        copyRoutes.splice(brokenIndex, 0, route); // splice route into arr\n\n        if (!!isBrokenProcess(copyRoutes)) {\n            return isBrokenProcess(copyRoutes);\n        } else {\n            return false;\n        }\n    }\n\n    copyRoutes.splice(brokenIndex, 0, route);\n    if (!!isBrokenProcess(copyRoutes)) {\n        return isBrokenProcess(copyRoutes);\n    } else {\n        return false;\n    }\n};\n\n/**\n * This returns the list of ***UNIQUE*** station ids belonging to a process\n *\n * In order to get the list of station ids, this function first gets the list of route ids belonging to the process from the process's routes key\n *\n * For each route id, the corresponding route object is retrieved from the routes object\n *\n * From each route object, the unload and load objects are extracted\n * from the unload and load objects, the station id is extracted\n *\n * Each station id is added to an object to accumulate all stations belonging to the process\n * NOTE: an object is used for this purpose since it efficiently and automatically ensures that each entry will be unique (since object keys are unique).\n *      If an array is desired, simply call Object.keys() on the returned object where needed\n *\n * RETURNS an object containing the key of each station contained in the process with value set as true\n *\n * @param {object} process The process to get stations from\n * @param {object} routes Object containing all routes with each route's id as keys\n */\nexport const getProcessStations = (process, routes) => {\n    const { routes: routeIds = [] } = process || {};\n\n    // object that will contain {stationId: true} for each station in the process\n    // an object is used instead of an array because an object can only contain a key once\n    // if an array was used, the array would have to be checked each time a station is added to ensure duplicates aren't added\n    var stationIds = {};\n\n    // loop through each routeId, get the load / unload station of the route and add it to the stationIds obj\n    routeIds.forEach((currRouteId) => {\n        // get route from id\n        const currRoute = routes[currRouteId] || {}; // default to empty obj\n\n        // get unload and load objects\n        const { unload = {}, load = {} } = currRoute;\n\n        // get unload station id\n        const { station: unloadStationId } = unload;\n\n        // get load station id\n        const { station: loadStationId } = load;\n\n        // if unloadStationId and loadStationId exist, add to stationIds obj\n        if (loadStationId) stationIds[loadStationId] = true;\n        if (unloadStationId) stationIds[unloadStationId] = true;\n    });\n\n    // return stationIds obj\n    return stationIds;\n};\n\n/**\n * This returns the list of ***UNIQUE*** station ids belonging to a process\n *\n * In order to get the list of station ids, this function first gets the list of route ids belonging to the process from the process's routes key\n *\n * For each route id, the corresponding route object is retrieved from the routes object\n *\n * From each route object, the unload and load objects are extracted\n * from the unload and load objects, the station id is extracted\n *\n * Each station id is added to an object to accumulate all stations belonging to the process\n * NOTE: an object is used for this purpose since it efficiently and automatically ensures that each entry will be unique (since object keys are unique).\n *      If an array is desired, simply call Object.keys() on the returned object where needed\n *\n * RETURNS an object containing the key of each station contained in the process with value set as true\n *\n * @param {object} process The process to get stations from\n * @param {object} routes Object containing all routes with each route's id as keys\n */\nexport const getProcessStationsSorted = (process, routes) => {\n    const { routes: routeIds = [] } = process || {};\n\n    // object that will contain {stationId: true} for each station in the process\n    // an object is used instead of an array because an object can only contain a key once\n    // if an array was used, the array would have to be checked each time a station is added to ensure duplicates aren't added\n    var stationIds = [];\n\n    // loop through each routeId, get the load / unload station of the route and add it to the stationIds obj\n    routeIds.forEach((currRouteId, index) => {\n        // get route from id\n        const currRoute = routes[currRouteId] || {}; // default to empty obj\n\n        // get unload and load objects\n        const { unload = {}, load = {} } = currRoute;\n\n        if (!stationIds.includes(currRoute.load)) {\n            stationIds.push(currRoute.load);\n        }\n        if (!stationIds.includes(currRoute.unload)) {\n            stationIds.push(currRoute.unload);\n        }\n    });\n\n    // return stationIds obj\n    return stationIds;\n};\n\n/**\n * Gets all stations that belong to a process when editing that process\n * Editing a process has the actual object vs the id of the route inside it's routes array\n * @param {*} process\n * @returns\n */\nexport const getProcessStationsWhileEditing = (process) => {\n    let stationIds = [];\n    const { routes } = process || [];\n    routes.forEach((route) => {\n        const loadStation = route.load.station;\n        const unloadStation = route.unload.station;\n        if (!stationIds.includes(loadStation)) {\n            stationIds.push(loadStation);\n        }\n\n        if (!stationIds.includes(unloadStation)) {\n            stationIds.push(unloadStation);\n        }\n    });\n\n    return stationIds;\n};\n\nexport const getProcessName = (processId) => {\n    const processes = store.getState().processesReducer.processes || {};\n    const process = processes[processId] || {};\n    const { name = \"\" } = process;\n\n    return name;\n};\n\nexport const getNextStationInProcess = (process, currentStationId) => {\n    const routes = store.getState().tasksReducer.tasks || {};\n    const stations = store.getState().stationsReducer.stations || {};\n    let nextStation;\n    const processStations = getProcessStationsSorted(process, routes);\n    const currentStationIndex = processStations.findIndex((currItem) => {\n        if (isObject(currItem)) {\n            return currItem._id === currentStationId;\n        } else {\n            return currItem === currentStationId;\n        }\n    });\n\n    // If the current index is the same as the length, then its the last station in the process, so take the first station\n    if (currentStationIndex === processStations.length - 1) {\n        nextStation = processStations[0];\n    }\n    // Else take the next station in the array\n    else {\n        nextStation = processStations[currentStationIndex + 1];\n    }\n\n    if (!isObject(nextStation)) {\n        return stations[nextStation];\n    } else {\n        return nextStation;\n    }\n};\n\nexport const getPreviousRoute = (processRoutes, currentRouteId) => {\n    const storeState = store.getState();\n    const routes = storeState.tasksReducer.tasks;\n    var previousRoute;\n\n    const currentRouteindex = processRoutes.findIndex((currItem) => {\n        if (isObject(currItem)) {\n            return currItem._id === currentRouteId;\n        } else {\n            return currItem === currentRouteId;\n        }\n    });\n    // If the current route index is above 0 then find the route before\n    if (currentRouteindex > 0) {\n        previousRoute = processRoutes[currentRouteindex - 1];\n    }\n    // Else its the the first route so ge the last route of the process,\n    else {\n        previousRoute = processRoutes[processRoutes.length - 1];\n    }\n\n    if (!isObject(previousRoute)) {\n        return routes[previousRoute];\n    } else {\n        return previousRoute;\n    }\n};\n\nexport const getNextRoute = (processRoutes, currentRouteId) => {\n    const storeState = store.getState();\n    const routes = storeState.tasksReducer.tasks;\n    let nextRoute;\n\n    const currentRouteindex = processRoutes.findIndex((currItem) => {\n        if (isObject(currItem)) {\n            return currItem._id === currentRouteId;\n        } else {\n            return currItem === currentRouteId;\n        }\n    });\n\n    // If the current index is the same as the length, then its the last roue in the process, so take the first route\n    if (currentRouteindex === processRoutes.length - 1) {\n        nextRoute = processRoutes[0];\n    }\n    // Else take the next route in the array\n    else {\n        nextRoute = processRoutes[currentRouteindex + 1];\n    }\n\n    if (!isObject(nextRoute)) {\n        return routes[nextRoute];\n    } else {\n        return nextRoute;\n    }\n};\n\nexport const callOnStations = (processId, callback) => {\n    const storeState = store.getState();\n    const routes = storeState.tasksReducer.tasks || {};\n    const process = storeState.processesReducer.processes[processId] || {};\n\n    let prevLoadStationId; // tracks previous load station id when looping through routes\n    let prevUnloadStationId; // tracks previous unload station id when looping through routes\n    let stationIds = [];\n\n    // loop through routes, get load / unload station id and create entry in tempCardsSorted for each station\n    process.routes &&\n        process.routes.forEach((currRouteId, index) => {\n            // get current route and load / unload station ids\n            const currRoute = routes[currRouteId];\n            const loadStationId = getLoadStationId(currRoute);\n            const unloadStationId = getUnloadStationId(currRoute);\n\n            // only add loadStation entry if the previous unload wasn't identical (in order to avoid duplicates)\n            if (prevUnloadStationId !== loadStationId) {\n                callback(loadStationId);\n            }\n\n            // add entry in tempCardsSorted\n            callback(unloadStationId);\n\n            // update prevLoadStationId and prevUnloadStationId\n            prevLoadStationId = loadStationId;\n            prevUnloadStationId = unloadStationId;\n        });\n};\n\nexport const getStationIds = (processId) => {\n    let stationIds = [];\n\n    const callback = (stationId) => {\n        stationIds.push(stationId);\n    };\n\n    callOnStations(processId, callback);\n\n    return stationIds;\n};\n\nexport const getStationAttributes = (processId, attributes) => {\n    const storeState = store.getState();\n    const stations = storeState.stationsReducer.stations || {};\n\n    let stationAttributes = [];\n\n    const isAttributesNotEmpty = isNonEmptyArray(attributes);\n\n    const callback = (stationId) => {\n        const station = stations[stationId];\n\n        let currentStationAttributes;\n\n        if (isAttributesNotEmpty) {\n            currentStationAttributes = {};\n            attributes.forEach((currAttribute) => {\n                currentStationAttributes[currAttribute] =\n                    station[currAttribute];\n            });\n        } else {\n            currentStationAttributes = { ...station };\n        }\n\n        stationAttributes.push(currentStationAttributes);\n    };\n\n    callOnStations(processId, callback);\n\n    return stationAttributes;\n};\n\n// Gets the previous station that is a warehouse\n// If it is a warehouse, it returns that station,\n// If not, it returns false\nexport const getPreviousWarehouseStation = (processID, stationID) => {\n    const storeState = store.getState();\n    const routes = storeState.tasksReducer.tasks || {};\n    const process = storeState.processesReducer.processes[processID] || {};\n    const stations = storeState.stationsReducer.stations || {};\n\n    let warehouse = null;\n    for (const ind in process.routes) {\n        let loadStation = stations[routes[process.routes[ind]].load];\n        let unloadStation = stations[routes[process.routes[ind]].unload];\n\n        if (\n            unloadStation._id === stationID &&\n            loadStation.type === \"warehouse\"\n        ) {\n            warehouse = loadStation;\n        }\n    }\n\n    if (!!warehouse) return warehouse;\n    else return false;\n};\n\n/***\n * All processes must end in single stations. This function returns binary whether or not that is true for\n * a given set of routes\n */\nexport const doRoutesConverge = (routes) => {\n    let loadStations = routes.map((route) => route.load);\n    let unloadStations = routes.map((route) => route.unload);\n\n    let numTerminalStations = 0;\n    for (var unloadStation of unloadStations) {\n        if (\n            loadStations.find(\n                (loadStation) => loadStation === unloadStation\n            ) === undefined\n        ) {\n            numTerminalStations += 1;\n        }\n    }\n\n    return numTerminalStations === 1;\n};\n\n/**\n * Find the IDs of the start stations of a process. If stations is provided, it will not include start nodes\n * that are warehouses. (Note this needs to be recursive in the case that )\n *\n * @param {Array} processRoutes\n * @param {Array} stations\n * @returns\n */\nexport const findProcessStartNodes = (processRoutes, stations) => {\n    if (processRoutes.length === 0) return [];\n    let loadStations = processRoutes.map((route) =>\n        !!route ? route.load : {}\n    );\n    let unloadStations = processRoutes.map((route) =>\n        !!route ? route.unload : {}\n    );\n\n    let startNodes = [];\n    for (var loadStation of loadStations) {\n        if (\n            unloadStations.find(\n                (unloadStation) => unloadStation === loadStation\n            ) === undefined &&\n            !startNodes.includes(loadStation)\n        ) {\n            startNodes.push(loadStation);\n        }\n    }\n\n    if (startNodes.length === 0) return []\n\n    if (\n        stations !== undefined &&\n        startNodes.every((nodeId) => stations[nodeId].type === \"warehouse\")\n    ) {\n        const newRoutes = deepCopy(processRoutes).filter(\n            (route) => !startNodes.includes(route.load)\n        );\n        return findProcessStartNodes(newRoutes, stations);\n    } else if (stations !== undefined) {\n        return startNodes.filter(\n            (node) => stations[node]?.type !== \"warehouse\"\n        );\n    }\n\n    return startNodes;\n};\n\nexport const findProcessEndNodes = (routes) => {\n    let loadStations = routes.map((route) => (!!route ? route.load : {}));\n    let unloadStations = routes.map((route) => (!!route ? route.unload : {}));\n\n    let endNodes = []\n    for (var unloadStation of unloadStations) {\n        if (\n            loadStations.find(\n                (loadStation) => loadStation === unloadStation\n            ) === undefined\n        ) {\n            endNodes.push(unloadStation);\n        }\n    }\n    return endNodes;\n};\n\n/**\n * Looks through the incoming routes and determines if all incoming parts are satisfied.\n * If the parts are satisfied, then the worker can move the lot along, otherwise they\n * need to wait until all parts come in. This gets complicated because you have to\n * backpropogate through the graph to determine if a part was diverged as a split or\n * a choice.\n *\n * Basic Algorithm:\n * Starting at the start nodes, recurse through the graph. When you reach a diverging\n * node, the returned value becomes an array where the first value is 'AND' or 'OR'\n * depending on whether it is a split or choice node. As you continue to traverse,\n * if you come to a converging node, those two paths will reach the same station\n * (ex: ['AND', 'Station3', 'Station3']) which can be collapsed simply into 'Station3'.\n * once you reach the desired station, stop traversing.\n *\n * @param {array} routes\n * @param {ID} stationId\n */\nexport const handleMergeExpression = (stationId, process, routes, stations, clean=true) => {\n    const processRoutes = process.routes.map((routeId) => routes[routeId]);\n\n    const recursivePrint = (exp) => {\n        if (!Array.isArray(exp)) return routes[exp]?.name || exp\n        else if (exp.length === 1) return exp\n        exp = deepCopy(exp)\n      for (var i=1; i<exp.length; i++) {\n        if (Array.isArray(exp[i])) {\n            exp[i] = recursivePrint(exp[i])\n        } else {\n            exp[i] = routes[exp[i]]?.name || exp[i]\n        }\n      }\n      return exp\n    }\n\n    /***\n     * Cleans up an expression.\n     */\n    const cleanExpression = (expression) => {\n        if (!Array.isArray(expression)) {\n            return expression\n        } else if (expression[0] === null) {\n            // If the first element is null, there is no AND or OR. Its just the child ('through' node)\n            return expression[1];\n        } else {\n            // Remove all nulls from the expression. Nulls are set when the recursion hits the end\n            // of the process but didnt come across the desired stationId\n            let nonNullExpression = expression.filter((el) => !!el);\n\n            // If len < 2, this isnt even an expression (reached process end without hitting stationId)\n            if (nonNullExpression.length < 2) {\n                return null;\n            } else if (\n                // If all pieces are the same, theres no need for an AND or OR\n                nonNullExpression.every(\n                    (element, idx) =>\n                        idx === 0 ||\n                        JSON.stringify(element) ===\n                            JSON.stringify(nonNullExpression[1])\n                )\n            ) {\n                return nonNullExpression[1];\n            } else {\n                // Otherwise, just return the expression\n                return nonNullExpression;\n            }\n        }\n    }\n\n    let node, outgoingRoutes, nextRoutes, routeId;\n    const recursiveExpand = (sExpression, traversed) => {\n        let sExpressionCopy = deepCopy(sExpression);\n        for (var entryIdx = 1; entryIdx < sExpression.length; entryIdx++) {\n            routeId = sExpression[entryIdx];\n\n            if (traversed.includes(routeId)) {\n                sExpressionCopy[entryIdx] = null;\n                continue\n            }\n            traversed.push(routeId)\n\n            node = routes[routeId].unload;\n            outgoingRoutes = getNodeOutgoing(node, processRoutes);\n            if (node === stationId) { // We've found our station\n                /**\n                 * OKAY, this is where cycles get tricky. When you find your station, THIS MAY NOT BE THE ONLY SOLUTION.\n                 * So instead, this is an OR with all possible solutions. I.E. save this solution, but keep recursing in case a\n                 * route later down the graph has a solution as well.\n                 */\n\n                if (outgoingRoutes.length === 0) {\n                    sExpressionCopy[entryIdx] = routeId\n                } else if (outgoingRoutes.length === 1) {\n                    sExpressionCopy[entryIdx] = ['OR', routeId, recursiveExpand([null, outgoingRoutes[0]._id], deepCopy(traversed))]\n                } else {\n                    nextRoutes = outgoingRoutes.map((route) => route._id);\n                    if (\n                        outgoingRoutes.some(\n                            (route) => route.divergeType === \"split\"\n                        )\n                    ) {\n                        sExpressionCopy[entryIdx] = ['OR', routeId, recursiveExpand([\n                            \"AND\",\n                            ...nextRoutes,\n                        ], deepCopy(traversed))]\n                    } else {\n                        sExpressionCopy[entryIdx] = ['OR', routeId, recursiveExpand([\n                            \"OR\",\n                            ...nextRoutes,\n                        ], deepCopy(traversed))]\n                    }\n                }\n\n\n                sExpressionCopy[entryIdx] = cleanExpression(sExpressionCopy[entryIdx]);\n                \n                \n            } else if (outgoingRoutes.length === 0) {\n                if (clean) {\n                    sExpressionCopy[entryIdx] = null\n                }\n            } else if (outgoingRoutes.length === 1) {// Not a diverging node\n                // NOTE, the recursive function only accepts an array, so we have to populate the first value with null.\n                // This null is removed before the expression is returned \\/\n                sExpressionCopy[entryIdx] = recursiveExpand([\n                    null,\n                    outgoingRoutes[0]._id,\n                ], deepCopy(traversed));\n            } else { // Diverging node, new sub expression and expand\n                nextRoutes = outgoingRoutes.map((route) => route._id);\n                if (\n                    outgoingRoutes.some(\n                        (route) => route.divergeType === \"split\"\n                    )\n                ) {\n                    sExpressionCopy[entryIdx] = recursiveExpand([\n                        \"AND\",\n                        ...nextRoutes,\n                    ], deepCopy(traversed));\n                } else {\n                    sExpressionCopy[entryIdx] = recursiveExpand([\n                        \"OR\",\n                        ...nextRoutes,\n                    ], deepCopy(traversed));\n                }\n            }\n        }\n\n        return cleanExpression(sExpressionCopy)\n    };\n\n    const startNodes = findProcessStartNodes(processRoutes, stations); // Dont consider warehouses start nodes\n    let startRouteExpression =\n        process.startDivergeType === \"split\" ? [\"AND\"] : [\"OR\"];\n    for (var startNode of startNodes) {\n        outgoingRoutes = getNodeOutgoing(startNode, processRoutes);\n        if (outgoingRoutes.length === 1) {\n            // NOTE, the recursive function only accepts an array, so we have to populate the first value with null.\n            // This null is removed before the expression is returned \\/\n            startRouteExpression.push(\n                recursiveExpand([null, outgoingRoutes[0]._id], [])\n            );\n        } else {\n            nextRoutes = outgoingRoutes.map((route) => route._id);\n            if (outgoingRoutes.some((route) => route.divergeType === \"split\")) {\n                startRouteExpression.push(\n                    recursiveExpand([\"AND\", ...nextRoutes], [])\n                );\n            } else {\n                startRouteExpression.push(\n                    recursiveExpand([\"OR\", ...nextRoutes], [])\n                );\n            }\n        }\n    }\n\n    const cleanedExpression = cleanExpression(startRouteExpression)\n\n    \n    //console.log(!!stations && stations[stationId]?.name || stationId, recursivePrint(cleanedExpression))\n    \n    return cleanedExpression;\n};\n\nexport const getNodeIncoming = (node, processRoutes, filterLoopRoutes=false) => {\n    return processRoutes.filter((route) => {\n        return route.unload === node && (!filterLoopRoutes || !isLoopingRoute(route._id, processRoutes))\n    });\n};\n\nexport const getNodeOutgoing = (node, processRoutes) => {\n    return processRoutes.filter((route) => route.load === node);\n};\n\nexport const isNodeStartWarehouse = (node, processRoutes, stations) => {\n    return (\n        stations[node]?.type === \"warehouse\" &&\n        getNodeIncoming(node, processRoutes).length === 0\n    );\n};\n\nexport const flattenProcessStations = (processRoutes, stations) => {\n\n    let flattenedStations = [];\n    let traveresedRoutes = {};\n    processRoutes.forEach(route => traveresedRoutes[route._id] = false)\n\n    const DFS = (node, routes, depth) => {\n\n        const incomingRoutes = getNodeIncoming(node, routes, true);\n        const nonTraversedIncomingRoutes = incomingRoutes.filter(route => traveresedRoutes[route._id] === false)\n\n        if (nonTraversedIncomingRoutes.length === 0) { // youve traversed all incoming routes, now add this station\n            if (incomingRoutes.length > 1) { // This station was a merge node, that means move up one in depth\n                depth--;\n            }\n            if (flattenedStations.find(({stationID}) => stationID === node) === undefined) {\n                flattenedStations.push({\n                    depth,\n                    stationID: node\n                })\n            }\n            \n        } else if (incomingRoutes.filter(inRoute => !isLoopingRoute(inRoute._id, processRoutes)).length > 1) { // This is a merge node but we havent traversed all incoming routes, keep going until we have\n            return\n        }\n\n        const outgoingRoutes = getNodeOutgoing(node, routes).filter(outgoingRoute => !traveresedRoutes[outgoingRoute._id]);\n        if (outgoingRoutes.length > 1) { // This is a diverging node, move down in depth\n            depth++;\n        }\n\n        for (var nextRoute of outgoingRoutes) {\n            traveresedRoutes[nextRoute._id] = true;\n            DFS(nextRoute.unload, routes, depth);\n        }\n\n    }\n\n    const processRoutesWithoutWarehouseStartNodes =\n        processRoutes.filter((route) => {\n            if (stations[route.load]?.type === \"warehouse\") {\n                const warehouseIncomingRoutes = getNodeIncoming(\n                    route.load,\n                    processRoutes\n                );\n                if (warehouseIncomingRoutes.length === 0) {\n                    return false;\n                }\n            }\n            return true;\n        });\n\n    let startNodes = findProcessStartNodes(processRoutesWithoutWarehouseStartNodes, stations);\n    for (var startNode of startNodes) {\n        DFS(startNode, processRoutesWithoutWarehouseStartNodes, (startNodes.length > 1 ? 1 : 0));\n    }\n\n    return flattenedStations;\n\n\n}\n\nconst DFSFindCycleRoute = (routeId, routes, stack) => {\n\n    let node = stack[stack.length-1];\n    let outgoingRoutes = getNodeOutgoing(node, routes);\n\n    for (var outgoingRoute of outgoingRoutes) {\n        let nextNode = outgoingRoute.unload;\n        if (stack.includes(nextNode)) {\n            if (outgoingRoute._id === routeId) {\n                return true;\n            } else {\n                continue\n            }\n        }\n        let nextStack = deepCopy(stack);\n        nextStack.push(nextNode);\n        if (DFSFindCycleRoute(routeId, routes, nextStack)) return true\n    }\n\n    return false\n\n}\n\nexport const isLoopingRoute = (routeId, processRoutes) => {\n\n    const startNodes = findProcessStartNodes(processRoutes);\n\n    for (var startNode of startNodes) {\n        let stack = [startNode];\n        if (DFSFindCycleRoute(routeId, processRoutes, stack)) return true\n        \n    }\n    return false\n\n}\n","// TASKS types\nexport const TASKS = 'TASKS';\nexport const TASK = 'TASK';\n\nexport const ANALYSIS = 'ANALYSIS';\n\nexport const GET_TASKS = 'GET_TASKS'\nexport const GET_TASKS_STARTED = 'GET_TASKS_STARTED'\nexport const GET_TASKS_SUCCESS = 'GET_TASKS_SUCCESS'\nexport const GET_TASKS_FAILURE = 'GET_TASKS_FAILURE'\n\nexport const GET_TASK = 'GET_TASK'\nexport const GET_TASK_STARTED = 'GET_TASK_STARTED'\nexport const GET_TASK_SUCCESS = 'GET_TASK_SUCCESS'\nexport const GET_TASK_FAILURE = 'GET_TASK_FAILURE'\n\nexport const POST_TASK = 'POST_TASK'\nexport const POST_TASK_STARTED = 'POST_TASK_STARTED'\nexport const POST_TASK_SUCCESS = 'POST_TASK_SUCCESS'\nexport const POST_TASK_FAILURE = 'POST_TASK_FAILURE'\n\nexport const PUT_TASK = 'PUT_TASK'\nexport const PUT_TASK_STARTED = 'PUT_TASK_STARTED'\nexport const PUT_TASK_SUCCESS = 'PUT_TASK_SUCCESS'\nexport const PUT_TASK_FAILURE = 'PUT_TASK_FAILURE'\n\nexport const DELETE_TASK = 'DELETE_TASK'\nexport const DELETE_TASK_STARTED = 'DELETE_TASK_STARTED'\nexport const DELETE_TASK_SUCCESS = 'DELETE_TASK_SUCCESS'\nexport const DELETE_TASK_FAILURE = 'DELETE_TASK_FAILURE'\n\nexport const ADD_TASK = 'ADD_TASK'\nexport const SET_TASKS = 'SET_TASKS'\nexport const UPDATE_TASK = 'UPDATE_TASK'\nexport const UPDATE_TASKS = 'UPDATE_TASKS'\nexport const REMOVE_TASK = 'REMOVE_TASK'\nexport const REMOVE_TASKS = 'REMOVE_TASKS'\nexport const SET_TASK_ATTRIBUTES = 'SET_TASK_ATTRIBUTES'\nexport const VALIDATE_TASK = 'VALIDATE_TASK'\nexport const SELECT_TASK = 'SELECT_TASK'\nexport const SET_SELECTED_TASK = 'SET_SELECTED_TASK'\nexport const DESELECT_TASK = 'DESELECT_TASK'\nexport const EDITING_TASK = 'EDITING_TASK'\nexport const SET_SELECTED_HOVERING_TASK = 'SET_SELECTED_HOVERING_TASK'\nexport const SET_SHOW_ROUTE_CONFIRMATION = 'SET_SHOW_ROUTE_CONFIRMATION'\nexport const SET_ROUTE_CONFIRMATION_LOCATION = 'SET_ROUTE_CONFIRMATION_LOCATION'\nexport const AUTO_ADD_ROUTE = 'AUTO_ADD_ROUTE'\n"],"sourceRoot":""}