{"version":3,"sources":["containers/map_view/map_view.style.js","components/map/locations/station/station.style.js","methods/utils/widget_utils.js","components/map/locations/location_svg/location_svg.style.js","components/map/locations/location_svg/location_svg.js","components/map/locations/drag_entity_proto.js","components/map/locations/station/station.js","components/map/locations/position/position.js","components/map/heatmap/heatspot/heatspot.js","components/map/heatmap/heatmap.js","components/map/ratsnest/ratsnest_path.js","components/map/ratsnest/ratsnest.js","containers/map_view/map_view.js","../node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createSuper.js","redux/actions/sidebar_actions.js","../node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","constants/position_constants.js","../node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","constants/station_constants.js","../node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","redux/actions/widget_actions.js","../node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js"],"names":["MapContainer","styled","div","props","isBlank","theme","bg","quaternary","MapGroup","g","MapImage","img","tall","foreignObject","width","h1","handleWidgetHoverCoord","location","rd3tClassName","d3","widgetInfo","id","_id","heightWidth","yPosition","y","xPosition","x","scale","realScale","WorkstationGroup","TranslateGroup","LocationSvg","color","isSelected","hoveringInfo","hovering","rotating","shouldGlow","handleMouseEnter","handleMouseLeave","handleMouseDown","handleTranslating","schema","handleRotating","locationTypes","StationTypes","PositionTypes","settings","useSelector","state","settingsReducer","useState","colour","setColour","useEffect","className","style","fill","stroke","onMouseOver","e","stopPropagation","onMouseEnter","LightenDarkenColor","onMouseDown","onMouseLeave","transform","rotation","imgResolution","mapApps","labels","fontSize","dominantBaseline","textAnchor","name","stdDeviation","result","in","height","operator","radius","floodColor","in2","onMouseUp","type","viewBox","filter","svgPath","defaultProps","DragEntityProto","handleRotate","handleTranslate","handleDisableDrag","handleEnableDrag","handleTranslateEnd","setRotating","translating","setTranslating","isBinded","setBinded","bindDragListener","unbindDragListener","rotateStart","originalRotation","deltaRotation","translateStart","useRef","current","originalTranslation","deltaTranslation","currentTranslation","useMemo","ringElement","rectElement","call","drag","on","d","i","event","element","angle","sourceEvent","Math","atan2","clientY","clientX","PI","touches","abs","round","rotate","translation","translate","a","length","Station","station","mouseDown","setHovering","selectedStation","stationsReducer","editingProcess","processesReducer","selectedPosition","positionsReducer","selectedTask","tasksReducer","selectedProcess","widgetReducer","hoverStationInfo","dispatch","useDispatch","dispatchHoverStationInfo","info","dispatchSetStationAttributes","attr","setStationAttributes","dispatchSetSelectedTask","task","setSelectedTask","dispatchSetTaskAttributes","load","setTaskAttributes","disabled","children","includes","highlight","unload","params","useParams","window","addEventListener","onSetListener","removeEventListener","undefined","stationID","widgetPage","handleWidgetHover","Fragment","temp","editing","setSelectedStation","dispatchSetSelectedStation","newRoute","generateDefaultRoute","onSetStationTask","pageDataChanged","bool","pos","convertD3ToReal","pos_x","pos_y","Position","position","positionId","dispatchSetSelectedPosition","setSelectedPosition","dispatchSetPositionAttributes","setPositionAttributes","hoverLocationID","stations","positions","selectedStationChildrenCopy","tasks","fixingProcess","routeStart","getRouteStart","routeEnd","getRouteEnd","parent","routeBeforeBreak","routes","broken","isPositionAtUnloadStation","routeAfterBreak","isPositionInRoutes","isPositionAtLoadStation","insertIndex","routeIndex","getRouteIndexInRoutes","map","currProcess","immutableDelete","previousRoute","getPreviousRoute","previousRouteEnd","loadPositionId","getLoadPositionId","loadStationId","getLoadStationId","firstRoute","nextRoute","x1","y1","x2","y2","strokeWidth","shapeRendering","opacity","renderParentLine","deepCopy","onSetPositionTask","HeatSpot","wipRatio","d3Scale","spotSize","min","max","isNaN","cx","cy","r","HeatMap","map_id","stationWIPRatios","setStationWIPRatios","cards","cardsReducer","editingStation","editingPosition","Object","values","processes","WIPBuildupRatios","forEach","process","pStationId","processStations","getProcessStationsSorted","totalProcessWIP","stationWIP","stationsWithWip","card","process_id","reduce","accumWIP","getBinQuantity","WIPRatio","meanProcessWIP","offset","stopColor","stopOpacity","RatsnestPaths","route","unloadPositionId","getUnloadPositionId","startPos","endPos","strokeLinecap","RatsNest","mapProcesses","j","TaskPaths","log","getLogger","lazy","ProcessPaths","RightClickMenu","Widgets","MapApps","MapView","checkForMapLoad","currentMap","maps","find","localSettings","currentMapId","setState","updatedSettings","dispatchPostLocalSettings","then","dispatchGetStations","stationsCopy","convertRealToD3","dispatchUpdateStations","componentWillUnmount","passive","validateNewEntity","showRightClickMenu","bindZoomListener","document","validateNewLocation","unbindZoomListener","refreshMap","dispatchGetMap","guid","openLocation","path","dragNewEntity","draggingChild","newChildEntity","scaleExtent","resolution","svg","rd3tSvgClassName","rd3tMapClassName","zoom","lastEvent","positionsCopy","updatedSelectedStation","updatedSelectedPosition","updatedChildrenPositions","dispatchUpdatePositions","initialRender","onDisableDrag","draggable","onEnableDrag","onWidgetDisableDrag","widgetDraggable","onWidgetEnableDrag","calculateD3Geometry","locations","mapContainer","mapImage","cHeight","getBoundingClientRect","cWidth","iHeight","iWidth","iNatHeight","naturalImageDimensions","iNatWidth","mapResolution","actualDims","naturalDims","handleRightClickMenu","preventDefault","mobileMode","onClick","hasStartAndEnd","rd3tLocClassName","rd3tStationClassName","rd3tPosClassName","naturalScale","boundingClientHeight","heigh","this","dispatchGetMaps","res","prevProps","prevState","getHasStartAndEnd","getIsEquivalent","match","capture","deviceEnabled","onMouseMove","ref","mc","touchAction","pointerEvents","fallback","keys","coords","buttonClicked","onContextMenu","mi","src","onLoad","naturalHeight","naturalWidth","selectedHoveringTask","heatmap","ratsnest","ind","Component","zoomable","withRouter","connect","mapReducer","localReducer","showRouteConfirmation","editingTask","widgetLoaded","getMaps","getMap","dispatchSetCurrentMap","setCurrentMap","dispatchPostSettings","postSettings","postLocalSettings","getStations","updateStations","childrenPositions","updatePositions","dispatchPostPosition","postPosition","dispatchWidgetLoaded","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","prototype","_inherits","subClass","superClass","create","constructor","value","_possibleConstructorReturn","self","assertThisInitialized","_createSuper","Derived","hasNativeReflectConstruct","isNativeReflectConstruct","Super","getPrototypeOf","NewTarget","Reflect","construct","arguments","apply","setMode","mode","SET_MODE","payload","setWidth","SET_WIDTH","setOpen","SET_OPEN","PAGE_DATA_CHANGED","setConfirmDelete","show","callback","SET_CONFIRM_DELETE","showLotScanModal","SHOW_LOT_SCAN_MODAL","_assertThisInitialized","ReferenceError","positionColor","shelf_position","rx","strokeMiterlimit","attributes","new","charger_position","cart_position","temporary_cart_position","newPositionTemplate","uuid","v4","_getPrototypeOf","o","setPrototypeOf","__proto__","stationColor","main","solid","warehouse","version","xmlns","dashboards","human","_setPrototypeOf","p","widgetPageLoaded","WIDGET_PAGE_LOADED","WIDGET_LOADED","HOVER_STATION_INFO","_isNativeReflectConstruct","sham","Proxy","Date","toString"],"mappings":"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","file":"static/js/23.7a4106c1.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const MapContainer = styled.div`\n    height: 100%;\n    width: 100%;\n    flex: 1;\n    background: ${props => props.isBlank ? '#F9FBFC' : props.theme.bg.quaternary};\n    user-select: none;\n\n    // cursor: move; /* fallback if grab cursor is unsupported */\n    // cursor: -webkit-move;\n    // cursor: -moz-move;\n\n    cursor: url(https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur), grab;\n\n    &:active {\n        cursor: grabbing;\n        cursor: -moz-grabbing;\n        cursor: -webkit-grabbing;\n    }\n\n    background-size: cover;\n    overflow: visible;\n`\n\nexport const MapGroup = styled.g`\n`\n\nexport const MapImage = styled.img`\n    height: 100%;\n    width: auto;\n\n    ccursor: move; /* fallback if grab cursor is unsupported */\n    cursor: -webkit-move;\n    cursor: -moz-move;\n\n    // ${props => props.tall && `\n    //     height: auto;\n    //     width: 100%;\n    // `}\n    \n`","import styled from 'styled-components'\n\n\nexport const WidgetForeignObject = styled.foreignObject`\n    transition: ${props => props.width === '100%' ? 'all 0.25s ease' : 'none'};\n    overflow: visible;\n    z-index: 1;\n`\n\nexport const WidgetHoverArea = styled.div`\n    margin-top: -12.7rem;\n    width: 30rem;\n    height: 10rem;\n    z-index: 5000;\n`\n\nexport const WorkstationGroup = styled.g`\n    stroke-width: 0;\n    opacity: 0.8;\n`\n\nexport const StationLabel = styled.h1`\n    color: red;\n    position: relative;\n`\n","/**\n * All of these coordinates have been calc by adjusting them on map with chrome dev tools\n * @param {*} location\n * @param {*} rd3tClassName\n * @param {*} d3\n */\n\nexport const handleWidgetHoverCoord = (location, rd3tClassName, d3) => {\n    let widgetInfo = {}\n    widgetInfo.id = location._id\n\n    widgetInfo.heightWidth = '1'\n\n    // Initial Ratios\n    widgetInfo.yPosition = location.y\n    widgetInfo.xPosition = location.x\n    // widgetInfo.scale = Math.min(Math.max(d3.scale, 0.8), 1.3);\n    widgetInfo.scale = d3.scale\n\n    // Sets real scale to be used with the widget hover area\n    widgetInfo.realScale = d3.scale\n\n    return widgetInfo\n\n}\n","import styled from 'styled-components'\n\nexport const WorkstationGroup = styled.g`\n    stroke-width: 0;\n    opacity: 0.8;\n`\n\nexport const TranslateGroup = styled.g`\n    cursor: url(https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur), grab;\n\n    &:active {\n        cursor: grabbing;\n        cursor: -moz-grabbing;\n        cursor: -webkit-grabbing;\n    }\n`\n","import React, {useState, useEffect} from 'react'\nimport { useSelector } from 'react-redux';\n\nimport * as styled from './location_svg.style'\n\n// Import Constants\nimport { StationTypes } from '../../../../constants/station_constants'\nimport { PositionTypes } from '../../../../constants/position_constants'\nimport PropTypes from \"prop-types\";\nimport { LightenDarkenColor } from '../../../../methods/utils/color_utils'\n\nconst LocationSvg = (props) => {\n\n    const {\n        location,\n        rd3tClassName,\n        color,\n        d3,\n        isSelected,\n        hovering,\n        rotating,\n        hoveringInfo,\n        shouldGlow,\n\n        handleMouseEnter,\n        handleMouseLeave,\n        handleMouseDown,\n        handleTranslating,\n        handleRotating,\n\n\n    } = props\n\n    const schema = location.schema\n    const locationTypes = {\n        ...StationTypes,\n        ...PositionTypes\n    }\n\n    const settings = useSelector(state => state.settingsReducer.settings)\n    const [colour, setColour] = useState(color)\n    const ellipsis = (text) => {\n\n    }\n    useEffect(() => {\n      setColour(color)\n\n    }, [color])\n    return (\n        <styled.WorkstationGroup\n            id={rd3tClassName}\n            className={rd3tClassName}\n            style={{ fill: colour, stroke: colour }}\n            onMouseOver={e => e.stopPropagation()}\n            onMouseEnter={() => {\n                handleMouseEnter()\n                if(!!isSelected) setColour(LightenDarkenColor('#5c6fff', -50))\n            }}\n            onMouseDown={() => {\n                handleMouseDown()\n            }}\n            onMouseLeave={() => {\n                handleMouseLeave()\n                setColour(color)\n            }}\n            transform={`translate(${location.x},${location.y}) rotate(${-location.rotation}) scale(${d3.scale / d3.imgResolution})`}\n        >\n            {((settings.mapApps.labels || isSelected) && hoveringInfo?.id !== location?._id) && \n                <text y={-16} fontSize=\"0.7em\" dominantBaseline=\"middle\" textAnchor=\"middle\">{location.name}</text>\n\n            }\n            <defs>\n\n                {/* a transparent glow that takes on the colour of the object it's applied to */}\n                <filter id=\"glow\">\n                    <feGaussianBlur stdDeviation=\"1\" result=\"coloredBlur\" />\n                    <feMerge>\n                        <feMergeNode in=\"coloredBlur\" />\n                        <feMergeNode in=\"SourceGraphic\" />\n                    </feMerge>\n                </filter>\n\n                <filter id=\"glow2\" height=\"300%\" width=\"300%\" x=\"-75%\" y=\"-75%\">\n                    <feMorphology operator=\"dilate\" radius=\"1\" in=\"SourceAlpha\" result=\"thicken\" />\n                    <feGaussianBlur in=\"thicken\" stdDeviation=\"2\" result=\"blurred\" />\n                    <feFlood floodColor={color} result=\"glowColor\" />\n                    <feComposite in=\"glowColor\" in2=\"blurred\" operator=\"in\" result=\"softGlow_colored\" />\n                    <feMerge>\n                        <feMergeNode in=\"softGlow_colored\" />\n                        <feMergeNode in=\"SourceGraphic\" />\n                    </feMerge>\n                </filter>\n\n            </defs>\n\n        {/*   <g\n                className={`${rd3tClassName}-rot`}\n                onMouseLeave={() => {\n                    handleMouseLeave()\n                }}\n\n            >\n                <circle x=\"-20\" y=\"-20\" r=\"20\" strokeWidth=\"0\" fill=\"transparent\" style={{ cursor: rotating ? \"pointer\" : \"grab\" }}\n                />\n                {isSelected && (hovering || rotating) && hoveringInfo === null &&\n                    <>\n                        <circle x=\"-20\" y=\"-20\" r=\"18\" fill=\"none\" strokeWidth=\"4\" stroke=\"transparent\" style={{ cursor: \"pointer\" }}\n                            onMouseDown={() => handleRotating(true)}\n                            onMouseUp={() => handleRotating(false)}\n\n                        />\n                        <circle x=\"-18\" y=\"-18\" r=\"18\" fill=\"none\" strokeWidth=\"0.8\" style={{ filter: \"url(#glow)\", cursor: \"pointer\" }}\n                        />\n                    </>\n                }\n            </g>\n            */}\n\n            <styled.TranslateGroup\n                className={`${rd3tClassName}-trans`}\n                onMouseEnter={() => {\n                    handleMouseEnter()\n                }}\n                onMouseDown={() => handleTranslating(true)}\n                onMouseUp={() => handleTranslating(false)}\n                // Devices and shelf positions require their own transforms\n                transform={location.type === 'device' ? 'scale(.07) translate(-180,-140)' : location.type === 'shelf_position' ? 'rotate(90)' : ''}\n            >\n\n                <svg id={`${rd3tClassName}-${schema}`} x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" viewBox=\"0 0 400 400\" style={{ filter: shouldGlow ? 'url(#glow2)' : 'none' }}>\n                    {locationTypes[location.type].svgPath}\n                </svg>\n\n\n            </styled.TranslateGroup>\n\n\n        </styled.WorkstationGroup>\n    )\n}\n\nLocationSvg.propTypes = {\n    handleMouseEnter: PropTypes.func,\n    handleMouseLeave: PropTypes.func,\n    handleMouseDown: PropTypes.func,\n    handleTranslating: PropTypes.func,\n    handleRotating: PropTypes.func,\n}\n\nLocationSvg.defaultProps = {\n    handleMouseEnter: () => {},\n    handleMouseLeave: () => {},\n    handleMouseDown: () => {},\n    handleTranslating: () => {},\n    handleRotating: () => {},\n}\n\nexport default LocationSvg\n","import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport * as d3 from 'd3'\n\n\nconst DragEntityProto = (props) => {\n    const {\n        isSelected,\n        location,\n        handleRotate,\n        handleTranslate,\n        handleDisableDrag,\n        handleEnableDrag,\n        handleTranslateEnd,\n        rd3tClassName,\n        // d3\n    } = props\n\n    const [rotating, setRotating] = useState(false)\n    const [translating, setTranslating] = useState(false)\n\n    const [isBinded, setBinded] = useState(false)\n\n    useEffect(() => {\n        if (isSelected) {\n            bindDragListener()\n        } else {\n            isBinded && unbindDragListener()\n        }\n    })\n\n    let rotateStart = null          // Inital rotation angle\n    let originalRotation = null     // Original rotation of location\n    let deltaRotation = null        // Change in rotation (current angle - start angle)\n\n    let translateStart = useRef(null).current       // Initial coordinates of translate\n    let originalTranslation = useRef([]).current    // Original coordinates of location\n    let deltaTranslation = useRef([]).current       // Change in coordinates (over course of the drag event)\n\n    /** Callback on continuous rotate event */\n    const rotate = (event, element) => {\n\n        // Cant rotate if this location is not selected\n        if (!isSelected) { return }\n        if (!rotating) { setRotating(true) }\n\n        // The angle is calculated between the current cursor location and the center of the location\n        // NOTE: Im not sure why the 160 offset is neccessary. I think it might have to do with the way the menu/status bar\n        // is layered.\n        let angle\n        if (event.sourceEvent.type === \"mousemove\") {    // Computer\n            angle = Math.atan2(event.sourceEvent.clientY - location.y, event.sourceEvent.clientX - location.x) * 180 / Math.PI\n        } else if (event.sourceEvent.type === \"touchmove\") { // Tablet\n            angle = Math.atan2(event.sourceEvent.touches[0].clientY - location.y, event.sourceEvent.touches[0].clientX - location.x) * 180 / Math.PI\n        }\n\n        // Keep track of BOTH the initial rotation of the position, and the start angle of the drag\n        if (rotateStart == null) {\n            originalRotation = location.rotation\n            rotateStart = angle\n        }\n        // The delta is the current angle - the start angle (round to nearest 5th degree or nearest 45 degree)\n        deltaRotation = angle - rotateStart\n        if (Math.abs(deltaRotation % 45) < 5) {\n            deltaRotation = Math.round(deltaRotation / 45) * 45\n        } else {\n            deltaRotation = Math.round(deltaRotation / 10) * 10\n        }\n\n\n        // Final Rotation\n        let rotation = originalRotation - deltaRotation\n        // If rotation goes negative, then add 360 to the number to get irs positive variant\n        if(rotation < 0){\n            rotation = rotation + 360\n        }\n        \n        // Callback passed from props to set the appropriate location atttribute\n        handleRotate(rotation)\n    }\n\n    const rotateEnd = () => {\n        // Effectivly clears the rotate event\n        rotateStart = null\n    }\n\n    const currentTranslation = useMemo(() => [location.x, location.y], [location])\n\n    const translate = (event, element) => {\n\n        // Cant move location if the location isnt selected\n        if (!isSelected) { return }\n        if (!translating) { setTranslating(true) }\n\n        // Set the translation based on the event\n        let translation = []\n        if (event.sourceEvent.type === \"mousemove\") {    // Computer\n            translation = [event.sourceEvent.clientX, event.sourceEvent.clientY]\n        } else if (event.sourceEvent.type === \"touchmove\") { // Tablet\n            translation = [event.sourceEvent.touches[0].clientX, event.sourceEvent.touches[0].clientY]\n        }\n\n        // Keep track of the initial positon coords and the start coords of the event\n        if (translateStart == null) {\n            translateStart = translation\n            originalTranslation = currentTranslation\n        }\n        // Calculate the change in translation relative to the start coordinates (round to nearest 5th pixel)\n        deltaTranslation[0] = Math.round((translation[0] - translateStart[0]) / 5) * 5\n        deltaTranslation[1] = Math.round((translation[1] - translateStart[1]) / 5) * 5\n\n        // Callback to set the appropriate location attributes\n        handleTranslate({ x: originalTranslation[0] + deltaTranslation[0], y: originalTranslation[1] + deltaTranslation[1] })\n    }\n\n    const translateEnd = () => {\n        translateStart = null\n    }\n\n    /* translateStart = nullconvertRealToD3\n     * Bind the listener that will listen for events that are made directly to this element\n     */\n    const bindDragListener = () => {\n\n        const mainElement = d3.select(`.${rd3tClassName}`)\n        const ringElement = d3.select(`.${rd3tClassName}-rot`)\n        const rectElement = d3.select(`.${rd3tClassName}-trans`)\n\n        // Define drag callbacks for dragging the ring (which rotates the location)\n        ringElement.call(\n            d3.behavior.drag()\n                .on(\"dragstart\", () => {\n                    if (isSelected) {\n                        handleDisableDrag()\n                    }\n                })\n                .on(\"drag\", function (d, i) {\n                    if (isSelected) {\n                        rotate(d3.event, mainElement)\n                    }\n                })\n                .on(\"dragend\", () => {\n                    if (isSelected) {\n                        rotateEnd()\n                        handleEnableDrag()\n                        setRotating(false)\n                    }\n                })\n        )\n\n        // Define drag callbacks for the element itself (which translates location)\n        rectElement.call(\n            d3.behavior.drag()\n                .on(\"dragstart\", () => {\n                    if (isSelected) {\n                        originalTranslation = currentTranslation\n                        handleDisableDrag()\n                    }\n                })\n                .on(\"drag\", function (d, i) {\n                    if (isSelected) {\n                        translate(d3.event, mainElement)\n                    }\n                })\n                .on(\"dragend\", async () => {\n                    if (isSelected) {\n                        if (deltaTranslation.length === 2) {\n                            handleTranslateEnd({ x: originalTranslation[0] + deltaTranslation[0], y: originalTranslation[1] + deltaTranslation[1] })\n                            translateEnd()\n                        }\n                        handleEnableDrag()\n                        setTranslating(false)\n                    }\n                })\n        )\n\n        setBinded(true)\n    }\n\n    const unbindDragListener = () => {\n\n        const mainElement = d3.select(`.${rd3tClassName}`)\n        const ringElement = d3.select(`.${rd3tClassName}-rot`)\n        const rectElement = d3.select(`.${rd3tClassName}-trans`)\n\n        // Define drag callbacks for dragging the ring (which rotates the location)\n        ringElement.call(\n            d3.behavior.drag()\n                .on(\"dragstart\", () => {})\n                .on(\"drag\", () => {})\n                .on(\"dragend\", () => {})\n        )\n\n        // Define drag callbacks for the element itself (which translates location)\n        rectElement.call(\n            d3.behavior.drag()\n                .on(\"dragstart\", () => {})\n                .on(\"drag\", () => {})\n                .on(\"dragend\", async () => {})\n        )\n\n        setBinded(false)\n    }\n\n    return (null)\n}\n\nexport default DragEntityProto","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n\nimport * as styled from \"./station.style\";\n\n// Import actions\nimport { hoverStationInfo } from \"../../../../redux/actions/widget_actions\";\nimport {\n    setSelectedStation,\n    setStationAttributes,\n} from \"../../../../redux/actions/stations_actions\";\nimport {\n    setSelectedTask,\n    setTaskAttributes,\n} from \"../../../../redux/actions/tasks_actions\";\nimport { pageDataChanged } from \"../../../../redux/actions/sidebar_actions\";\n\n// Import Utils\nimport { handleWidgetHoverCoord } from \"../../../../methods/utils/widget_utils\";\nimport { convertD3ToReal } from \"../../../../methods/utils/map_utils\";\nimport { editing } from \"../../../../methods/utils/locations_utils\";\n\n// Import Constants\nimport { StationTypes } from \"../../../../constants/station_constants\";\n\n// Import Components\nimport LocationSvg from \"../location_svg/location_svg\";\nimport DragEntityProto from \"../drag_entity_proto\";\nimport {\n    generateDefaultRoute,\n} from \"../../../../methods/utils/route_utils\";\n\nfunction Station(props) {\n    const {\n        station,\n        rd3tClassName,\n        d3,\n        handleEnableDrag,\n        handleDisableDrag,\n        mouseDown,\n        // isSelected,\n    } = props;\n\n    const [hovering, setHovering] = useState(false);\n    const [rotating, setRotating] = useState(false);\n    const [translating, setTranslating] = useState(false);\n\n    const selectedStation = useSelector(\n        (state) => state.stationsReducer.selectedStation\n    );\n    const editingProcess = useSelector(\n        (state) => state.processesReducer.editingProcess\n    );\n    const selectedPosition = useSelector(\n        (state) => state.positionsReducer.selectedPosition\n    );\n    const selectedTask = useSelector(\n        (state) => state.tasksReducer.selectedTask\n    );\n    const selectedProcess = useSelector(\n        (state) => state.processesReducer.selectedProcess\n    );\n    const hoveringInfo = useSelector(\n        (state) => state.widgetReducer.hoverStationInfo\n    );\n\n    const dispatch = useDispatch();\n    const dispatchHoverStationInfo = (info) => dispatch(hoverStationInfo(info));\n    const dispatchSetSelectedStation = (station) =>\n        dispatch(setSelectedStation(station));\n    const dispatchSetStationAttributes = (id, attr) =>\n        dispatch(setStationAttributes(id, attr));\n    const dispatchSetSelectedTask = async (task) =>\n        await dispatch(setSelectedTask(task));\n    const dispatchSetTaskAttributes = (id, load) =>\n        dispatch(setTaskAttributes(id, load));\n    const dispatchPageDataChanged = (bool) => dispatch(pageDataChanged(true));\n\n    // ======================================== //\n    //                                          //\n    //        Station Characteristics           //\n    //                                          //\n    // ======================================== //\n\n    const isSelected = !!selectedStation && selectedStation._id === station._id\n\n    let disabled = false;\n    if (!!selectedTask && !!selectedProcess) {\n    } else {\n        // Disable if the selected station is not this station\n        if (!!selectedStation && selectedStation._id !== station._id)\n            disabled = true;\n        // Disable if theres a selected position and the station's children dont contain that position\n        else if (\n            !!selectedPosition &&\n            !station.children.includes(selectedPosition._id)\n        )\n            disabled = true;\n    }\n\n    const shouldGlow = false;\n\n    let highlight = false;\n    // Set selected to true if the selected task inculdes the station\n    if (\n        !!selectedTask &&\n        (selectedTask?.load === station._id ||\n            selectedTask?.unload === station._id)\n    )\n        highlight = true;\n\n    // Set Color\n    let color = StationTypes[station.type].color;\n    if (!isSelected && disabled) color = \"#c4cbff\";\n    // Grey\n    else if (highlight) color = \"#38eb87\"; // Green\n\n    // ======================================== //\n    //                                          //\n    //            Station Functions             //\n    //                                          //\n    // ======================================== //\n\n    // Used to see if a widget Page is opened\n    let params = useParams();\n    useEffect(() => {\n        window.addEventListener(\"mouseup\", onSetListener);\n        return () => {\n            window.removeEventListener(\"mouseup\", onSetListener);\n        };\n    }, []);\n\n    const onSetListener = () => {\n        setRotating(false);\n        setTranslating(false);\n    };\n\n    /**\n     * This runs on page load (thats mean station are mounted) and shows a widget page if it returns true.\n     * If there is a station ID in the params (URL) and it matches this station,\n     * and the URL (params) container a widget page then the widget page should be showing\n     */\n    useEffect(() => {\n        if (\n            params.stationID !== undefined &&\n            params.stationID === props.station._id &&\n            !!params.widgetPage\n        ) {\n            dispatchHoverStationInfo(handleWidgetHover());\n        }\n    }, []);\n\n    /**\n     * Passes the X, Y, scale and ID of station to redux which is then used in widgets\n     */\n    const handleWidgetHover = () => {\n        return handleWidgetHoverCoord(station, rd3tClassName, d3);\n    };\n\n    // Handles if URL has widget page open\n    const onWidgetPageOpen = () => {\n        // If widget page is open, hovering is false and the open widget page stations id matches the station ID, set it to true so\n        // that the widget page doesn't disappear when mouse goes out of page\n        if (\n            !!params.widgetPage &&\n            !hovering &&\n            params.stationID === station._id\n        ) {\n            setHovering(true);\n            dispatchHoverStationInfo(handleWidgetHover());\n        }\n\n        // If hovering is true but there's no hoverInfo in the reducer (see widgets for when hoverInfo is set to null), set hovering to false\n        else if (!isSelected && hovering && hoveringInfo === null) {\n            setHovering(false);\n        }\n    };\n\n    /**\n     * This handles when a station is selected for a task\n     * Can only add a station to a task if the station is a warehouse or a human\n     *\n     * For a warehouse, the thing to remember is that you push to a warehouse and pull from a warehouse\n     */\n    const onSetStationTask = () => {\n        if (!!selectedTask) {\n            if (\n                selectedTask?.load !== null &&\n                selectedTask?.unload === null &&\n                selectedTask.load !== station._id\n            ) {\n                // If it's a warehouse and the load station has been selected, then the task type has to be a push\n                // You can only push to a ware house\n                let type = station.type === \"warehouse\" ? \"push\" : \"push\";\n\n                dispatchSetTaskAttributes(selectedTask._id, {\n                    unload: station._id,\n                    type,\n                });\n            } else {\n                // If it's a warehouse and the load position has not been selected then the task type is a pull\n                // You can only pull from a ware house\n                let type = station.type === \"warehouse\" ? \"pull\" : \"push\";\n\n                dispatchSetTaskAttributes(selectedTask._id, {\n                    load: station._id,\n                    unload: null,\n                    type,\n                });\n            }\n        } else if (!!selectedProcess) {\n            let newRoute = generateDefaultRoute(selectedProcess._id);\n            newRoute.type = station.type === \"warehouse\" ? \"push\" : \"push\";\n            newRoute.load = station._id;\n            newRoute.unload = null;\n\n            dispatchSetSelectedTask(newRoute);\n        }\n    };\n\n    const onMouseEnter = () => {\n        // Only allow hovering if there is no selected task and mouse is not down on the map\n        if (\n            !hoveringInfo &&\n            selectedTask === null &&\n            !station.temp &&\n            !mouseDown &&\n            !editingProcess\n        ) {\n            setHovering(true);\n\n            if (\n                !editing() &&\n                !rotating &&\n                !translating &&\n                !selectedStation &&\n                !selectedTask &&\n                !selectedProcess\n            ) {\n                dispatchHoverStationInfo(handleWidgetHover());\n                dispatchSetSelectedStation(station);\n            }\n        }\n    };\n\n    const onMouseDown = () => {\n        if (!disabled) onSetStationTask();\n        dispatchPageDataChanged(true);\n    };\n\n    const onTranslating = (bool) => {\n        setTranslating(bool);\n    };\n\n    const onRotating = (bool) => {\n        setRotating(bool);\n    };\n\n    const onMouseLeave = () => {\n        setHovering(false);\n    };\n\n    return (\n        <React.Fragment key={`frag-loc-${station._id}`}>\n            <LocationSvg\n                location={station}\n                rd3tClassName={rd3tClassName}\n                color={color}\n                d3={d3}\n                isSelected={isSelected}\n                hovering={hovering}\n                rotating={rotating}\n                hoveringInfo={hoveringInfo}\n                shouldGlow={shouldGlow}\n                handleMouseEnter={onMouseEnter}\n                handleMouseLeave={onMouseLeave}\n                handleMouseDown={onMouseDown}\n                handleTranslating={onTranslating}\n                handleRotating={onRotating}\n            ></LocationSvg>\n\n            <DragEntityProto\n                isSelected={isSelected}\n                location={station}\n                rd3tClassName={rd3tClassName}\n                d3={() => d3()}\n                handleRotate={(rotation) => {\n                    dispatchSetStationAttributes(station._id, { rotation });\n                }}\n                handleTranslate={({ x, y }) => \n                    dispatchSetStationAttributes(station._id, { x, y })\n                }\n                handleTranslateEnd={({ x, y }) => {\n                    const pos = convertD3ToReal([x, y], props.d3);\n                    dispatchSetStationAttributes(station._id, {\n                        x,\n                        y,\n                        pos_x: pos[0],\n                        pos_y: pos[1],\n                    });                    \n                }}\n                handleEnableDrag={() => {\n                    handleEnableDrag();\n                }}\n                handleDisableDrag={() => {\n                    handleDisableDrag();\n                }}\n            />\n            {onWidgetPageOpen()}\n        </React.Fragment>\n    );\n}\n\nexport default Station;\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useParams } from 'react-router-dom'\n\n// Import Utils\nimport { deepCopy } from '../../../../methods/utils/utils'\nimport { handleWidgetHoverCoord } from '../../../../methods/utils/widget_utils'\nimport { convertD3ToReal } from '../../../../methods/utils/map_utils'\nimport { editing } from '../../../../methods/utils/locations_utils'\nimport { getProcessStationsWhileEditing } from '../../../../methods/utils/processes_utils'\n\n// Import Constants\nimport { PositionTypes } from '../../../../constants/position_constants'\n\n// Import Actions\nimport { selectTask, setTaskAttributes } from '../../../../redux/actions/tasks_actions'\nimport { setSelectedPosition, setPositionAttributes } from '../../../../redux/actions/positions_actions'\nimport { hoverStationInfo } from '../../../../redux/actions/widget_actions'\nimport { pageDataChanged } from '../../../../redux/actions/sidebar_actions'\n\n// Import Components\nimport LocationSvg from '../location_svg/location_svg'\nimport DragEntityProto from '../drag_entity_proto'\nimport { getPreviousRoute } from \"../../../../methods/utils/processes_utils\";\nimport {\n    getLoadPositionId,\n    getLoadStationId, getRouteEnd, getRouteIndexInRoutes, getRouteStart,\n    isPositionAtLoadStation, isPositionAtUnloadStation,\n    isPositionInRoutes,\n    isStationInRoutes, isStationLoadStation, isStationUnloadStation\n} from \"../../../../methods/utils/route_utils\";\nimport {immutableDelete} from \"../../../../methods/utils/array_utils\";\n\nfunction Position(props) {\n\n    const {\n        d3,\n        position,\n        rd3tClassName,\n        handleEnableDrag,\n        handleDisableDrag,\n        mouseDown\n    } = props\n\n\n    const {\n        _id: positionId\n    } = position\n\n    const [hovering, setHovering] = useState(false)\n    const [rotating, setRotating] = useState(false)\n    const [translating, setTranslating] = useState(false)\n\n    const dispatch = useDispatch()\n    const dispatchSetTaskAttributes = (id, load) => dispatch(setTaskAttributes(id, load))\n    const dispatchHoverStationInfo = (info) => dispatch(hoverStationInfo(info))\n    const dispatchSetSelectedPosition = (position) => dispatch(setSelectedPosition(position))\n    const dispatchSetPositionAttributes = (id, attr) => dispatch(setPositionAttributes(id, attr))\n    const dispatchPageDataChanged = (bool) => dispatch(pageDataChanged(true))\n\n    const selectedTask = useSelector(state => state.tasksReducer.selectedTask)\n    const selectedProcess = useSelector(state => state.processesReducer.selectedProcess)\n    const selectedPosition = useSelector(state => state.positionsReducer.selectedPosition)\n    const selectedStation = useSelector(state => state.stationsReducer.selectedStation)\n    const hoveringID = useSelector(state => state.widgetReducer.hoverLocationID)\n    const hoveringInfo = useSelector(state => state.widgetReducer.hoverStationInfo)\n    const stations = useSelector(state => state.stationsReducer.stations)\n    const positions = useSelector(state => state.positionsReducer.positions)\n    const tasks = useSelector(state => state.tasksReducer.tasks)\n    const selectedStationChildrenCopy = useSelector(state => state.positionsReducer.selectedStationChildrenCopy)\n    const fixingProcess = useSelector(state => state.processesReducer.fixingProcess)\n\n    // ======================================== //\n    //                                          //\n    //       Position Characteristics           //\n    //                                          //\n    // ======================================== //\n    const routeStart = getRouteStart(selectedTask)\n    const routeEnd = getRouteEnd(selectedTask)\n    // Used to allow translating/rotation\n    let isSelected = false\n    // Set selected if the positon is part of a stations children copy and no selected task\n    if (!!selectedStationChildrenCopy && (positionId in selectedStationChildrenCopy) && !selectedTask) isSelected = true\n    // Set selected if there is a selected postion that is this position and no selected task\n    else if (!!selectedPosition && selectedPosition._id === positionId && !selectedTask) isSelected = true\n    // Set selected if the position is a temp right click\n    else if (position.schema === 'temporary_position') isSelected = true\n\n    // Used to disable the ability to add position as a task\n    let disabled = false\n\n    if(selectedTask && selectedProcess) {\n\n\n        if (!position.parent) {\n            disabled = true\n        }\n\n        // This filters out positions when fixing a process\n        // If the process is broken, then you can only start the task at the route before break's unload location\n        if (!!fixingProcess) {\n            if (!position.parent) {\n                disabled = true\n            }\n            else {\n                // setting load (or both are set, in which case logic is the same, as click another position would be setting the load\n                if ((!routeStart) || (routeStart && routeEnd)) {\n                    // disable all positions except those at unload station of the route before the break\n                    const routeBeforeBreak = selectedProcess.routes[selectedProcess.broken - 1]\n                    disabled = !isPositionAtUnloadStation(routeBeforeBreak, positionId)\n                }\n\n                // setting unload\n                else if (!routeEnd) {\n                    if (!positions[selectedTask?.load?.position]) disabled = true\n\n                    // don't allow selecting positions at stations already in process\n                    const routeAfterBreak = selectedProcess.routes[selectedProcess.broken]\n\n                    if(isPositionInRoutes(selectedProcess.routes, positionId) && !isPositionAtLoadStation(routeAfterBreak, positionId)) disabled = true\n                }\n            }\n        }\n            // This filters positions when making a process\n            // If the process has routes, and you're adding a new route, you should only be able to add a route starting at the last station\n        // This eliminates process with gaps between stations\n        else {\n\n             {\n                // extract insertIndex for adding new routes to beginning of a process\n                const {\n                    temp\n                } = selectedTask || {}\n                const {\n                    insertIndex\n                } = temp || {}\n\n                // not first route\n                if (selectedProcess.routes.length > 0) {\n                    const routeIndex = getRouteIndexInRoutes(selectedProcess.routes.map((currProcess) => currProcess._id), selectedTask?._id)\n\n                    // setting load (or both have been set)\n                    if (!routeStart || (routeStart && routeEnd)) {\n\n                        // adding to beginning of process\n                        if (insertIndex === 0) {\n                            // disable all positions already in the process\n                            if(isPositionInRoutes(selectedProcess.routes, positionId)) disabled = true\n                        }\n\n                        else if (routeIndex === 0) {\n                            if (isPositionInRoutes(immutableDelete(selectedProcess.routes, 0), positionId)) disabled = true\n                        }\n\n                        else {\n                            // must start at position at unload station of previous route\n                            const previousRoute = getPreviousRoute(selectedProcess.routes, selectedTask._id)\n                            const previousRouteEnd = getRouteEnd(previousRoute)\n                            if(!isPositionAtUnloadStation(previousRoute, positionId) && previousRouteEnd) disabled = true\n\n\n\n                            const loadPositionId = getLoadPositionId(selectedTask)\n                            const loadStationId = getLoadStationId(selectedTask)\n\n                            if (isPositionInRoutes(selectedProcess.routes, positionId) && (previousRouteEnd !== position.parent) && positionId !== loadPositionId && loadStationId !== position.parent) disabled = true\n                        }\n                    }\n\n                    // setting unload\n                    else if (!routeEnd) {\n\n                        if (!positions[selectedTask?.load?.position]) disabled = true\n\n                        // adding new to beginning of process\n                        if (insertIndex === 0) {\n                            // disable positions already used\n                            const firstRoute = selectedProcess.routes[0]\n                            if(isPositionInRoutes(selectedProcess.routes, positionId) && !isPositionAtLoadStation(firstRoute, positionId)) disabled = true\n\n                            // disable positions at load station of current route, as unload and load shouldn't be at same route\n                            if (isPositionAtLoadStation(selectedTask, positionId)) disabled = true\n                        }\n\n                        else if (routeIndex === 0) {\n                            const nextRoute = selectedProcess.routes[1]\n                            if (isPositionInRoutes(selectedProcess.routes, positionId) && !isPositionAtLoadStation(nextRoute, positionId)) disabled = true\n                        }\n\n                        else {\n                            const nextRoute = selectedProcess.routes[routeIndex + 1]\n                            // disable positions already used\n                            if (isPositionInRoutes(selectedProcess.routes, positionId) && (!isPositionAtLoadStation(nextRoute, positionId) || routeIndex === -1)) disabled = true\n\n                            // disable positions at load station of current route, as unload and load shouldn't be at same route\n                            if (isPositionAtLoadStation(selectedTask, positionId)) disabled = true\n                        }\n                    }\n                }\n\n                // first route\n                else {\n                    // setting load\n                    if (!routeStart || (routeStart && routeEnd)) {\n                        // all positions are available for load position of first route\n                    }\n\n                    // setting unload\n                    else if (!routeEnd) {\n                        // disable positions at load station of current route, as unload and load shouldn't be at same route\n                        if (isPositionAtLoadStation(selectedTask, positionId)) disabled = true\n                    }\n                }\n            }\n        }\n    }\n    else {\n        // Disable if the selectedPosition is not this position\n        if (!!selectedPosition && selectedPosition._id !== positionId) disabled = true\n\n        // Disable if making a task and this position does not have a parent\n        else if (!!selectedTask && !position.parent) disabled = true\n\n        // Disable if the position does not belong to the children copy\n        else if (!!selectedStationChildrenCopy && !(positionId in selectedStationChildrenCopy)) disabled = true\n\n        // Disbale if the selected stations children does not include this station\n        else if (!!selectedStation && !selectedStation.children.includes(positionId)) disabled = true\n    }\n\n    // Tells the position to glow\n    const shouldGlow = selectedTask !== null &&\n        ((selectedTask.load.position == positionId && selectedTask.type == 'push') ||\n            (selectedTask.unload.position == positionId && selectedTask.type == 'pull') ||\n            (selectedTask.load.position == positionId && selectedTask.type == 'both') ||\n            (selectedTask.unload.position == positionId && selectedTask.type == 'both'))\n\n\n    // Used to highlight position if the position is part of the selected task\n    let highlight = false\n    if (!!selectedTask && (selectedTask.load.position === positionId || selectedTask.unload.position === positionId)) highlight = true\n\n\n    // Set Color\n    let color = PositionTypes[position.type].color\n    if (!isSelected && disabled) color = '#afb5c9' // Grey\n    else if (highlight) color = '#38eb87' // Green\n\n    // ======================================== //\n    //                                          //\n    //           Position Functions             //\n    //                                          //\n    // ======================================== //\n\n    useEffect(() => {\n        window.addEventListener(\"mouseup\", onSetListener)\n        return () => {\n            window.removeEventListener(\"mouseup\", onSetListener)\n        }\n\n    }, [])\n\n    const onSetListener = () => {\n        setRotating(false)\n        setTranslating(false)\n    }\n\n\n    // Automatically opens widget pages and sets hovering to true in the position is a temp right click\n    useEffect(() => {\n        if (position !== null && position.schema === 'temporary_position') {\n            setHovering(true)\n            dispatchHoverStationInfo(handleWidgetHover())\n            dispatchSetSelectedPosition(position)\n        }\n    }, [])\n\n\n    /**\n    * Passes the X, Y, scale and ID of position to redux which is then used in widgets\n    */\n    const handleWidgetHover = () => {\n\n        return handleWidgetHoverCoord(position, rd3tClassName, d3)\n\n    }\n\n    const onSetPositionTask = () => {\n\n        // Commented out for now\n        // If there's a selected process and the process has routes and the station is not selected, then disable it from being selected\n        // if (!!selectedProcess && selectedProcess.routes.length > 0 && !isSelected) return\n\n\n        if (selectedTask !== null) {\n            // If the load position has been defined but the unload position hasnt, assign the unload position\n            if (selectedTask.load.position !== null && selectedTask.unload.position === null) {\n                let unload = deepCopy(selectedTask.unload)\n                let type = selectedTask.type\n                unload.position = positionId\n                if (position.parent !== null) {\n                    unload.station = position.parent\n                } else {\n                    type = 'push'\n                }\n                dispatchSetTaskAttributes(selectedTask._id, { unload, type })\n            } else { // Otherwise assign the load position and clear the unload position (to define a new unload)\n                let load = deepCopy(selectedTask.load)\n                let unload = deepCopy(selectedTask.unload)\n                let type = selectedTask.type\n                load.position = positionId\n                if (position.parent !== null) {\n                    load.station = position.parent\n                } else {\n                    type = 'pull'\n                }\n                unload.position = null\n                unload.station = null\n                dispatchSetTaskAttributes(selectedTask._id, { load, unload, type })\n            }\n        }\n    }\n\n    const onMouseEnter = () => {\n        // Only hover if there is no selected task\n        if (!hoveringInfo && selectedTask === null && !position.temp && !mouseDown) {\n            setHovering(true)\n            if (!editing() && !rotating && !translating && !selectedPosition && !selectedStation && !selectedTask) {\n                dispatchHoverStationInfo(handleWidgetHover())\n                dispatchSetSelectedPosition(position)\n\n            }\n        }\n\n    }\n\n    const renderParentLine = () => {\n\n        const parent = ((!!selectedStationChildrenCopy && positionId in selectedStationChildrenCopy) && !!selectedStation) ? selectedStation : stations[position.parent]\n        // TODO: Temp fix\n        if (!parent) return\n        return (\n            <line x1={`${position.x}`} y1={`${position.y}`}\n                x2={`${parent.x}`} y2={`${parent.y}`}\n                stroke={color} strokeWidth=\"1.4\" shapeRendering=\"geometricPrecision\" style={{ opacity: '0.3', }}\n            />\n        )\n    }\n\n    const onMouseDown = () => {\n        if (!disabled) onSetPositionTask()\n        if(selectedPosition?.schema!==\"temporary_position\"){\n        dispatchPageDataChanged(true)\n      }\n    }\n\n    const onTranslating = (bool) => {\n        if (!isSelected) {\n            setTranslating(bool)\n        }\n    }\n\n    const onRotating = (bool) => {\n        setRotating(bool)\n        if (!bool) {\n            setHovering(false)\n        }\n    }\n\n    const onMouseLeave = () => {\n        position.schema !== 'temporary_position' && setHovering(false)\n    }\n\n    return (\n        <React.Fragment key={`frag-loc-${positionId}`}>\n            {!!position.parent && renderParentLine()}\n            <LocationSvg\n                location={position}\n                rd3tClassName={rd3tClassName}\n                color={color}\n                d3={d3}\n                isSelected={isSelected}\n                hovering={hovering}\n                rotating={rotating}\n                hoveringInfo={position.schema !== 'temporary_position' ? hoveringInfo : null}\n                shouldGlow={shouldGlow}\n\n                handleMouseEnter={onMouseEnter}\n                handleMouseLeave={onMouseLeave}\n                handleMouseDown={onMouseDown}\n                handleTranslating={onTranslating}\n                handleRotating={onRotating}\n\n            />\n\n            <DragEntityProto\n                isSelected={isSelected}\n                location={position}\n                rd3tClassName={rd3tClassName}\n                d3={() => d3()}\n\n                handleRotate={(rotation) => { dispatchSetPositionAttributes(positionId, { rotation }) }}\n                handleTranslate={({ x, y }) => dispatchSetPositionAttributes(positionId, { x, y })}\n                handleTranslateEnd={({ x, y }) => {\n                    const pos = convertD3ToReal([x, y], props.d3)\n                    dispatchSetPositionAttributes(positionId, { pos_x: pos[0], pos_y: pos[1] })\n                }}\n\n                handleEnableDrag={() => {\n                    handleEnableDrag()\n                }}\n                handleDisableDrag={() => {\n                    handleDisableDrag()\n                }}\n\n\n            />\n        </React.Fragment>\n    )\n}\n\nexport default Position\n","import React, { useMemo, useEffect, useState } from 'react';\n\nconst HeatSpot = (props) => {\n\n    const {\n        station,\n        wipRatio,\n        d3Scale\n    } = props;\n\n    const color = () => {\n        if (wipRatio < 1.5) {\n            return 'url(#goodGrad)';\n        } else if (wipRatio < 3) {\n            return 'url(#okayGrad)';\n        } else {\n            return 'url(#badGrad)'\n        }\n    }\n\n    const spotSize = 30*Math.min(Math.max(1, wipRatio), 4)*d3Scale;\n    if (isNaN(spotSize)) {return null}\n    \n\n    return (\n        \n        <g>\n            <circle cx={station.x} cy={station.y} r={spotSize} fill={color()} />\n        </g>\n    )\n}\n\nexport default HeatSpot;","import React, { useEffect, useMemo, useState } from 'react'\nimport moment from 'moment';\n\n// functions external\nimport { useDispatch, useSelector } from \"react-redux\";\n\n/// utils\nimport { getProcessStationsSorted } from '../../../methods/utils/processes_utils';\nimport { getBinQuantity, getCardsInBin, getLotTotalQuantity } from '../../../methods/utils/lot_utils';\nimport HeatSpot from './heatspot/heatspot';\n\n\nconst HeatMap = (props) => {\n\n    const {\n        map_id,\n        d3Scale\n    } = props;\n\n    const [stationWIPRatios, setStationWIPRatios] = useState({})\n\n    const cards = useSelector(state => state.cardsReducer.cards)\n\tconst routes = useSelector(state => state.tasksReducer.tasks)\n\n    const editingStation = useSelector(state => state.stationsReducer.editingStation)\n    const editingPosition = useSelector(state => state.positionsReducer.editingPosition)\n\n    let stations = useSelector(state => state.stationsReducer.stations)\n    stations = Object.values(stations).filter(station => (station.map_id === map_id))\n\n\tlet processes = useSelector(state => state.processesReducer.processes)\n    processes = Object.values(processes).filter((currProcess) => currProcess.map_id === map_id)\n\n    useEffect(() => {\n\n        let WIPBuildupRatios = {};    // The WIP ratios of each station on the map (stationWIP / meanProcessWIP) (refer to meanProcessWIP (~line 45))\n        processes.forEach(process => {\n            const processStations = getProcessStationsSorted(process, routes);\n\n            let totalProcessWIP = 0;    // Tracks total WIP in the process\n            let stationWIP = {}         // Tracks WIP at each station in the process (by id)\n            let i, pStationId, stationsWithWip = 0;\n            for (pStationId of processStations) { // Loop through each station in process to get mean WIP of the process\n                stationWIP[pStationId] = Object.values(cards).filter(card => card.process_id === process._id).reduce((accumWIP, card) => accumWIP + getBinQuantity(card, pStationId), 0)\n                stationsWithWip += (stationWIP[pStationId] > 0) ? 1 : 0;\n                totalProcessWIP += stationWIP[pStationId];\n            }\n\n            const meanProcessWIP = totalProcessWIP / stationsWithWip;    // The mean WIP at each station in this prcess\n\n            // Loop through stations again to find WIP Ratio (stationWIP / meanProcessWIP)\n            let WIPRatio;\n            for (i=0; i<processStations.length; i++) {\n                pStationId = processStations[i];\n                WIPRatio = stationWIP[pStationId] / meanProcessWIP;\n\n                if (pStationId in WIPBuildupRatios) {\n                    WIPBuildupRatios[pStationId] = WIPRatio + WIPBuildupRatios[pStationId] // Take the sum of WIP ratios for every process that goes through the station\n                } else if (WIPRatio > 0) {\n                    WIPBuildupRatios[pStationId] = WIPRatio;\n                }\n\n            }\n        });\n\n        setStationWIPRatios(WIPBuildupRatios);\n    }, [cards])\n\n    const spotStartOpacity = 0.7;\n    const spotEndOpacity = 0;\n\n    // console.log('render', stationWIPRatios)\n    \n    return (\n        <g>\n            <defs>\n                <radialGradient id=\"goodGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"20%\" style={{stopColor: '#00ffcf', stopOpacity: spotStartOpacity}} />\n                    <stop offset=\"100%\" style={{stopColor: '#00ff97', stopOpacity: spotEndOpacity}} />\n                </radialGradient>\n                <radialGradient id=\"okayGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"20%\" style={{stopColor: '#ff9300', stopOpacity: spotStartOpacity}} />\n                    <stop offset=\"100%\" style={{stopColor: '#ffc200', stopOpacity: spotEndOpacity}} />\n                </radialGradient>\n                <radialGradient id=\"badGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"20%\" style={{stopColor: '#ff0e00', stopOpacity: spotStartOpacity}} />\n                    <stop offset=\"100%\" style={{stopColor: '#ff6800', stopOpacity: spotEndOpacity}} />\n                </radialGradient>\n            </defs>\n            {!editingStation && !editingPosition &&\n                stations.map(station => \n                    station._id in stationWIPRatios && \n                        <HeatSpot \n                            key={station._id+'-heatspot'}\n                            station={station} \n                            wipRatio={stationWIPRatios[station._id]} \n                            d3Scale={d3Scale}\n                        />\n                )\n            }\n        </g>\n    );\n}\n\nexport default HeatMap;","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\n// Import Actions\nimport { setTaskAttributes } from '../../../redux/actions/tasks_actions'\nimport {getLoadPositionId, getUnloadPositionId, getRouteEnd, getRouteStart } from \"../../../methods/utils/route_utils\";\n\nexport default function RatsnestPaths(props) {\n\n    const {\n        route,\n        d3Scale\n    } = props\n\n    // console.log(route)\n    const tasks = useSelector(state => state.tasksReducer.tasks)\n    const positions = useSelector(state => state.positionsReducer.positions)\n    const stations = useSelector(state => state.stationsReducer.stations)\n\n    const loadPositionId = getLoadPositionId(tasks[route])\n    const unloadPositionId = getUnloadPositionId(tasks[route])\n\n    const startPos = !!positions[loadPositionId] ? positions[loadPositionId] : stations[loadPositionId]\n    const endPos = !!positions[unloadPositionId] ? positions[unloadPositionId] : stations[unloadPositionId]\n\n    if (!startPos || !endPos) {return null}\n\n\n    return (\n        <>\n            <g>\n                <line x1={`${startPos.x}`} y1={`${startPos.y}`}\n                    x2={`${endPos.x}`} y2={`${endPos.y}`}\n                    strokeWidth={`${d3Scale * 1.5}`} stroke={'lightgrey'}\n                    strokeLinecap=\"round\"\n                />\n            </g>\n        </>\n    )\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux'\n\nimport RatsnestPath from './ratsnest_path';\n\nconst RatsNest = (props) => {\n\n    const {\n        map_id,\n        d3Scale\n    } = props;\n\n    const processes = useSelector(state => state.processesReducer.processes);\n    const selectedProcess = useSelector(state => state.processesReducer.selectedProcess);\n    const mapProcesses = Object.values(processes)\n\n    const editingStation = useSelector(state => state.stationsReducer.editingStation)\n    const editingPosition = useSelector(state => state.positionsReducer.editingPosition)\n\n    return (\n        <>\n            {!editingStation && !editingPosition &&\n                mapProcesses.filter((process) => !selectedProcess || selectedProcess._id !== process._id).map((process, i) => process.routes.map((route,j) => (\n                    <RatsnestPath key={`ratsnest-${i}-${j}`} route={route} d3Scale={d3Scale} id={`ratsnest-path-${route._id}`}/>\n                )))\n            }\n        </>\n    )\n}\n\nexport default RatsNest;","import React, { Component, useState, lazy, Suspense } from 'react'\nimport { ReactDOM, Route } from 'react-dom'\nimport {connect, useSelector} from 'react-redux';\nimport moduleName from 'react'\nimport { withRouter } from \"react-router-dom\";\n\nimport * as styled from './map_view.style'\n\nimport uuid from 'uuid';\nimport * as d3 from 'd3'\n\n// Import Utils\nimport { convertD3ToReal, convertRealToD3, getRelativeOffset } from '../../methods/utils/map_utils'\nimport { getIsEquivalent, } from '../../methods/utils/utils.js'\n\n// Import Actions\nimport { getMap, getMaps } from '../../redux/actions/map_actions'\nimport { postSettings } from '../../redux/actions/settings_actions'\nimport { getStations, updateStations, setStationAttributes, setSelectedStation } from '../../redux/actions/stations_actions'\nimport { updatePositions, postPosition, setPositionAttributes, setSelectedPosition } from '../../redux/actions/positions_actions'\n\nimport { widgetLoaded, hoverStationInfo } from '../../redux/actions/widget_actions'\n\n// Import Components\nimport Station from '../../components/map/locations/station/station'\nimport Position from '../../components/map/locations/position/position'\nimport HeatMap from '../../components/map/heatmap/heatmap'\nimport RatsNest from '../../components/map/ratsnest/ratsnest'\n\n// logging\nimport log from \"../../logger\"\nimport { setCurrentMap } from \"../../redux/actions/map_actions\";\nimport { getHasStartAndEnd, getUnloadPositionId } from \"../../methods/utils/route_utils\";\nimport { postLocalSettings } from '../../redux/actions/local_actions';\nconst logger = log.getLogger(\"MapView\")\n\nconst TaskPaths = lazy(()=> import('../../components/map/task_paths/task_paths.js'))\nconst ProcessPaths = lazy(()=> import('../../components/map/process_paths/process_paths'))\nconst RightClickMenu = lazy(()=> import('../../components/map/right_click_menu/right_click_menu'))\nconst Widgets = lazy(()=> import('../../components/widgets/widgets'))\nconst MapApps = lazy(()=> import('../../components/map/map_apps/map_apps'))\n\nexport class MapView extends Component {\n    constructor(props) {\n        super(props)\n\n        this.mobileMode = this.props.mobileMode\n        this.onClick = this.props.onClick\n\n        this.state = {\n            showRightClickMenu: {},\n            hasStartAndEnd: false,\n            currentMap: null,\n        }\n\n        this.rd3tSvgClassName = `__SVG`     // Gives uniqe className to map components to reference for d3 events\n        this.rd3tMapClassName = `__MAP`\n        this.rd3tLocClassName = '__LOC'\n        this.rd3tStationClassName = `__STATION`\n        this.rd3tPosClassName = '__POS'\n\n        this.lastEvent = null   // Save the latest event\n\n        this.initialRender = true   // Keeps track of where the D3 SVG has been zoomed or dragged\n        this.draggable = true   // Dragging is disabled when another event occurs (ex: moving a location)\n        this.widgetDraggable = true   // Dragging is disabled when widget page is open (ex: moving a location)\n\n        this.d3 = {\n            translate: [0, 0],\n            naturalDims: { height: 500, width: 500 },\n            scale: 1,\n            naturalScale: 1,\n            boundingClientHeight: 0\n        }\n\n        this.naturalImageDimensions = {\n            width: 100,\n            heigh: 100\n        }\n\n        this.mouseDown = false\n    }\n\n    componentDidMount() {\n\n\n\n        // Refresh the map on initial mount. This will only likely give you back the list of\n        // maps, but componentDidUpdate will catch that and set the current map to the first map\n        // in the returned list (which will be the active map)\n        // this.refreshMap()\n        const getMapsPromise = this.props.dispatchGetMaps()\n        getMapsPromise.then(res => this.checkForMapLoad())\n        window.addEventListener('mousedown', () => this.mouseDown = true, { passive: false })\n        window.addEventListener('mouseup', () => { this.mouseDown = false; this.validateNewEntity() }, { passive: false })\n        window.addEventListener(\"click\", () => { this.setState({ showRightClickMenu: {} }) });\n\n        // Event listener that will recalculate the map geometry when the screen size changes\n        window.addEventListener('resize', () => {\n            //this.calculateD3Geometry()\n            this.bindZoomListener()\n        }, { passive: false })\n\n    }\n\n    checkForMapLoad = () => {\n\n      var currentMap = this.props.maps.find(map => map._id === this.props.localSettings.currentMapId)\n\n      if (!!currentMap) {\n        this.setState({currentMap: currentMap})\n      } else if (!this.state.currentMap && this.props.localSettings.currentMapId === null && this.props.maps.length > 0) {\n          this.setState({currentMap: this.props.maps[0]})\n\n\n          const updatedSettings = {\n            ...this.props.localSettings,\n            currentMapId: this.props.maps[0]._id,\n          }\n          const postSettingsPromise = this.props.dispatchPostLocalSettings(updatedSettings)\n          postSettingsPromise.then(() => {\n            const getStationsPromise = this.props.dispatchGetStations()\n            getStationsPromise.then((stations) => {\n                //// Apply the event translation to each station\n                let stationsCopy = []\n                Object.values(stations).forEach(station => {\n\n                    let [x, y] = convertRealToD3([station.pos_x, station.pos_y], this.d3)\n                    station = {\n                        ...station,\n                        x: x,\n                        y: y,\n                    }\n                    stationsCopy[station._id] = station\n\n                })\n                this.props.dispatchUpdateStations(stationsCopy, null, this.d3) // Bulk Update\n            })\n          })\n      }\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        // If new maps are available, refresh current map\n        // NOTE: will be useless once we have a method to select map\n        // if (prevProps.maps.length != this.props.maps.length) {\n        //     this.refreshMap()\n        // }\n        //this.checkForMapLoad() //test\n\n        if(!this.state.currentMap || this.props.localSettings.currentMapId !== this.state.currentMap._id){\n          this.checkForMapLoad()\n        }\n        if(prevProps.selectedTask !== this.props.selectedTask) {\n            this.setState({hasStartAndEnd: getHasStartAndEnd(this.props.selectedTask)})\n        }\n\n        // If the map has been changed, recalculate the geometry and bind the zoom\n        // listener to default to the correct translation\n        if (!getIsEquivalent(prevProps.currentMap, this.state.currentMap)) {\n            //this.calculateD3Geometry(this.mapContainer)\n            this.bindZoomListener()\n        }\n\n        // If the map has been changed, recalculate the geometry and bind the zoom\n        // listener to default to the correct translation\n        // if (!isEquivalent(prevProps.locations, this.props.locations)) {\n        //     this.calculateD3Geometry()\n        //     this.bindZoomListener()\n        // }\n\n\n        // if a widget page is open, disable window event listeners so events work normally within the widget page\n        const { widgetPage } = this.props.match.params    // contains url params from route.\n        if (widgetPage) {\n            document.removeEventListener(\"dragend\", this.validateNewLocation)\n        } else {\n            // reattach event listeners if necessary\n            document.addEventListener('dragend', this.validateNewLocation, { capture: false, passive: true });\n        }\n\n        // if (this.props.currentMap != null && !isEquivalent(prevProps.locations, this.props.locations)) {\n        //     let locations = this.props.locations\n        //     locations.forEach((location, ind) => {\n        //         locations[ind].x = this.d3.translate[0] + this.d3.scale*(location.pos_x/this.props.currentMap.resolution)\n        //         locations[ind].y = this.d3.translate[1] + this.d3.scale*(this.d3.boundingClientHeight - location.pos_y/this.props.currentMap.resolution)\n        //     })\n        //     this.props.onUpdateLocations(locations)\n        // }\n\n\n\n        //   if(!this.props.editingStation && !this.props.hoveringInfo){\n        //     this.props.dispatchSetSelectedStation(null)\n        //   }\n    }\n\n    componentWillUnmount = () => {\n        window.removeEventListener('mousedown', () => this.mouseDown = true, { passive: false })\n        window.removeEventListener('mouseup', () => { this.mouseDown = false; this.validateNewEntity() }, { passive: false })\n        window.removeEventListener(\"click\", () => { this.setState({ showRightClickMenu: {} }) });\n\n        // Event listener that will recalculate the map geometry when the screen size changes\n        window.removeEventListener('resize', () => {\n            //this.calculateD3Geometry()\n            this.bindZoomListener()\n        }, { passive: false })\n\n        document.removeEventListener(\"dragend\", this.validateNewLocation)\n        this.unbindZoomListener()\n    }\n\n\n    /* ========== Map Functions ========== */\n\n    /***\n     * Refreshes the map and all map entities\n     */\n    refreshMap = () => {\n        if (!!this.props.maps[0]) {\n            this.props.dispatchGetMap(this.props.maps[0].guid)\n        }\n    }\n\n    openLocation = () => {\n        return <Route path={[\"/locations\"]} />\n    }\n\n\n\n    // ---------- Functionality for adding new location ---------- //\n\n    /**\n     * Handles Draging new locations onto the map\n     *\n     * @param {*} e\n     */\n    dragNewEntity = e => {\n        if (!this.mouseDown) return\n\n        // Handle Stations\n        if (!!this.props.selectedStation && this.props.selectedStation.temp === true) {\n            this.props.dispatchSetStationAttributes(this.props.selectedStation._id, {\n                x: e.clientX,\n                y: e.clientY\n            })\n        }\n\n        // Handle Positions\n        else if (!!this.props.selectedPosition && this.props.selectedPosition.temp === true && this.props.selectedPosition.schema !== \"temporary_position\") {\n            this.props.dispatchSetPositionAttributes(this.props.selectedPosition._id, {\n                x: e.clientX,\n                y: e.clientY\n            })\n        }\n\n        // Else it's a stations child position\n        else if (!!this.props.selectedStationChildrenCopy) {\n            const draggingChild = Object.values(this.props.selectedStationChildrenCopy).find(position => position.temp === true)\n            if (!!draggingChild && !this.props.selectedPosition) {\n                this.props.dispatchSetPositionAttributes(draggingChild._id, {\n                    x: e.clientX,\n                    y: e.clientY\n                })\n            }\n\n        }\n\n    }\n\n    /**\n     * This runs on mouse up\n     * Handles adding pos_x and pos_y to new locations\n     * pos_x and pos_y are the real x and y relations of the location to the map\n     */\n    validateNewEntity = () => {\n\n        // Handle Stations\n        if (!!this.props.selectedStation && this.props.selectedStation.temp === true) {\n            const pos = convertD3ToReal([this.props.selectedStation.x, this.props.selectedStation.y], this.d3)\n            this.props.dispatchSetStationAttributes(this.props.selectedStation._id, {\n                pos_x: pos[0],\n                pos_y: pos[1],\n                temp: false\n            })\n        }\n\n        // Handle Posiitions\n        else if (!!this.props.selectedPosition && this.props.selectedPosition.temp === true && this.props.selectedPosition.schema !== \"temporary_position\") {\n            const pos = convertD3ToReal([this.props.selectedPosition.x, this.props.selectedPosition.y], this.d3)\n            this.props.dispatchSetPositionAttributes(this.props.selectedPosition._id, {\n                pos_x: pos[0],\n                pos_y: pos[1],\n                temp: false\n            })\n        }\n\n        // Handle child positions of stations\n        else if (!!this.props.selectedStationChildrenCopy) {\n            let newChildEntity = Object.values(this.props.selectedStationChildrenCopy).find(position => position.temp == true)\n            if (!!newChildEntity) {\n\n                // Update the new entity to the edited child copy\n                // Uses copy instead of the naked state in case you dont want to keep changes\n                newChildEntity = this.props.selectedStationChildrenCopy[newChildEntity._id]\n\n                const pos = convertD3ToReal([newChildEntity.x, newChildEntity.y], this.d3)\n                this.props.dispatchSetPositionAttributes(newChildEntity._id, {\n                    pos_x: pos[0],\n                    pos_y: pos[1],\n                    temp: false\n                })\n            }\n        }\n    }\n\n\n\n\n    /* ========== D3 Functions ========== */\n\n    /***\n     * Binds the d3 listener that listens for zoom events. Conveniently it also listens to\n     * drag events, so this will take care of both\n     */\n    bindZoomListener = () => {\n\n        if (!this.state.currentMap) return\n\n        const { scaleExtent } = this.props\n        const { resolution } = this.state.currentMap\n        const { translate, scale } = this.d3\n        const svg = d3.select(`.${this.rd3tSvgClassName}`)\n        const map = d3.selectAll(`.${this.rd3tMapClassName}`)\n\n        let x, y\n        svg.call(\n            d3.behavior\n                .zoom()\n                .scaleExtent([-100, 100])\n                // .scaleExtent([scaleExtent.min, scaleExtent.max])\n                .on('zoom', () => {\n                    // Disables the ability to hover over location on mouse drag when a location is selected that is not new or a right click\n                    if ((!!this.props.selectedStation || (!!this.props.selectedPosition && this.props.selectedPosition.schema !== 'temporary_position')) && (!this.props.editingStation || !this.props.editingPosition)) {\n                        this.props.dispatchHoverStationInfo(null)\n                    }\n\n                    //// Saving the last event is usefull for saving d3 state when draggable is toggled (when moving locations)\n                    this.lastEvent = d3.event\n                    let { stations, positions } = this.props\n                    let stationsCopy = {}\n                    let positionsCopy = {}\n\n\n                    //// Apply the event translation to image\n                    map.attr('transform', `translate(${d3.event.translate}) scale(${d3.event.scale})`)\n                    this.d3 = {\n                        ...this.d3,\n                        translate: d3.event.translate,\n                        scale: d3.event.scale\n                    }\n\n                    //// Apply the event translation to each station\n                    Object.values(stations).forEach(station => {\n\n                        [x, y] = convertRealToD3([station.pos_x, station.pos_y], this.d3)\n                        station = {\n                            ...station,\n                            x: x,\n                            y: y,\n                        }\n                        stationsCopy[station._id] = station\n\n                    })\n\n                    // Apply the event translation to selectedStation if there is one\n                    let updatedSelectedStation = null\n                    if (!!this.props.selectedStation) {\n                        [x, y] = convertRealToD3([this.props.selectedStation.pos_x, this.props.selectedStation.pos_y], this.d3)\n                        updatedSelectedStation = this.props.selectedStation\n                        updatedSelectedStation = {\n                            ...updatedSelectedStation,\n                            x: x,\n                            y: y,\n                        }\n\n                    }\n\n                    this.props.dispatchUpdateStations(stationsCopy, updatedSelectedStation, this.d3) // Bulk Update\n\n                    //// Apply the event translation to each position\n                    Object.values(positions).forEach(position => {\n\n                        [x, y] = convertRealToD3([position.pos_x, position.pos_y], this.d3)\n                        position = {\n                            ...position,\n                            x: x,\n                            y: y,\n                        }\n\n                        positionsCopy[position._id] = position\n\n                    })\n\n                    // Apply the event translation to selectedPosition if there is one\n                    let updatedSelectedPosition = null\n                    if (!!this.props.selectedPosition) {\n                        [x, y] = convertRealToD3([this.props.selectedPosition.pos_x, this.props.selectedPosition.pos_y], this.d3)\n                        updatedSelectedPosition = this.props.selectedPosition\n                        updatedSelectedPosition = {\n                            ...updatedSelectedPosition,\n                            x: x,\n                            y: y,\n                        }\n                    }\n\n                    // Apple the event translation to Children Copy if need be\n                    let updatedChildrenPositions = null\n                    if (!!this.props.selectedStationChildrenCopy) {\n                        updatedChildrenPositions = {}\n                        Object.values(this.props.selectedStationChildrenCopy).forEach(position => {\n                            [x, y] = convertRealToD3([position.pos_x, position.pos_y], this.d3)\n\n                            position = {\n                                ...position,\n                                x: x,\n                                y: y,\n                            }\n                            updatedChildrenPositions[position._id] = position\n\n                        })\n                    }\n\n                    this.props.dispatchUpdatePositions(positionsCopy, updatedSelectedPosition, updatedChildrenPositions, this.d3) // Bulk Update\n\n                    // Once zoomed or dragged, stop initializing locations with transforms, instead now let the listener handle that. Otherwise zoom gets jumpy\n                    if (this.initialRender) { this.initialRender = false }\n                })\n                .on('zoomend', () => {\n\n                })\n                // Offset so that first pan and zoom does not jump back to [0,0] coords\n                .scale(scale)\n                .translate(translate),\n        );\n    }\n\n    /**\n     * Overwrite the listener we described above /\\ to be null\n     * (basically dont listen to drag/zoom events)\n     */\n    unbindZoomListener = () => {\n        const { rd3tSvgClassName } = this\n\n        const svg = d3.select(`.${rd3tSvgClassName}`);\n        svg.call(d3.behavior.zoom().on('zoom', null))\n    }\n\n    onDisableDrag = () => {\n        if (this.draggable) {\n            this.draggable = false\n            this.unbindZoomListener()\n        }\n    }\n\n    onEnableDrag = () => {\n        if (!this.draggable) {\n            this.draggable = true\n            this.bindZoomListener()\n        }\n    }\n\n    onWidgetDisableDrag = () => {\n        if (this.widgetDraggable) {\n            this.widgetDraggable = false\n            this.unbindZoomListener()\n        }\n    }\n\n    onWidgetEnableDrag = () => {\n        if (!this.widgetDraggable) {\n            this.widgetDraggable = true\n            this.bindZoomListener()\n        }\n    }\n\n    /**\n     * x: 0,\n     * y: 0property, instead of going\n     * through D3's scaling mechanism, which would have picked up both properties.\n     *\n     * @return {object} {translate: {x: number, y: number}, zoom: number}\n     */\n    calculateD3Geometry = () => {\n        let { locations } = this.props\n        let { resolution } = this.state.currentMap\n\n        let scale\n        if (this.props.zoom > this.props.scaleExtent.max) {\n            scale = this.props.scaleExtent.max;\n        } else if (this.props.zoom < this.props.scaleExtent.min) {\n            scale = this.props.scaleExtent.min;\n        } else {\n            scale = this.props.zoom;\n        }\n\n        let translate\n        if (!!this.mapContainer && !!this.mapImage) {\n\n            const cHeight = this.mapContainer.getBoundingClientRect().height\n            const cWidth = this.mapContainer.getBoundingClientRect().width\n\n            const iHeight = this.mapImage.getBoundingClientRect().height\n            const iWidth = this.mapImage.getBoundingClientRect().width\n\n            const iNatHeight = this.naturalImageDimensions.height\n            const iNatWidth = this.naturalImageDimensions.width\n\n\n\n            // Apply translations to map.\n            // The map is translated by half the container dims, and then back by\n            // half the image dims. This leaves it in the middle of the screen\n            translate = {\n                x: this.props.translate.x + cWidth / 2 - iWidth / 2,\n                y: this.props.translate.y + cHeight / 2 - iHeight / 2,\n            }\n\n            // Save necessary variables\n            this.d3 = {\n                translate: [translate.x, translate.y],\n                scale: scale,\n                mapResolution: resolution,\n                // imgResolution: iNatWidth / iWidth,\n                imgResolution: 1,\n                actualDims: {\n                    height: iHeight,\n                    width: iWidth\n                },\n                naturalDims: {\n                    height: iNatHeight,\n                    width: iNatWidth\n                },\n            }\n\n\n            let x, y\n            let { stations, positions } = this.props\n            //// Apply the event translation to each station\n            Object.values(stations).forEach(station => {\n                [x, y] = convertRealToD3([station.pos_x, station.pos_y], this.d3)\n                station = {\n                    ...station,\n                    x: x,\n                    y: y,\n                }\n                stations[station._id] = station\n            })\n            this.props.dispatchUpdateStations(stations, null, this.d3) // Bulk Update\n\n            //// Apply the event translation to each position\n            Object.values(positions).forEach(position => {\n                [x, y] = convertRealToD3([position.pos_x, position.pos_y], this.d3)\n                position = {\n                    ...position,\n                    x: x,\n                    y: y,\n                }\n                // TODO: Delete\n                // Object.assign(position, { x, y })\n                positions[position._id] = position\n            })\n            this.props.dispatchUpdatePositions(positions, null, null, this.d3) // Bulk Update\n\n        } else {\n            translate = this.props.translate\n        }\n\n        // Set the initial map translation\n        const map = d3.selectAll(`.${this.rd3tMapClassName}`)\n        map.attr('transform', `translate(${translate.x},${translate.y}) scale(${scale})`)\n\n    }\n\n    // This handles the event when an onContextMenu is triggered in the svg containing the map\n    // It prevents the defaul menu for appearing and sets the state for the custom menu to appear\n    // Passes along x and y for the cusotm menu\n    // Go to right_click_menu to follow how the click logic works\n    handleRightClickMenu = (e) => {\n        e.preventDefault()\n        this.setState({ showRightClickMenu: { x: e.clientX, y: e.clientY } });\n    }\n\n\n    render() {\n        let { stations, positions, selectedStation, selectedPosition, selectedStationChildrenCopy, deviceEnabled } = this.props\n        const { hasStartAndEnd } = this.state\n        if (this.state.currentMap == null) {\n\n           return (<></>)\n          }\n        const { translate, scale } = this.d3;\n\n        return (\n\n            <div style={{ width: '100%', height: '100%' }} onMouseMove={this.dragNewEntity} onMouseUp={this.validateNewLocation} >\n                <styled.MapContainer ref={mc => (this.mapContainer = mc)} style={{ touchAction: 'none', pointerEvents: this.widgetDraggable ? 'default' : 'none' }} >\n                  <Suspense fallback = {<></>}>\n                    <MapApps />\n                  </Suspense>\n\n                    {/* Commented out for now */}\n                    {/* <Zones/> */}\n\n                    {/* Right menu */}\n                    {Object.keys(this.state.showRightClickMenu).length > 0 &&\n                      <Suspense fallback = {<></>}>\n                        <RightClickMenu coords={this.state.showRightClickMenu} buttonClicked={() => { this.setState({ showRightClickMenu: {} }) }} d3={this.d3} />\n                      </Suspense>\n                    }\n\n                    {/* SVG element is the container for the whole view. This allows the view to be moved as one */}\n                    <svg\n                        className={this.rd3tSvgClassName}\n                        width=\"100%\"\n                        height=\"100%\"\n\n                        // onClick only registers on left click so this works as a way to hide the menu\n                        onClick={() => { this.setState({ showRightClickMenu: {} }) }}\n                        onContextMenu={(e) => { this.handleRightClickMenu(e) }}\n\n                        // These 2 mouse events are used to remove the issue when moving the mouse too fast over a location causing a widget to load, but not fast enough for the onmouselave to execute\n                        onMouseEnter={() => {\n                            if (!!this.props.selectedStation && !this.props.editingStation) {\n                                this.props.dispatchHoverStationInfo(null)\n                                this.props.dispatchSetSelectedStation(null)\n                                this.props.dispatchSetSelectedPosition(null)\n                            }\n                        }}\n                        onMouseOver={() => {\n                            if (!!this.props.selectedStation && !this.props.editingStation) {\n                                this.props.dispatchHoverStationInfo(null)\n                                this.props.dispatchSetSelectedStation(null)\n                                this.props.dispatchSetSelectedPosition(null)\n                            }\n                        }}\n\n                    > {/* Clears any unfinished drag events (ex: moving location) */}\n                        <styled.MapGroup\n                            className={this.rd3tMapClassName}\n\n                        >\n                            {/* Foreign object allows an image to be put in the SVG container */}\n                            <foreignObject width='200%' height='200%' >\n                                {!!this.state.currentMap &&\n                                    <styled.MapImage ref={mi => (this.mapImage = mi)}\n                                        tall={!!this.mapContainer && // Fixes the map sizing - cutoff issue\n                                            this.mapContainer.getBoundingClientRect().height / this.naturalImageDimensions.height\n                                            >\n                                            this.mapContainer.getBoundingClientRect().width / this.naturalImageDimensions.width}\n\n                                        src={'data:image/png;base64, ' + this.state.currentMap.map}\n                                        onLoad={() => {\n\n                                            this.naturalImageDimensions = {\n                                                height: this.mapImage.naturalHeight,\n                                                width: this.mapImage.naturalWidth\n                                            }\n                                            // Geometry changes once the image finishes loading, so the geometry needs to be reclaculated\n                                            // and the zoom listener needs to be re-bound to the new translations\n                                            this.calculateD3Geometry()\n                                            this.setState({\n                                                resolution: this.state.currentMap.resolution\n                                            }, () => this.bindZoomListener())\n                                        }}\n                                    >\n                                    </styled.MapImage>\n                                }\n                            </foreignObject>\n                        </styled.MapGroup>\n\n                        {(!!this.props.selectedTask || !!this.props.selectedHoveringTask) &&\n                          <Suspense fallback = {<></>}>\n                            <TaskPaths d3={this.d3} />\n                          </Suspense>\n                        }\n\n                        {!!this.props.selectedProcess &&\n                          <Suspense fallback = {<></>}>\n                            <ProcessPaths d3={this.d3} />\n                          </Suspense>\n                        }\n\n                        <defs>\n                            {/* a transparent glow that takes on the colour of the object it's applied to */}\n                            <filter id=\"glow\">\n                                <feGaussianBlur stdDeviation=\"1\" result=\"coloredBlur\" />\n                                <feMerge>\n                                    <feMergeNode in=\"coloredBlur\" />\n                                    <feMergeNode in=\"SourceGraphic\" />\n                                </feMerge>\n                            </filter>\n                        </defs>\n\n                        {!!this.state.resolution && !!this.mapImage &&\n                            <>\n\n                                {this.props.settings.mapApps.heatmap &&\n                                    <HeatMap map_id={this.state.currentMap?._id} d3Scale={this.d3.scale} />\n                                }\n\n                                {this.props.settings.mapApps.ratsnest &&\n                                    <RatsNest map_id={this.state.currentMap?._id} d3Scale={this.d3.scale} />\n                                }\n\n\n\n                                <>{\n                                    //// Render Locations\n                                    Object.values(stations)\n                                        .map((station, ind) =>\n\n                                            <Station\n                                                key={`loc-${ind}`}\n                                                // If there is a selected station, then render the selected station vs station in redux\n                                                // Selected station could contain local edits that are not on the backend (naked redux) yet\n                                                station={(!!selectedStation && station._id === selectedStation._id) ? selectedStation : station}\n                                                isSelected={(!!selectedStation && station._id === selectedStation._id)}\n                                                // station={station}\n                                                rd3tClassName={`${this.rd3tStationClassName}_${ind}`}\n                                                d3={this.d3}\n                                                handleEnableDrag={this.onEnableDrag}\n                                                handleDisableDrag={this.onDisableDrag}\n                                                // Mouse down is used to disabling hovering when the mouse is down on the map\n                                                mouseDown={this.mouseDown}\n                                            />\n                                        )\n                                }</>\n\n                                <>{\n                                    //// Render children positions if appropriate\n                                    Object.values(positions)\n                                        .filter(position => (position.map_id === this.state.currentMap?._id))\n                                        .map((position, ind) =>\n                                            <Position\n                                                key={`pos-${ind}`}\n                                                position={\n                                                    (!!selectedPosition && position._id === selectedPosition._id) ?\n                                                        // If there is a selected station, then render the selected station vs station in redux\n                                                        // Selected station could contain local edits that are not on the backend (naked redux) yet\n                                                        selectedPosition\n                                                        :\n                                                        // If the positions parent is currently being edited\n                                                        (!!selectedStationChildrenCopy && position._id in selectedStationChildrenCopy) ?\n                                                            selectedStationChildrenCopy[position._id]\n                                                            :\n                                                            position\n                                                }\n                                                rd3tClassName={`${this.rd3tPosClassName}_${ind}`}\n                                                d3={this.d3}\n                                                handleEnableDrag={this.onEnableDrag}\n                                                handleDisableDrag={this.onDisableDrag}\n                                                // Mouse down is used to disabling hovering when the mouse is down on the map\n                                                mouseDown={this.mouseDown}\n                                            />\n\n                                        )\n                                }</>\n                            </>\n                        }\n                    </svg>\n\n                    {/* Widgets are here when not in mobile mode. If mobile mode, then they are in App.js.\n                    The reasoning is that the map unmounts when in a widget while in mobile mode (for performance reasons). */}\n                    {this.props.hoveringInfo !== null && !this.mobileMode &&\n                      <Suspense fallback = {<></>}>\n                        <Widgets />\n                      </Suspense>\n                    }\n\n\n                </styled.MapContainer>\n\n            </div >\n\n     )\n    }\n}\n\nMapView.defaultProps = {\n    scaleExtent: { min: 0, max: 6 },\n    zoomable: true,\n    zoom: 1,\n    translate: { x: 0, y: 0 },\n\n}\n\nconst mapStateToProps = function (state) {\n    return {\n        maps: state.mapReducer.maps,\n        localSettings: state.localReducer.localSettings,\n        deviceEnabled: false,\n        settings: state.settingsReducer.settings,\n\n        positions: state.positionsReducer.positions,\n        stations: state.stationsReducer.stations,\n        tasks: state.tasksReducer.tasks,\n        showRouteConfirmation: state.tasksReducer.showRouteConfirmation,\n\n        selectedStation: state.stationsReducer.selectedStation,\n        selectedStationChildrenCopy: state.positionsReducer.selectedStationChildrenCopy,\n        selectedPosition: state.positionsReducer.selectedPosition,\n        editingStation: state.stationsReducer.editingStation,\n        editingPosition: state.positionsReducer.editingPosition,\n\n        selectedTask: state.tasksReducer.selectedTask,\n        selectedHoveringTask: state.tasksReducer.selectedHoveringTask,\n        editingTask: state.tasksReducer.editingTask,\n        selectedProcess: state.processesReducer.selectedProcess,\n        fixingProcess: state.processesReducer.fixingProcess,\n\n        hoveringInfo: state.widgetReducer.hoverStationInfo,\n        widgetLoaded: state.widgetReducer.widgetLoaded,\n\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        dispatchGetMaps: () => dispatch(getMaps()),\n        dispatchGetMap: (map_id) => dispatch(getMap(map_id)),\n        dispatchSetCurrentMap: (map) => dispatch(setCurrentMap(map)),\n        dispatchPostSettings: (settings) => dispatch(postSettings(settings)),\n        dispatchPostLocalSettings: (settings) => dispatch(postLocalSettings(settings)),\n\n        dispatchGetStations: () => dispatch(getStations()),\n        dispatchUpdateStations: (stations, selectedStation, d3) => dispatch(updateStations(stations, selectedStation, d3)),\n        dispatchUpdatePositions: (positions, selectedPosition, childrenPositions, d3) => dispatch(updatePositions(positions, selectedPosition, childrenPositions, d3)),\n\n        dispatchPostPosition: (position) => dispatch(postPosition(position)),\n        dispatchSetStationAttributes: (id, attr) => dispatch(setStationAttributes(id, attr)),\n        dispatchSetPositionAttributes: (id, attr) => dispatch(setPositionAttributes(id, attr)),\n        dispatchSetSelectedStation: (station) => dispatch(setSelectedStation(station)),\n        dispatchSetSelectedPosition: (position) => dispatch(setSelectedPosition(position)),\n\n        dispatchHoverStationInfo: (info) => dispatch(hoverStationInfo(info)),\n        dispatchWidgetLoaded: (bool) => dispatch(widgetLoaded(bool)),\n\n\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MapView))\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","import {\n    SET_MODE,\n    SET_ACTION,\n    SET_WIDTH,\n    SET_OPEN,\n    PAGE_DATA_CHANGED, SET_CONFIRM_DELETE,\n    SHOW_LOT_SCAN_MODAL,\n} from '../types/sidebar_types'\n\nexport const setMode = (mode) => {\n    return { type: SET_MODE, payload: {mode}}\n}\n\nexport const setAction = (action) => {\n    return { type: SET_ACTION, payload: {action} }\n}\n\nexport const setWidth = (width) => {\n    return { type: SET_WIDTH, payload: width }\n}\n\nexport const setOpen = (state) => {\n    return { type: SET_OPEN, payload: state}\n}\n\nexport const pageDataChanged = (state) => {\n    return { type: PAGE_DATA_CHANGED, payload: state}\n}\n\nexport const setConfirmDelete = (show, callback) => {\n    return { type: SET_CONFIRM_DELETE, payload: {show, callback}}\n}\n\nexport const showLotScanModal = (show) => {\n    return { type: SHOW_LOT_SCAN_MODAL, payload: show }\n}\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React from 'react'\nimport uuid from 'uuid'\n\nconst positionColor = '#2adba6';\n\nexport const PositionTypes = {\n\n    /**\n     * Heads up, currently there are 2 different svg rectangles being used\n     * One thats width is 200 and height is 320\n     * One thats width is 378 and height 236\n     *\n     * Need to unify this and make all of them standard\n     * Probably use the 200 by 320 since you don't need to add a 'y' offset to the svg\n     *\n     *  */\n\n    shelf_position: {\n        svgPath:\n            <svg>\n                <rect fill='transparent' x=\"100\" y=\"40\" width=\"200\" height=\"320\" rx=\"30\" transform=\"translate(400 0) rotate(90)\" strokeMiterlimit=\"10\" strokeWidth=\"20\" />\n                <g y=\"65\" transform=\"scale(0.87) translate(35, 100)\">\n                    <path d=\"M263.53,56.31l33,47a10,10,0,0,1-8.18,15.74h-66a10,10,0,0,1-8.19-15.74l33-47A10,10,0,0,1,263.53,56.31Z\" />\n                    <path d=\"M142.71,56.31l33,47a10,10,0,0,1-8.19,15.74h-66a10,10,0,0,1-8.18-15.74l33-47A10,10,0,0,1,142.71,56.31Z\" />\n                \n                    <circle cx=\"255.44\" cy=\"146.56\" r=\"12.5\" />\n                    <circle cx=\"255.44\" cy=\"181.56\" r=\"7.5\" />\n                    <circle cx=\"134.44\" cy=\"146.56\" r=\"12.5\" />\n                    <circle cx=\"134.44\" cy=\"181.56\" r=\"7.5\" />\n                </g>\n            </svg>,\n        attributes:\n        {\n            schema: 'position',\n            type: 'shelf_position',\n            parent: null,\n            new: true,\n        },\n        color: positionColor,\n\n    },\n\n    charger_position: {\n        svgPath:\n            <svg>\n                <path d=\"M344.75,131.18l-47,33A10,10,0,0,1,282,156V90a10,10,0,0,1,15.75-8.18l47,33A10,10,0,0,1,344.75,131.18Z\" />\n                <rect fill='none' strokeMiterlimit='10' strokeWidth='20px' x=\"5\" y=\"5\" width=\"378\" height=\"236\" rx=\"30\" />\n                <path d=\"M251,171.13c-2.45,3.47-4.09,3.9-8.1,2.12l-73.27-32.63c-.72-.32-1.45-.61-2.47-1v3.15q0,12.9,0,25.81c0,4.89-3,6.91-7.46,5L31.14,118.34c-2.83-1.22-4.08-3.12-3.65-5.47s2.19-3.61,5.09-3.91q29.51-3,59-6c9-.91,17.93-1.86,26.91-2.63,1.81-.15,2.1-.82,2.06-2.38-.09-3.65,0-7.29,0-10.94,0-4.26,1.43-5.77,5.64-6.1q32.61-2.53,65.23-5.1c17.69-1.36,35.38-2.65,53.06-4.08,2.93-.23,5.1.52,6.54,3.12Z\" />\n                <rect fill='transparent' strokeMiterlimit='10' strokeWidth='20px' x=\"10\" y=\"10\" width=\"378\" height=\"236\" rx=\"30\" />\n            </svg>,\n        color: '#fbd34e',\n\n    },\n\n    cart_position: {\n        svgPath:\n            <>\n                <rect fill='transparent' x=\"100\" y=\"40\" width=\"200\" height=\"320\" rx=\"30\" transform=\"translate(400 0) rotate(90)\" strokeMiterlimit=\"10\" strokeWidth=\"20\" />\n                <path d=\"M315.5,200.87l-64,36.95A1,1,0,0,1,250,237v-73.9a1,1,0,0,1,1.5-.87l64,36.95A1,1,0,0,1,315.5,200.87Z\" strokeMiterlimit=\"10\" strokeWidth=\"10\" />\n                <circle cx=\"200\" cy=\"200\" r=\"15\" />\n                <circle cx=\"150\" cy=\"200\" r=\"10\" />\n                <circle cx=\"102.5\" cy=\"200\" r=\"7.5\" />\n            </>,\n        attributes:\n        {\n            schema: 'position',\n            type: 'cart_position',\n            parent: null,\n            new: true,\n        },\n        color: positionColor,\n    },\n\n    temporary_cart_position: {\n        svgPath:\n            <>\n                <rect fill='transparent' x=\"100\" y=\"40\" width=\"200\" height=\"320\" rx=\"30\" transform=\"translate(400 0) rotate(90)\" strokeMiterlimit=\"10\" strokeWidth=\"20\" />\n                <path d=\"M315.5,200.87l-64,36.95A1,1,0,0,1,250,237v-73.9a1,1,0,0,1,1.5-.87l64,36.95A1,1,0,0,1,315.5,200.87Z\" strokeMiterlimit=\"10\" strokeWidth=\"10\" />\n                <circle cx=\"200\" cy=\"200\" r=\"15\" />\n                <circle cx=\"150\" cy=\"200\" r=\"10\" />\n                <circle cx=\"102.5\" cy=\"200\" r=\"7.5\" />\n            </>,\n        attributes:\n        {\n            schema: 'temporary_position',\n            type: 'cart_position',\n            parent: null,\n            new: true,\n        },\n        color: '#6283f0',\n    },\n\n    // human_position: {\n    //     svgPath:\n    //         // <svg y=\"70\">\n    //         //     <rect fill='transparent' strokeMiterlimit='10' strokeWidth='20px' x=\"10\" y=\"10\" width=\"378\" height=\"236\" rx=\"30\" />\n    //         //     <path d=\"M194,123a49.63,49.63,0,1,0-49.62-49.63A49.62,49.62,0,0,0,194,123Zm34.74,12.41h-6.48a67.51,67.51,0,0,1-56.52,0h-6.48a52.12,52.12,0,0,0-52.1,52.1v16.13a18.61,18.61,0,0,0,18.61,18.61H262.23a18.61,18.61,0,0,0,18.61-18.61V187.51A52.12,52.12,0,0,0,228.74,135.41Z\" />\n    //         // </svg>,\n    //         <svg y=\"50\" x='50'>\n    //             <rect width=\"300\" height=\"300\" rx=\"30\" />\n    //             <path fill='#3B3C43' d=\"M150,150A56.07,56.07,0,1,0,93.94,93.94,56.05,56.05,0,0,0,150,150Zm39.24,14h-7.31a76.32,76.32,0,0,1-63.86,0h-7.31a58.88,58.88,0,0,0-58.87,58.86V241.1a21,21,0,0,0,21,21H227.09a21,21,0,0,0,21-21V222.88A58.88,58.88,0,0,0,189.24,164Z\" />\n    //         </svg>,\n    //     attributes:\n    //     {\n    //         schema: 'station',\n    //         type: 'human',\n    //         parent: null,\n    //         new: true,\n    //     },\n    //     color: '#5eec33',\n    // },\n\n}\n\nexport const newPositionTemplate = (name, type, parent, map_id) => {\n\n    return {\n        name: name,\n        schema: 'position',\n        type: type,\n        temp: true,\n        new: true,\n        pos_x: 0,\n        pos_y: 0,\n        rotation: 0,\n        x: 0,\n        y: 0,\n        parent: parent,\n        _id: uuid.v4(),\n        map_id: map_id,\n    }\n}\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import React from 'react'\n\nimport theme from '../theme';\n\nexport const stationColor = theme.main.schema.locations.solid\n\nexport const StationTypes = {\n\n    /**\n     * Heads up, currently there are 2 different svg rectangles being used\n     * One thats width is 200 and height is 320\n     * One thats width is 378 and height 236\n     *\n     * Need to unify this and make all of them standard\n     * Probably use the 200 by 320 since you don't need to add a 'y' offset to the svg\n     *\n     *  */\n\n    warehouse: {\n        svgPath:\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n                viewBox=\"0 0 400 400\">\n            <path style={{fill:'transparent',strokeWidth:15,strokeMiterlimit:10}} d=\"M334.6,357.6h-260c-16.5,0-30-13.5-30-30v-260c0-16.5,13.5-30,30-30h260c16.5,0,30,13.5,30,30v260\n                C364.6,344.1,351.1,357.6,334.6,357.6z\"/>\n            <g>\n                <path d=\"M224,127c5.1-2.2,9.2-3.9,9.2-3.9s4.1,1.8,9.1,4.1l24.9,11.1c5,2.2,13.3,2.5,18.5,0.6l24.6-9.2\n                    c5.1-1.9,5.2-5.1,0-7l-96.5-36.2c-5.1-1.9-13.6-1.9-18.7,0l-96.5,36.2c-5.1,1.9-5.1,5.1,0,7l96.5,36.2c5.1,1.9,13.6,1.9,18.7,0\n                    l24.4-9.2c5.1-1.9,5.2-5.2,0.1-7.3l-24.6-10.2c-5.1-2.1-9.2-3.8-9.2-3.8c0,0,4.1-1.8,9.2-3.9L224,127z\"/>\n            </g>\n            <g>\n                <path d=\"M98.5,144c-5.1-1.9-9.4,1-9.4,6.5v109.7c0,5.5,4.2,11.6,9.4,13.5l89.3,33.5c5.1,1.9,9.4-1,9.4-6.5V191\n                    c0-5.5-4.2-11.6-9.4-13.5L98.5,144z M146.8,263c0,4.2-4.2,6.1-9.4,4.2l-10.1-3.8c-5.1-1.9-9.4-7-9.4-11.2s4.2-6.1,9.4-4.2\n                    l10.1,3.8C142.5,253.7,146.8,258.7,146.8,263z\"/>\n            </g>\n            <g>\n                <path d=\"M285.8,153.2c-5.1,1.9-9.4,8-9.4,13.5v16.1c0,5.5-4.2,11.6-9.4,13.5l-10.1,3.8c-5.1,1.9-9.4-1-9.4-6.5\n                    v-16.1c0-5.5-4.2-8.4-9.4-6.5l-17.3,6.5c-5.1,1.9-9.4,8-9.4,13.5v109.7c0,5.5,4.2,8.4,9.4,6.5l89.3-33.5c5.1-1.9,9.4-8,9.4-13.5\n                    V150.5c0-5.5-4.2-8.4-9.4-6.5L285.8,153.2z\"/>\n            </g>\n        </svg>,\n\n        attributes:\n        {\n            schema: 'station',\n            type: 'warehouse',\n            children: [],\n            dashboards: [],\n            new: true,\n        },\n        color: stationColor\n    },\n\n    human: {\n        svgPath:\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n                viewBox=\"0 0 400 400\">\n            <path style={{fill:'transparent',strokeWidth:15,strokeMiterlimit:10}} d=\"M334.6,357.6h-260c-16.5,0-30-13.5-30-30v-260c0-16.5,13.5-30,30-30h260c16.5,0,30,13.5,30,30v260\n            C364.6,344.1,351.1,357.6,334.6,357.6z\"/>\n            <path d=\"M205.9,200.2c32.7,0,59.3-26.3,59.3-58.7s-26.5-58.7-59.3-58.7s-59.3,26.3-59.3,58.7S173.1,200.2,205.9,200.2z\n                M247.4,214.9h-7.7c-10.3,4.7-21.7,7.3-33.8,7.3c-12,0-23.4-2.7-33.8-7.3h-7.7c-34.4,0-62.3,27.6-62.3,61.7v19.1\n                c0,12.2,10,22,22.2,22h163c12.3,0,22.2-9.9,22.2-22v-19.1C309.6,242.5,281.7,214.9,247.4,214.9z\"/>\n        </svg>,\n        attributes:\n        {\n            schema: 'station',\n            type: 'human',\n            children: [],\n            dashboards: [],\n            new: true,\n        },\n        color: stationColor,\n    },\n\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import {\n  WIDGET_PAGE_LOADED,\n  WIDGET_XY_COORDINATES,\n  WIDGET_LOADED,\n  HOVER_STATION_INFO,\n\n} from '../types/widget_types'\n\nexport const widgetPageLoaded = (state) => {\n    return { type: WIDGET_PAGE_LOADED, payload: state}\n}\n\nexport const widgetXYCoordinates = (state) => {\n    return { type: WIDGET_XY_COORDINATES, payload: state}\n}\n\nexport const widgetLoaded = (state) => {\n    return { type: WIDGET_LOADED, payload: state}\n}\n\nexport const hoverStationInfo = (info) => {\n    return { type: HOVER_STATION_INFO, payload: { info } }\n}\n","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}"],"sourceRoot":""}