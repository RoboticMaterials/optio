{"version":3,"sources":["components/side_bar/content/cards/summary_zone/summary_zone.style.js","components/side_bar/content/cards/summary_zone/summary_zone.js"],"names":["Container","styled","div","ProcessesContainer","ZoneContainer","props","theme","bg","primary","cardShadow","ProcessName","h3","fontSize","sz3","schema","lots","solid","sz4","SummaryZone","handleCardClick","setShowCardEditor","showCardEditor","selectedCards","selectedProcesses","lotFilterValue","selectedFilterOption","sortMode","sortDirection","lotFilters","setSelectedCards","handleAddLotClick","useSelector","state","stationsReducer","stations","tasksReducer","tasks","map","currProcess","processIndex","processName","name","processId","_id","partialVisibility","isVisible","maxHeight","style","height","width","margin","color","defaultProps","memo"],"mappings":"iNAEaA,EAAYC,IAAOC,IAAV,wOAaTC,EAAqBF,IAAOC,IAAV,mIAQlBE,EAAgBH,IAAOC,IAAV,2yBAIR,SAAAG,GAAK,OAAIA,EAAMC,MAAMC,GAAGC,WACxB,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,cA8B1BC,EAAcT,IAAOU,GAAV,wWAIP,SAAAN,GAAK,OAAIA,EAAMC,MAAMM,SAASC,OAClC,SAAAR,GAAK,OAAIA,EAAMC,MAAMQ,OAAOC,KAAKC,S,GAYff,IAAOC,IAAV,uGAMCD,IAAOU,GAAV,mDACT,SAAAN,GAAK,OAAIA,EAAMC,MAAMM,SAASK,O,aC9DzCC,EAAe,SAACb,GAAU,IAIxBc,EAeAd,EAfAc,gBACAC,EAcAf,EAdAe,kBACAC,EAaAhB,EAbAgB,eACAC,EAYAjB,EAZAiB,cACAC,EAWAlB,EAXAkB,kBAEAC,EASAnB,EATAmB,eACAC,EAQApB,EARAoB,qBAEAC,EAMArB,EANAqB,SACAC,EAKAtB,EALAsB,cACAC,EAIAvB,EAJAuB,WAEAC,EAEAxB,EAFAwB,iBACAC,EACAzB,EADAyB,kBAEaC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,gBAAgBC,YAC7CH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,aAAaC,SAiE1D,OACC,cAAC,EAAD,UACC,cAAC,EAAD,UArDAb,EAAkBc,KAAI,SAACC,EAAaC,GAAiB,IAI7CC,EAEHF,EAFHG,KACKC,EACFJ,EADHK,IAKD,OACM,cAAC,IAAD,CAAkBC,mBAAqB,EAAvC,SACG,gBAAEC,EAAF,EAAEA,UAAF,OACC,mCACKA,EACR,mCACE,eAAC,EAAD,WAGC,cAAC,EAAD,UAAqBL,IAErB,cAAC,UAAD,CACCV,kBAAmBA,EACnBD,iBAAkBA,EAClBP,cAAeA,EACfI,SAAUA,EACDF,eAAkBA,EAClBC,qBAAwBA,EACjCE,cAAeA,EACfC,WAAYA,EACZR,kBAAmBA,EACnBC,eAAgBA,EAChByB,UAAW,QACXJ,UAAWA,EACXvB,gBAAiBA,MAjBbuB,KAsBH,qBAAKK,MAAS,CAACC,OAAQ,QAASC,MAAO,MAAOC,OAAQ,OAAQC,MAAO,QAArE,qCA+BhBjC,EAAYkC,aAAe,CACvBjC,gBAAiB,aACjBC,kBAAmB,aACnBU,kBAAmB,aACnBT,gBAAgB,EAChBG,eAAgB,GAChBC,qBAAsB,MAGX4B,yBAAKnC","file":"static/js/46.64b26c7f.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n\toverflow: hidden;\n\tposition: relative;\n\theight: 100%;\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n\tflex: 1;\n\tmin-height: 100%;\n\tmax-height: 100%;\n\ttransition: all 2s ease;\n`\n\nexport const ProcessesContainer = styled.div`\n\toverflow: auto;\n\twidth: 100%;\n\theight: 100%;\n\tposition: relative;\n\ttransition: all 2s ease;\n`\n\nexport const ZoneContainer = styled.div`\n    display: flex;\n    align-items: center;\n    \n    background: ${props => props.theme.bg.primary};\n    box-shadow: ${props => props.theme.cardShadow};\n    margin: 1.5rem;\n    border-radius: 0.5rem;\n\n    overflow-x: scroll;\n\n    /* Let's get this party started */\n    ::-webkit-scrollbar {\n        height: 8px;\n    }\n    /* Track */\n    ::-webkit-scrollbar-track {\n        -webkit-background: rgba(0,0,0,0.1);\n        -webkit-border-radius: 10px;\n        border-radius: 10px;\n        &:hover {\n            background: rgba(0,0,0,0.1);\n        }\n    }\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n        -webkit-border-radius: 10px;\n        border-radius: 10px;\n        background: rgba(0, 0, 0, 0.2);\n    }\n    ::-webkit-scrollbar-thumb:window-inactive {\n        // background: rgba(255,255,255,0.2);\n    }\n`\n\nexport const ProcessName = styled.h3`\n    padding: 0;\n    margin: 0;\n    margin: 0 2rem;\n    font-size: ${props => props.theme.fontSize.sz3};\n    color: ${props => props.theme.schema.lots.solid};\n    text-align: center;\n    width: 5rem;\n    min-width: 8rem;\n    \n    overflow: hidden;\n   text-overflow: ellipsis;\n   display: -webkit-box;\n   -webkit-line-clamp: 2; /* number of lines to show */\n   -webkit-box-orient: vertical;\n`\n\nexport const ColumnContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nexport const CycleTimeText = styled.h3`\n    font-size: ${props => props.theme.fontSize.sz4};\n\n`","import React, { useState, memo, useEffect } from \"react\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment';\n\n// external functions\nimport PropTypes from \"prop-types\"\n\n// internal components\nimport CardZone from \"../card_zone/card_zone\"\nimport VisibilitySensor from 'react-visibility-sensor'\n\n// styles\nimport * as styled from \"./summary_zone.style\"\n\n// Import Utils\nimport { getProcessStations, isLotWhole } from '../../../../../methods/utils/processes_utils'\n\n/*\n* This component renders a CardZone for a list of processes\n* */\nconst SummaryZone = ((props) => {\n\n    // extract props\n    const {\n        handleCardClick,\n        setShowCardEditor,\n        showCardEditor,\n        selectedCards,\n        selectedProcesses,\n\n        lotFilterValue,\n        selectedFilterOption,\n\n        sortMode,\n        sortDirection,\n        lotFilters,\n\n        setSelectedCards,\n        handleAddLotClick\n    } = props\n    const stations = useSelector(state => state.stationsReducer.stations)\n    const routes = useSelector(state => state.tasksReducer.tasks)\n\n\n    /*\n   * This function renders a CardZone for each process in {selectedProcesses}\n   *\n   * For each process, the process's name and id are extracted\n   * a CardZone is rendered for each process, which is contained in a wrapping div for relative styling and additional elements (such as ProcessName)\n   *\n   * no params\n   * */\n\tconst renderSelectedProcesses = () => {\n\t\treturn (\n\t\t\t// map through {selectedProcesses}\n\t\t\tselectedProcesses.map((currProcess, processIndex) => {\n\n\t\t\t\t// extract process attributes\n\t\t\t\tconst {\n\t\t\t\t\tname: processName,\n\t\t\t\t\t_id: processId\n\t\t\t\t} = currProcess\n\n\t\t\t\t// return a CardZone wrapped with a styled container and any additional elements\n\n\t\t\t\treturn\t(\n          <VisibilitySensor partialVisibility = {true}>\n            {({isVisible}) =>\n              <>\n                {!!isVisible ?\n      \t\t\t\t\t<>\n      \t\t\t\t\t\t\t<styled.ZoneContainer\n      \t\t\t\t\t\t\t\tkey={processId}\n      \t\t\t\t\t\t\t>\n      \t\t\t\t\t\t\t\t<styled.ProcessName>{processName}</styled.ProcessName>\n\n      \t\t\t\t\t\t\t\t<CardZone\n      \t\t\t\t\t\t\t\t\thandleAddLotClick={handleAddLotClick}\n      \t\t\t\t\t\t\t\t\tsetSelectedCards={setSelectedCards}\n      \t\t\t\t\t\t\t\t\tselectedCards={selectedCards}\n      \t\t\t\t\t\t\t\t\tsortMode={sortMode}\n                        lotFilterValue = {lotFilterValue}\n                        selectedFilterOption = {selectedFilterOption}\n      \t\t\t\t\t\t\t\t\tsortDirection={sortDirection}\n      \t\t\t\t\t\t\t\t\tlotFilters={lotFilters}\n      \t\t\t\t\t\t\t\t\tsetShowCardEditor={setShowCardEditor}\n      \t\t\t\t\t\t\t\t\tshowCardEditor={showCardEditor}\n      \t\t\t\t\t\t\t\t\tmaxHeight={\"50rem\"}\n      \t\t\t\t\t\t\t\t\tprocessId={processId}\n      \t\t\t\t\t\t\t\t\thandleCardClick={handleCardClick}\n      \t\t\t\t\t\t\t\t/>\n      \t\t\t\t\t\t\t</styled.ZoneContainer>\n      \t\t\t\t\t</>\n                :\n                <div style = {{height: '20rem', width: '80%', margin: '2rem', color: 'grey'}}>\n                        ...Loading\n                        </div>\n              }\n            </>\n          }\n        </VisibilitySensor>\n\t\t\t)\n\t\t})\n\t)\n}\n\n\treturn(\n\t\t<styled.Container >\n\t\t\t<styled.ProcessesContainer>\n\t\t\t\t{renderSelectedProcesses()}\n\t\t\t</styled.ProcessesContainer>\n\t\t</styled.Container>\n\t)\n})\n\n// Specifies propTypes\nSummaryZone.propTypes = {\n    handleCardClick: PropTypes.func,\n    setShowCardEditor: PropTypes.func,\n    handleAddLotClick: PropTypes.func,\n    showCardEditor: PropTypes.bool,\n    lotFilterValue: PropTypes.any\n}\n\n// Specifies the default values for props:\nSummaryZone.defaultProps = {\n    handleCardClick: () => { },\n    setShowCardEditor: () => { },\n    handleAddLotClick: () => { },\n    showCardEditor: false,\n    lotFilterValue: \"\",\n    selectedFilterOption: null\n}\n\nexport default memo(SummaryZone)\n"],"sourceRoot":""}