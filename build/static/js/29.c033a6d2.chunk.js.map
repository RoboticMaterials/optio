{"version":3,"sources":["components/side_bar/content/cards/lot_filter_bar/lot_filter_bar.style.js","components/side_bar/content/cards/lot_filter_bar/lot_filter_bar.js","components/side_bar/content/cards/multi_select_options/multi_select_options.style.js","components/side_bar/content/cards/multi_select_options/multi_select_options.js","components/side_bar/content/cards/zone_header/zone_header.js","components/side_bar/content/cards/zone_header/zone_header.style.js","components/basic/rotate_button/rotate_button.style.js","components/basic/rotate_button/rotate_button.js","components/side_bar/content/cards/lot_filter_bar/flag_button/flag_button.js","components/side_bar/content/cards/lot_sort_bar/lot_sort_bar.js","components/side_bar/content/cards/lot_bars.style.js","components/side_bar/content/cards/lot_filter_bar/lot_filter_bar_basic.js"],"names":["scrollCss","css","ColumnContainer","styled","div","props","theme","bg","secondary","RowContainer","Description","span","textColor","fontSize","sz4","FiltersContainer","ExpandableContainer","tertiary","open","RemoveIcon","button","iconButtonCss","ExpandContractIcon","ActiveContainer","ActiveFiltersContainer","ActiveFilter","LightenDarkenColor","schema","lots","solid","NewFilterContainer","FlagsContainer","selectedCss","FlagButton","commonClickableIcon","selected","AddFilterButton","DualSelectionButton","font","primary","octonary","quinary","tasks","quaternary","COMPARITOR_OPERATORS","label","value","SET_OPERATORS","LotFilterBar","filters","onAddFilter","onRemoveFilter","themeContext","useContext","ThemeContext","useState","setOpen","canAddFilter","setCanAddFilter","selectedFilterKey","setSelectedFilterKey","selectedFilterOperator","setSelectedFilterOperator","selectedFilterOptions","setSelectedFilterOptions","Object","values","LOT_FILTER_OPTIONS","lotFilterKeyOptions","setLotFilterKeyOptions","lotTemplates","useSelector","state","lotTemplatesReducer","processes","processesReducer","useEffect","document","addEventListener","e","keyCode","removeEventListener","templateFields","getAllTemplateFields","tempLotFilterKeyOptions","forEach","currTemplateField","dataType","FIELD_DATA_TYPES","DATE_RANGE","push","index","fieldName","renderActiveFilters","useMemo","map","filter","stringifyFilter","className","onClick","_id","onChangeOperatorOption","onChangeFilterOptions","renderFilterOperatorSelector","options","onChange","labelField","valueField","style","overflow","minWidth","background","renderFilterOptionsSelector","placeholder","text","target","focus","inputStyle","height","alignSelf","flex","num","parseFloat","multi","marginBottom","FLAG_OPTIONS","flags","val","id","onRemoveItem","onClearAll","contentRenderer","methods","paddingRight","isArray","currVal","currColor","color","currColorId","margin","type","event","stopPropagation","dropDown","itemRenderer","item","itemIndex","isSelected","paddingTop","paddingBottom","role","tabIndex","disabled","undefined","addItem","onKeyPress","justifyContent","borderRadius","isRelative","relativeDays","width","display","onPlusClick","onMinusClick","onInputChange","parseInt","backgroundColor","buttonStyle","containerStyle","boxShadow","date","usable","descriptionCss","BASIC_FIELD_DEFAULTS","CALENDAR_FIELD_RANGE","DATE","CALENDAR_FIELD","newFilter","operator","uuidv4","defaultProps","Container","MultiSelectOptions","selectedLots","onDeleteClick","onMoveClick","onClearClick","length","selectedLotsCount","setSelectedLotsCount","marginRight","ZoneHeader","sortDirection","setSortDirection","setSortMode","sortMode","lotFilterValue","setLotFilterValue","selectedFilterOption","setSelectedFilterOption","shouldFocusLotFilter","offsetLeft","offsetTop","setSize","sizeRef","useRef","current","offsetHeight","offsetWidth","window","innerWidth","SORT_OPTIONS","find","currOption","multipleFilters","settingsReducer","settings","enableMultipleLotFilters","LOT_SORT_OPTIONS","columnCss","columnCss3","containerCss","dropdownCss","valueCss","reactDropdownSelectCss","flexItemCss","flexContainerCss","SortFilterContainer","ContentContainer","OptionContainer","ItemContainer","widthBreakpoint","laptop","rotateButtonContainerCss","rotateButtonIconCss","Icon","i","rotationTime","rotate","STATES","RotateButton","iconName1","onStateOne","onStateTwo","iconCss","currentState","setCurrentState","setRotate","rest","defaultTypes","LotSortBar","dashboardID","useParams","dashboardsReducer","dashboards","lotSortOptions","setLotSortOptions","tempLotSortOptions","flexWrap","borderTopRightRadius","borderBottomRightRadius","maxWidth","SORT_DIRECTIONS","ASCENDING","DESCENDING","BarsContainer","VALUE_MODES","LotFilterBarBasic","lotFilterOptions","setLotFilterOptions","valueMode","setValueMode","tempLotFilterOptions","padding","newFilterOption","newFilterValue","PlaceholderButton","filterValue","onOptionClick","option","prevOptions","newOptions","optionIndex","indexOf","FILTER_DATE_OPTIONS","EQUAL","GREATER_THAN","lessThanIndex","LESS_THAN","immutableDelete","greaterThanIndex","immutableReplace","minDate","isNonEmptyArray","maxDate","currValue","currItem","currIndex","prevValue","selectRange"],"mappings":"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","file":"static/js/29.c033a6d2.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\nimport {commonClickableIcon, iconButtonCss} from \"../../../../../common_css/common_css\";\nimport { LightenDarkenColor } from \"../../../../../methods/utils/color_utils\";\n\nconst scrollCss = css`\n::-webkit-scrollbar {\n        width: 10px;\n        height: 5px;\n        margin: 1rem;\n        background: transparent;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n        background: rgba(175,175,175,0.75);\n    }\n\n    ::-webkit-scrollbar-track:hover {\n        background: rgba(175,175,175,0.6);\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n        background: #27272b;\n        border-radius: .5rem;\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n        background: #555;\n\n    }\n`\n\nexport const ColumnContainer = styled.div`\n  display: flex;\n  margin-right: 1rem;\n  align-items: flex-start;\n  justify-content: flex-start;\n  flex-direction: column;\n//   background: ${props => props.theme.bg.secondary};\n  padding: .25rem 1rem 0 1rem;\n  border-radius: .4rem;\n//   height: fit-content;\n\n//   margin-bottom: 1rem;\n\n`\n\nexport const RowContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n`\n\nexport const Description = styled.span`\n  color: ${props => props.theme.textColor};\n  white-space: nowrap;\n  ${props => props.css && props.css};\n  font-size: ${props => props.theme.fontSize.sz4};\n  margin-bottom: .25rem;\n`\n\nexport const FiltersContainer = styled.div`\n\n`\n\nexport const ExpandableContainer = styled.div`\n    position: absolute;\n\n    background-color: ${props => props.theme.bg.tertiary};\n    border-radius: 0.2rem;\n    min-height: 2.3rem;\n    min-width: 10rem;\n    max-width: 30rem;\n\n    display: flex;\n    flex-direction: column;\n    z-index: 2;\n\n    ${props => props.open && `box-shadow: 0 0 6px 3px rgba(0,0,0,0.2)`}\n`\n\nexport const RemoveIcon = styled.button`\n    ${iconButtonCss};\n    font-size: 0.8rem;\n    margin-left: 0.2rem;\n    color: ${props => props.theme.textColor};\n`\n\nexport const ExpandContractIcon = styled.div`\n\t${iconButtonCss};\n    color: ${props => props.theme.textColor};\n    line-height: 1.3rem;\n    height: 1.3rem;\n    cursor: pointer;\n`\n\nexport const ActiveContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding: 0.5rem;\n    min-width: 15rem;\n    maxw-width: 25rem;\n\n    ${props => !props.open &&\n        `max-height: 2.3rem;\n        overflow: hidden;`\n    }\n`\n\nexport const ActiveFiltersContainer = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    flex-grow: 1;\n`\n\nexport const ActiveFilter = styled.span`\n    background-color: ${props => LightenDarkenColor(props.theme.schema.lots.solid, 0)};\n    height: 1.5rem;\n    border-radius: 0.75rem;\n    padding: 0.3rem 0.6rem;\n    line-height: 0.9rem;\n    margin-right: 0.3rem;\n    margin-bottom: 0.3rem;\n`\n\nexport const NewFilterContainer = styled.div`\n    padding: 0.5rem;\n    display: flex;\n    flex-direction: column;\n`\n\nexport const FlagsContainer = styled.div`\n\tdisplay: flex;\n  overflow-x: auto;\n  flex: 1;\n\n  ${scrollCss};\n`\n\nconst selectedCss = css`\n\tbackground: ${props => props.theme.bg.secondary};\n`\n\nexport const FlagButton = styled.button`\n\t${iconButtonCss};\n\t${commonClickableIcon};\n\t${props => props.selected && selectedCss};\n`\n\nexport const AddFilterButton = styled.button`\n    border: none;\n    background-color: ${props => props.theme.schema.lots.solid};\n    height: 2rem;\n    color: white;\n    padding: 0 1rem;\n    border-radius: 2rem;\n    line-height: 2rem;\n    box-shadow: 0px 1px 5px 0px rgba(0,0,0,0.1);\n`\nexport const DualSelectionButton = styled.button`\n    font-size: 1rem;\n    width: 50%;\n    border: none;\n    font-family: ${props => props.theme.font.primary};\n\n    color: ${props => props.selected ? props.theme.bg.octonary : props.theme.bg.quinary};\n\n    background-color: ${props => props.selected ? props.theme.schema.tasks.solid : props.theme.bg.secondary};\n\n    transition: background-color 0.25s ease, box-shadow 0.1s ease;\n\n    &:focus{\n        outline: 0 !important\n    }\n\n    &:active{\n        box-shadow: none;\n    }\n\n    &:hover{\n        //background-color: ${props => props.theme.bg.quaternary};\n    }\n`\n","import React, { useState, useEffect, useMemo, useContext } from 'react'\nimport { useSelector } from 'react-redux';\n\n// components internal\nimport DropDownSearch from \"../../../../basic/drop_down_search_v2/drop_down_search\"\nimport Textbox from \"../../../../basic/textbox/textbox\"\nimport FlagButton from \"./flag_button/flag_button\"\nimport CalendarPlaceholder from \"../../../../basic/calendar_placeholder/calendar_placeholder\"\nimport NumberInput from '../../../../basic/number_input/number_input'\n\n// constants\nimport { FIELD_DATA_TYPES, FLAG_OPTIONS, LOT_FILTER_OPTIONS } from \"../../../../../constants/lot_contants\"\nimport { BASIC_FIELD_DEFAULTS } from \"../../../../../constants/form_constants\"\n\n// functions external\nimport PropTypes from 'prop-types'\nimport { ThemeContext } from \"styled-components\"\nimport { isMobile } from \"react-device-detect\"\n\n// utils\nimport { deepCopy } from '../../../../../methods/utils/utils'\nimport { isArray } from \"../../../../../methods/utils/array_utils\"\nimport { jsDateToString } from '../../../../../methods/utils/card_utils'\nimport { stringifyFilter, getAllTemplateFields } from \"../../../../../methods/utils/lot_utils\"\n\n// styles\nimport * as styled from \"./lot_filter_bar.style\"\nimport { uuidv4 } from '../../../../../methods/utils/utils';\n\nconst VALUE_MODES = {\n    TEXT_BOX: \"TEXT_BOX\",\n    DATE_RANGE: \"DATE_RANGE\",\n    SINGLE_DATE: \"SINGLE_DATE\",\n    FLAGS: \"FLAGS\"\n}\n\nconst COMPARITOR_OPERATORS = [\n    {label: 'Less than', value: '<'},\n    {label: 'Less than or Equal to', value: '<='},\n    {label: 'Equal to', value: '='},\n    {label: 'Greater than or Equal to', value: '>='},\n    {label: 'Greater than', value: '>'},\n]\n\nconst SET_OPERATORS = [\n    {label: 'Contains All', value: 'all'},\n    {label: 'Contains Any', value: 'any'},\n    {label: 'Does not Contain Any', value: 'not_any'},\n    {label: 'Does not Contain All', value: 'not_all'},\n]\n\n// Possible Options\n// name | StringField - Contains - TextField\n// process - Dropdown (processes)\n// flags - contains all | contains any | dn contain all | dn contain any - FlagDropdown \n// SingleDate | DateRangeSingle - gt/lt/et/gte/lte | isBetween - DateField\n// NumField | quantity | initQuantity - gt/lt/et/gte/gle | isBetween - NumField\n\nconst LotFilterBar = (props) => {\n\n    const {\n        filters,\n        onAddFilter,\n        onRemoveFilter,\n    } = props;\n\n    // theme\n    const themeContext = useContext(ThemeContext)\n\n    const [open, setOpen] = useState(false);\n    const [canAddFilter, setCanAddFilter] = useState(false);\n    const [selectedFilterKey, setSelectedFilterKey] = useState(null);\n    const [selectedFilterOperator, setSelectedFilterOperator] = useState(null);\n    const [selectedFilterOptions, setSelectedFilterOptions] = useState(null)\n    const [lotFilterKeyOptions, setLotFilterKeyOptions] = useState([...Object.values(LOT_FILTER_OPTIONS)])    // array of options for field to filter by\n\n    // redux state\n    const lotTemplates = useSelector(state => state.lotTemplatesReducer.lotTemplates) || {}\n    const processes = useSelector(state => Object.values(state.processesReducer.processes))\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", (e) => e.keyCode === 27 && setOpen(false), false);\n    \n        return () => {\n          document.removeEventListener(\"keydown\", (e) => e.keyCode === 27 && setOpen(false), false);\n        };\n      }, []);\n\n    /*\n        * This effect is used to set the filter options\n        *\n        * This is dependent on lotTemplates, as the available fields may change when a template does\n        * */\n    useEffect(() => {\n        const templateFields = getAllTemplateFields(lotTemplates)\n\n        let tempLotFilterKeyOptions = [...Object.values(LOT_FILTER_OPTIONS)]\n\n        templateFields.forEach((currTemplateField) => {\n\n            const {\n                dataType,\n                label\n            } = currTemplateField\n\n            if (dataType === FIELD_DATA_TYPES.DATE_RANGE) {\n                tempLotFilterKeyOptions.push({\n                    ...currTemplateField,\n                    label: `${label} (start)`,\n                    index: 0,\n                    fieldName: label\n                })\n                tempLotFilterKeyOptions.push({\n                    ...currTemplateField,\n                    label: `${label} (end)`,\n                    index: 1,\n                    fieldName: label\n                })\n            }\n            else {\n                tempLotFilterKeyOptions.push({\n                    ...currTemplateField,\n                    fieldName: label\n                })\n            }\n        })\n\n        setLotFilterKeyOptions(tempLotFilterKeyOptions)\n    }, [lotTemplates])\n\n    const renderActiveFilters = useMemo(() => {\n        return (\n            <styled.ActiveFiltersContainer>\n                {filters.map(filter => <styled.ActiveFilter>\n                    {stringifyFilter(filter)}\n                    <styled.RemoveIcon\n                        className={\"fas fa-times\"}\n                        onClick={() => onRemoveFilter(filter._id)}\n                    />\n                </styled.ActiveFilter>)}\n            </styled.ActiveFiltersContainer>\n        )\n        \n    }, [filters])\n\n    const onChangeFilterKey = (values) => {\n        // update filter value to appropriate default based on dataType\n        let newFilterValueType = null // null is suitable for most, use as default\n        switch(values[0].dataType) {\n            case FIELD_DATA_TYPES.DATE_RANGE:\n                newFilterValueType = BASIC_FIELD_DEFAULTS.CALENDAR_FIELD_RANGE\n                break\n            case FIELD_DATA_TYPES.DATE:\n                newFilterValueType = BASIC_FIELD_DEFAULTS.CALENDAR_FIELD\n                break\n        }\n\n\n        setSelectedFilterKey(values[0])\n        setSelectedFilterOperator(null)\n    }\n\n    const onChangeOperatorOption = (values) => {\n        setSelectedFilterOperator(values[0])\n    }\n\n    const onChangeFilterOptions = (values) => {\n        setSelectedFilterOptions(values)\n    }\n\n    const handleCreateNewFilter = () => {\n\n        const newFilter = {\n            ...selectedFilterKey,\n            operator: selectedFilterOperator.value,\n            options: selectedFilterOptions,\n            _id: uuidv4(),\n        }\n\n        onAddFilter(newFilter);\n        setSelectedFilterKey(null);\n        setSelectedFilterOperator(null);\n        setSelectedFilterOptions(null);\n        setOpen(false)\n        \n    }\n\n    const renderFilterOperatorSelector = useMemo(() => {\n\n        if (!selectedFilterKey) { return  null }\n\n        switch (selectedFilterKey.dataType) {\n\n            case 'STRING':\n                setSelectedFilterOperator({label: 'contains', value: 'contains'})\n                setCanAddFilter(false)\n                return null;\n\n            case 'INTEGER':\n                return (\n                    <DropDownSearch\n                        options={COMPARITOR_OPERATORS}\n                        onChange={(values) => {\n                            onChangeOperatorOption(values)\n                            setCanAddFilter(false)\n                        }}\n                        values={!!selectedFilterOperator ? [selectedFilterOperator] : []}\n                        labelField={\"label\"}\n                        valueField={\"value\"}\n                        schema={\"lots\"}\n                        style={{\n                            overflow: 'visible',\n                            minWidth: '10rem',\n                            background: themeContext.bg.primary,\n                        }}\n                    />\n                )\n\n            case 'PROCESSES':\n                setSelectedFilterOperator({label: 'is', value: 'is'})\n                setCanAddFilter(false)\n                return null;\n\n            case 'FLAGS':\n                return (\n                    <DropDownSearch\n                        options={SET_OPERATORS}\n                        onChange={(values) => {\n                            onChangeOperatorOption(values)\n                            setCanAddFilter(false)\n                        }}\n                        values={!!selectedFilterOperator ? [selectedFilterOperator] : []}\n                        labelField={\"label\"}\n                        valueField={\"value\"}\n                        schema={\"lots\"}\n                        style={{\n                            overflow: 'visible',\n                            minWidth: '10rem',\n                            background: themeContext.bg.primary,\n                        }}\n                    />\n                )\n\n            case 'DATE': // Calendar Items\n            case 'DATE_RANGE':\n                return (\n                    <DropDownSearch\n                        options={COMPARITOR_OPERATORS}\n                        onChange={(values) => {\n                            onChangeOperatorOption(values)\n                            setCanAddFilter(false)\n                        }}\n                        values={!!selectedFilterOperator ? [selectedFilterOperator] : []}\n                        labelField={\"label\"}\n                        valueField={\"value\"}\n                        schema={\"lots\"}\n                        style={{\n                            overflow: 'visible',\n                            minWidth: '10rem',\n                            background: themeContext.bg.primary,\n                        }}\n                    />\n                )\n            \n        }\n\n    }, [selectedFilterKey])\n\n    const renderFilterOptionsSelector = useMemo(() => {\n\n        if (!selectedFilterKey || !selectedFilterOperator) {return null}\n\n        switch (selectedFilterKey.dataType){\n\n            case 'STRING':\n                return (\n                    <Textbox\n                        placeholder='Contains'\n                        onChange={(e) => {\n                            onChangeFilterOptions({text: e.target.value})\n                            setCanAddFilter(true)\n                        }}\n                        focus={true}\n                        inputStyle={{\n                            height: \"2.2rem\",\n                            background: themeContext.bg.primary,\n                        }}\n                        style={{\n                            alignSelf: \"stretch\",\n                            flex: 1,\n                            minWidth: \"5rem\",\n                        }}\n                        schema={\"lots\"}\n                    />\n                )\n\n            case 'INTEGER':\n                return (\n                    <Textbox\n                        placeholder='Number'\n                        onChange={(e) => {\n                            onChangeFilterOptions({num: parseFloat(e.target.value)})\n                            setCanAddFilter(true)\n                        }}\n                        focus={true}\n                        inputStyle={{\n                            height: \"2.2rem\",\n                            background: themeContext.bg.primary,\n                        }}\n                        style={{\n                            alignSelf: \"stretch\",\n                            flex: 1,\n                            minWidth: \"5rem\"\n                        }}\n                        schema={\"lots\"}\n                    />\n                )\n\n            case \"PROCESSES\":\n                return (\n                    <DropDownSearch\n                        multi={true}\n                        options={processes}\n                        onChange={values => {\n                            onChangeFilterOptions({processes: values})\n                            setCanAddFilter(true)\n                        }}\n                        values={selectedFilterOptions?.processes || []}\n                        labelField={\"name\"}\n                        valueField={\"_id\"}\n                        schema={\"lots\"}\n                        style={{\n                            overflow: 'visible',\n                            minWidth: '15rem',\n                            marginBottom: '0.5rem',\n                            background: themeContext.bg.primary,\n                        }}\n                    />\n                )\n\n            case \"FLAGS\":\n                return (\n                    <DropDownSearch\n                        multi={true}\n                        options={Object.values(FLAG_OPTIONS)}\n                        onChange={(values) => {\n                            setSelectedFilterOptions({flags: values.map(val => val.id)})\n                            setCanAddFilter(true)\n                        }}\n                        onRemoveItem={(values) => {\n                            setSelectedFilterOptions({flags: values.map(val => val.id)})\n                            setCanAddFilter(true)\n                        }}\n                        onClearAll={() => {\n                            setSelectedFilterOptions({flags: []})\n                            setCanAddFilter(true)\n                        }}\n                        labelField={\"id\"}\n                        valueField={\"id\"}\n                        schema={\"lots\"}\n                        contentRenderer={({ props, state, methods }) => {\n\n                            const {\n                                values = []\n                            } = state || {}\n\n                            return (\n                                <styled.FlagsContainer style={{minWidth: '4rem', paddingRight: '1rem'}}>\n                                    {isArray(values) && values.map(currVal => {\n                                        const {\n                                            color: currColor,\n                                            id: currColorId\n                                        } = currVal || {}\n\n                                        return (\n                                            <styled.FlagButton\n                                                style={{\n                                                    margin: \"0rem .1rem\",\n                                                }}\n                                                key={currColorId}\n                                                type={\"button\"}\n                                                color={currColor}\n                                                onClick={(event) => {\n                                                    event.stopPropagation()\n                                                    methods.dropDown('open')\n                                                }}\n                                                schema={props.schema}\n                                                className=\"fas fa-square\"\n                                            />\n                                        )\n                                    })}\n\n                                </styled.FlagsContainer>\n                            )\n                        }}\n                        itemRenderer={({ item, itemIndex, props, state, methods }) => {\n                            const {\n                                color: currColor,\n                                id: currColorId\n                            } = item\n\n                            const isSelected = methods.isSelected(item)\n\n                            return(\n                                <FlagButton\n                                    style={{\n                                        paddingTop: \".5rem\",\n                                        paddingBottom: \".5rem\",\n                                    }}\n                                    selected={isSelected}\n                                    key={currColorId}\n                                    type={\"button\"}\n                                    color={currColor}\n                                    role=\"option\"\n                                    tabIndex=\"-1\"\n                                    onClick={item.disabled ? undefined : () => methods.addItem(item)}\n                                    onKeyPress={item.disabled ? undefined : () => methods.addItem(item)}\n                                    schema={props.schema}\n                                    className={isSelected ? \"fas fa-check-square\" : \"fas fa-square\"}\n                                />\n                            )\n                        }}\n                        style={{\n                            minWidth: \"10rem\",\n                            flex: 1,\n                            background: themeContext.bg.primary,\n                            alignSelf: \"stretch\",\n                        }}\n                    />\n                )\n\n            case \"DATE\": // Calendar Item\n            case \"DATE_RANGE\":\n                return (\n                    <>\n                    <styled.RowContainer style={{ justifyContent: 'center', marginBottom: '0.5rem' }}>\n                        <styled.DualSelectionButton\n                            style={{ borderRadius: '.5rem 0rem 0rem .5rem' }}\n                            onClick={() => {\n                                onChangeFilterOptions({isRelative: false})\n                                setCanAddFilter(false)\n                            }}\n                            selected={!selectedFilterOptions?.isRelative}\n                        >\n                            Date\n                        </styled.DualSelectionButton>\n\n                        <styled.DualSelectionButton\n                            style={{ borderRadius: '0rem .5rem .5rem 0rem' }}\n                            onClick={() => {\n                                onChangeFilterOptions({isRelative: true, relativeDays: 0})\n                                setCanAddFilter(true)\n                            }}\n                            selected={selectedFilterOptions?.isRelative}\n\n                        >\n                            Relative\n                    </styled.DualSelectionButton>\n                    </styled.RowContainer>\n                    {selectedFilterOptions?.isRelative ?\n                        <div style={{marginBottom: '0.5rem'}}>\n                            <styled.Description style={{width: '100%', justifyContent: 'center', display: 'flex'}}>Days relative to current date</styled.Description>\n                            <NumberInput \n                                onPlusClick={(e) => onChangeFilterOptions({...selectedFilterOptions, relativeDays: selectedFilterOptions.relativeDays+1})}\n                                onMinusClick={(e) => onChangeFilterOptions({...selectedFilterOptions, relativeDays: selectedFilterOptions.relativeDays-1})}\n                                onInputChange={e => onChangeFilterOptions({...selectedFilterOptions, relativeDays: parseInt(e.target.value)})}\n                                inputStyle={{backgroundColor: themeContext.bg.primary, borderRadius: '0.4rem', height: '3rem', fontSize: '2rem'}}\n                                buttonStyle={{fontSize: '2.6rem'}}\n                                value={selectedFilterOptions.relativeDays}\n                            />\n                        </div>\n                        :\n                        <CalendarPlaceholder\n                            schema={\"lots\"}\n                            containerStyle={{\n                                width: \"100%\",\n                                height: \"36px\",\n                                boxShadow: \"0 0.1rem 0.2rem 0rem rgba(0,0,0,0.1)\",\n                                backgroundColor: themeContext.bg.primary\n                            }}\n                            value={selectedFilterOptions?.date || null}\n                            onChange={val => {\n                                onChangeFilterOptions({date: val})\n                                setCanAddFilter(true)\n                            }}\n                            usable={true}\n                        />\n                    }\n                    </>\n                )\n        }\n\n\n    })\n\n    return (\n        <styled.ColumnContainer>\n            <styled.Description\n                css={props.descriptionCss}\n            >\n                Filters\n            </styled.Description>\n            <styled.FiltersContainer>\n                <styled.ExpandableContainer open={open}>\n                    <styled.ActiveContainer open={open}>\n                        {renderActiveFilters}\n                        <styled.ExpandContractIcon\n                            className={open ? \"fas fa-chevron-up\" : \"fas fa-ellipsis-h\"}\n                            onClick={() => setOpen(!open)}\n                        />\n                    </styled.ActiveContainer>\n                    \n                    {open && \n                        <styled.NewFilterContainer>\n                            <styled.Description>New Filter</styled.Description>\n                            <DropDownSearch\n                                options={lotFilterKeyOptions}\n                                onChange={onChangeFilterKey}\n                                values={!!selectedFilterKey ? [selectedFilterKey] : []}\n                                labelField={\"label\"}\n                                valueField={\"label\"}\n                                schema={\"lots\"}\n                                \n                                style={{\n                                    overflow: 'visible',\n                                    minWidth: '15rem',\n                                    marginBottom: '0.5rem',\n                                    background: themeContext.bg.primary,\n                                }}\n                            />\n                            {!!selectedFilterKey && \n                                <div style={{marginBottom: \"0.5rem\"}}>\n                                    {renderFilterOperatorSelector}\n                                </div>\n                            }\n                            {!!selectedFilterOperator && \n                                <div style={{marginBottom: \"0.5rem\"}}>\n                                    {renderFilterOptionsSelector}\n                                </div>\n                            }\n                            {canAddFilter &&\n                                <styled.AddFilterButton onClick={handleCreateNewFilter}>Add Filter</styled.AddFilterButton>\n                            }\n                        </styled.NewFilterContainer>\n                    }\n                </styled.ExpandableContainer>\n            </styled.FiltersContainer>\n        </styled.ColumnContainer>\n    )\n    \n}\n\nLotFilterBar.propTypes = {\n\n}\n\nLotFilterBar.defaultProps = {\n\n}\n\nexport default LotFilterBar;\n","import styled from \"styled-components\"\nimport * as commonCss from \"../../../../../common_css/layout\"\n\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n  \tmargin-bottom: 1rem;\n`","import React, {useEffect, useState} from 'react'\n\n// components internal\nimport Button from \"../../../../basic/button/button\"\n\n// functions external\nimport PropTypes from 'prop-types'\n\n// styles\nimport * as styled from \"./multi_select_options.style\"\n\nconst MultiSelectOptions = (props) => {\n\n\tconst {\n\t\tselectedLots,\n\t\tonDeleteClick,\n\t\tonMoveClick,\n\t\tonClearClick\n\t} = props\n\n\tconst [selectedLotsCount, setSelectedLotsCount] = useState(selectedLots.length)\n\n\tuseEffect(() => {\n\t\tsetSelectedLotsCount(selectedLots.length)\n\t}, [selectedLots])\n\n\treturn (\n\t\t<styled.Container>\n\t\t\t<Button\n\t\t\t\tstyle={{margin: \"0 1rem 0 0\"}}\n\t\t\t\ttype={\"button\"}\n\t\t\t\tschema={\"delete\"}\n\t\t\t\ttertiary\n\t\t\t\tonClick={onDeleteClick}\n\t\t\t>\n\t\t\t\t<i style={{marginRight: \".5rem\"}} className=\"fa fa-trash\" aria-hidden=\"true\"/>\n\t\t\t\tDelete ({selectedLotsCount})\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tstyle={{margin: \"0 1rem 0 0\"}}\n\t\t\t\ttype={\"button\"}\n\t\t\t\tschema={\"lots\"}\n\t\t\t\tonClick={onMoveClick}\n\t\t\t\tlabel={`Move (${selectedLotsCount})`}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tstyle={{margin: 0}}\n\t\t\t\ttype={\"button\"}\n\t\t\t\tsecondary\n\t\t\t\tschema={\"lots\"}\n\t\t\t\tonClick={onClearClick}\n\t\t\t\tlabel={`Clear Selected`}\n\t\t\t/>\n\n\t\t</styled.Container>\n\t)\n}\n\nMultiSelectOptions.propTypes = {\n\tselectedLots: PropTypes.array,\n\tonDeleteClick: PropTypes.func,\n\tonClearClick: PropTypes.func,\n\tonMoveClick: PropTypes.func,\n}\n\nMultiSelectOptions.defaultProps = {\n\tselectedLots: [],\n\tonDeleteClick: () => {},\n\tonClearClick: () => {},\n\tonMoveClick: () => {},\n}\n\nexport default MultiSelectOptions\n","import React, {useContext, useEffect, useRef, useState} from \"react\";\n\n// components internal\nimport DropDownSearch from \"../../../../basic/drop_down_search_v2/drop_down_search\";\nimport Textbox from \"../../../../basic/textbox/textbox\";\n\n// constants\nimport {SORT_MODES, SORT_OPTIONS} from \"../../../../../constants/common_contants\";\nimport {\n\tFIELD_DATA_TYPES,\n\tFLAG_OPTIONS,\n\tLOT_FILTER_OPTIONS,\n\tLOT_SORT_OPTIONS,\n\tSORT_DIRECTIONS\n} from \"../../../../../constants/lot_contants\";\n\n// functions external\nimport {ThemeContext} from \"styled-components\";\nimport {useSelector} from \"react-redux\";\n\n// utils\nimport {isArray} from \"../../../../../methods/utils/array_utils\";\nimport {getAllTemplateFields} from \"../../../../../methods/utils/lot_utils\";\n\n// styles\nimport * as styled from './zone_header.style'\nimport LotSortBar from \"../lot_sort_bar/lot_sort_bar\";\nimport LotFilterBar from \"../lot_filter_bar/lot_filter_bar\";\nimport LotFilterBarBasic from '../lot_filter_bar/lot_filter_bar_basic'\n\nimport {\n\tcolumnCss, columnCss3,\n\tcontainerCss,\n\tdescriptionCss,\n\tdropdownCss,\n\treactDropdownSelectCss,\n\tvalueCss\n} from \"../lot_bars.style\";\nimport MultiSelectOptions from \"../multi_select_options/multi_select_options\";\n\nconst ZoneHeader = (props) => {\n\n\tconst {\n\t\tsortDirection,\n\t\tsetSortDirection,\n\t\tsetSortMode,\n\t\tsortMode,\n\n\t\tlotFilterValue,\n\t\tsetLotFilterValue,\n\t\tselectedFilterOption,\n\t\tsetSelectedFilterOption,\n\t\tshouldFocusLotFilter,\n\n\t\tfilters,\n\t\tonAddFilter,\n\t\tonRemoveFilter,\n\n\t\tselectedLots,\n\t\tonDeleteClick,\n\t\tonMoveClick,\n\t\tonClearClick,\n\n\n\t} = props\n\n\tconst [size, setSize] = useState({\n\t\twidth: undefined,\n\t\theight: undefined,\n\t\toffsetLeft: undefined,\n\t\toffsetTop: undefined,\n\t})\n\n\tconst sizeRef = useRef(null)\n\n\tuseEffect(() => {\n\n\t\t// if sizeRef is assigned\n\t\tif (sizeRef.current) {\n\n\t\t\t// extract dimensions of sizeRef\n\t\t\tlet height = sizeRef.current.offsetHeight;\n\t\t\tlet width = sizeRef.current.offsetWidth;\n\t\t\tlet offsetTop = sizeRef.current.offsetTop;\n\t\t\tlet offsetLeft = sizeRef.current.offsetLeft;\n\n\t\t\t// set zoneSize\n\t\t\tsetSize({\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\toffsetTop: offsetTop,\n\t\t\t\toffsetLeft: offsetLeft,\n\t\t\t});\n\t\t}\n\n\t}, [sizeRef, window.innerWidth])\n\n\tconst selectedSortOption =  SORT_OPTIONS.find((currOption) => currOption.sortMode === sortMode)\n\n\tconst themeContext = useContext(ThemeContext)\n\n\tconst processes = useSelector(state => { return Object.values(state.processesReducer.processes) }) || []\n\tconst multipleFilters = useSelector(state => state.settingsReducer.settings.enableMultipleLotFilters)\n\n\tconst [lotFilterOptions, setLotFilterOptions] = useState([...Object.values(LOT_FILTER_OPTIONS)])\n\tconst [lotSortOptions, setLotSortOptions] = useState([...Object.values(LOT_SORT_OPTIONS)])\n\n\treturn (\n\t\t<styled.Container>\n\n\t\t\t<styled.SortFilterContainer>\n\t\t\t{/* {zone === \"summary\" &&\n\t\t\t<styled.ColumnContainer\n\t\t\t\tcss={columnCss3}\n\t\t\t>\n\t\t\t\t<styled.Description>Processes:</styled.Description>\n\t\t\t\t<div\n\t\t\t\t\tref={sizeRef}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflex: 1,\n\t\t\t\t\t\toverflow: \"hidden\"\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t<DropDownSearch\n\t\t\t\t\tmaxDropdownWidth={`${size.width}px` }\n\t\t\t\t\tportal={document.getElementById(\"root\")}\n\t\t\t\t\tcontainerCss={containerCss}\n\t\t\t\t\tdropdownCss={dropdownCss}\n\t\t\t\t\tvalueCss={valueCss}\n\t\t\t\t\tschema={\"lots\"}\n\t\t\t\t\tplaceholder='Select processes...'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackground: themeContext.bg.secondary,\n\t\t\t\t\t\tflex: 1,\n\t\t\t\t\t\toverflow: \"hidden\"\n\t\t\t\t\t}}\n\t\t\t\t\tonClearAll={()=>{\n\t\t\t\t\t\tsetSelectedProcesses([])\n\t\t\t\t\t}}\n\t\t\t\t\tmulti\n\t\t\t\t\tvalues={selectedProcesses}\n\t\t\t\t\toptions={processes.filter((currProcess) => currProcess.map_id === currentMap._id)}\n\t\t\t\t\tonChange={values => {\n\t\t\t\t\t\tsetSelectedProcesses(values)\n\t\t\t\t\t}}\n\t\t\t\t\tpattern={null}\n\t\t\t\t\tlabelField={'name'}\n\t\t\t\t\tvalueField={\"_id\"}\n\t\t\t\t\tonDropdownOpen={() => {\n\t\t\t\t\t}}\n\t\t\t\t\tonRemoveItem={(values)=> {\n\t\t\t\t\t\tsetSelectedProcesses(values)\n\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</styled.ColumnContainer>\n\t\t\t} */}\n\n\t\t\t<styled.OptionContainer>\n\t\t\t\t<LotSortBar\n\t\t\t\t\tsortMode={sortMode}\n\t\t\t\t\tsetSortMode={setSortMode}\n\t\t\t\t\tsortDirection={sortDirection}\n\t\t\t\t\tsetSortDirection={setSortDirection}\n\n\t\t\t\t\tcolumnCss={columnCss3}\n\t\t\t\t\tcontainerCss={containerCss}\n\t\t\t\t\tdropdownCss={dropdownCss}\n\t\t\t\t\tvalueCss={valueCss}\n\t\t\t\t/>\n\t\t\t</styled.OptionContainer>\n\n\t\t\t<styled.OptionContainer>\n\t\t\t{!!multipleFilters ?\n\t\t\t\t<LotFilterBar\n\t\t\t\t\tfilters={filters}\n\t\t\t\t\tonAddFilter={onAddFilter}\n\t\t\t\t\tonRemoveFilter={onRemoveFilter}\n\n\t\t\t\t\tcolumnCss={columnCss3}\n\t\t\t\t\tcontainerCss={containerCss}\n\t\t\t\t\tdropdownCss={dropdownCss}\n\t\t\t\t\tvalueCss={valueCss}\n\t\t\t\t/>\n\t\t\t\t:\n\t\t\t\t<LotFilterBarBasic\n\t\t\t\t\tlotFilterValue={lotFilterValue}\n\t\t\t\t\tcolumnCss={columnCss}\n\t\t\t\t\tcontainerCss={containerCss}\n\t\t\t\t\tdescriptionCss={descriptionCss}\n\t\t\t\t\tdropdownCss={dropdownCss}\n\t\t\t\t\tvalueCss={valueCss}\n\t\t\t\t\treactDropdownSelectCss={reactDropdownSelectCss}\n\t\t\t\t\tsetLotFilterValue={setLotFilterValue}\n\t\t\t\t\tselectedFilterOption={selectedFilterOption}\n\t\t\t\t\tsetSelectedFilterOption={setSelectedFilterOption}\n\t\t\t\t\tfilters={filters}\n\t\t\t\t\tonAddFilter={onAddFilter}\n\t\t\t\t\tonRemoveFilter={onRemoveFilter}\n\t\t\t\t/>\n\t\t\t}\n\n\n\t\t\t</styled.OptionContainer>\n\t\t\t</styled.SortFilterContainer>\n\n\t\t\t{selectedLots.length > 0 &&\n\t\t\t<MultiSelectOptions\n\t\t\t\tselectedLots={selectedLots}\n\t\t\t\tonDeleteClick={onDeleteClick}\n\t\t\t\tonMoveClick={onMoveClick}\n\t\t\t\tonClearClick={onClearClick}\n\t\t\t/>\n\t\t\t}\n\t\t</styled.Container>\n\t)\n}\n\nexport default ZoneHeader\n","import styled, { css } from \"styled-components\";\nimport {commonClickableIcon, iconButtonCss} from \"../../../../../common_css/common_css\";\n\n// the margin bottom is needed for items in a flex-wrap container in order to maintain spacing when wrapped.\n// don't change unless you adjust everything else accordingly...\nconst flexItemCss = css`\n  margin-bottom: 1rem;\n`\n\n// the margin bottom is necessary for spacing when wrapped. Don't change unless you know what you're doing...\nconst flexContainerCss = css`\n\tmargin-bottom: -1rem;\n\tflex-wrap: wrap;\n`\n\nconst scrollCss = css`\n::-webkit-scrollbar {\n        width: 10px;\n        height: 5px;\n        margin: 1rem;\n        background: transparent;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n        background: rgba(175,175,175,0.75);\n    }\n\n    ::-webkit-scrollbar-track:hover {\n        background: rgba(175,175,175,0.6);\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n        background: #27272b;\n        border-radius: .5rem;\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n        background: #555;\n\n    }\n`\n\nexport const SortFilterContainer = styled.div`\n\tflex: 1;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n`\n\nexport const Container = styled.div`\n  ${flexContainerCss}; // uses flex-wrap. Don't change unless you know what you're doing...\n  display: flex;\n  justify-content: space-between;\n  flex-grow: 1;\n  z-index: 20;\n  position: relative;\n  flex-direction: row;\n  align-items: flex-end;\n`\n\nexport const ColumnContainer = styled.div`\n  display: flex;\n  margin-right: 1rem;\n  align-items: flex-start;\n  justify-content: flex-start;\n  flex-direction: column;\n  // background: ${props => props.theme.bg.secondary};\n  padding: .25rem 1rem 0 1rem;\n  border-radius: .4rem;\n  // height: fit-content;\n  \n  margin-bottom: 1rem;\n  \n`\n\nexport const ExpandContractIcon = styled.button`\n\t${iconButtonCss};\n  margin-right: .5rem;\n  color: ${props => props.theme.textColor};\n`\n\nexport const Description = styled.span`\n  color: ${props => props.theme.textColor};\n  white-space: nowrap;\n  ${props => props.css && props.css};\n  font-size: ${props => props.theme.fontSize.sz4};\n  //margin-bottom: .25rem;\n`\n\nexport const ContentContainer = styled.div`\n  display: flex;\n  position: relative;\n  height: fit-content;\n  align-items: center;\n  flex: 1;\n  align-self: stretch;\n  margin-top: .25rem;\n  margin-bottom: -1rem;\n`\n\n\n\nexport const OptionContainer = styled.div`\n\t${flexItemCss};\t// this element is used in flex-wrap containers - don't remove unless you adjust everything else accordingly...\n\talign-self: stretch;\n\tdisplay: flex;\n\talign-items: flex-start;\n`\n\n// the margin bottom is needed for flex-wrap spacing. Don't change unless you adjust everything else accordingly...\nexport const ItemContainer = styled.div`\n\t${flexItemCss};\t// this element is used in flex-wrap containers - don't remove unless you adjust everything else accordingly...\n\tdisplay: flex;\n\talign-items: center;\n  flex: 1;\n\t\n\t@media (max-width: ${props => props.theme.widthBreakpoint.laptop}) {\n\t\tflex-wrap: wrap;\n\t}\n  \n  \n`\n\nexport const FlagsContainer = styled.div`\n\tdisplay: flex;\n  overflow-x: auto;\n  flex: 1;\n  \n  ${scrollCss};\n`\n\nexport const rotateButtonContainerCss = css`\n  border-top-right-radius: 0.2rem;\n  border-bottom-right-radius: 0.2rem;\n  box-shadow: 0 0.1rem 0.2rem 0rem rgba(0,0,0,0.1);\n  background: ${props => props.theme.bg.tertiary};\n`\n\nexport const rotateButtonIconCss = css`\n`\n\nexport const ArrowContainer = styled.div`\n\tdisplay: flex;\n\tflex: 4;\n\tjustify-content: center;\n\talign-items: center;\n`\n\nexport const Spacer = styled.div`\n\tflex: 1;\n`\n\nconst selectedCss = css`\n\tbackground: ${props => props.theme.bg.secondary};\n`\n\nexport const FlagButton = styled.button`\n\t${iconButtonCss};\n\t${commonClickableIcon};\t\n\t${props => props.selected && selectedCss};\n`\n\nexport const ArrowButton = styled.button`\n\t${iconButtonCss};\n\t${commonClickableIcon};\t\n\t${props => props.selected && selectedCss};\n`\n\n","import styled, {css} from 'styled-components'\n\nexport const Container = styled.button`\n  transition: all 0.2s ease;\n  \n  align-self: stretch;\n  padding: 0 1rem;\n  background: ${props => props.theme.bg.secondary};\n  width: 3.5rem;\n  border: none;\n  border-left: 1px solid ${props => props.theme.bg.quaternary};\n  //border-bottom: 1px solid ${props => props.theme.bg.quinary};\n  outline: none !important;\n  \n  color: ${props => props.theme.textColor};\n\n  &:active {\n    border-bottom: 1px solid ${props => props.theme.schema[props.schema].solid};\n    color: ${props => props.theme.schema[props.schema].solid};\n  }\n  \n  ${props => props.css && props.css};\n`\n\nexport const Icon = styled.i`\n  transition: all 0.2s ease;\n  transition: ${props => `transform ${props.rotationTime}ms ease`};\n  ${props => props.rotate && `transform: rotate(180deg)`};\n  \n  ${props => props.css && props.css};\n`","import React, {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\n\n// styles\nimport * as styled from \"./rotate_button.style\"\n\n// component constant\nconst STATES = {\n\tSTATE_ONE: \"STATE_ONE\",\n\tSTATE_TWO: \"STATE_TWO\"\n}\n\nconst RotateButton = props => {\n\tconst {\n\t\ticonName1,\n\t\tstate,\n\t\trotationTime,\n\t\tonStateOne,\n\t\tonStateTwo,\n\t\tcontainerCss,\n\t\ticonCss,\n\t\tschema\n\t} = props\n\n\tconst [currentState, setCurrentState] = useState(state == 1 ? STATES.STATE_ONE : STATES.STATE_TWO)\t// rotation state\n\tconst [rotate, setRotate] = useState(false)\n\tconst [call, setCall] = useState(false)\n\n\t/*\n\t* sets rotate when currentState changes and calls appropriate callback funcs\n\t* */\n\tuseEffect(() => {\n\t\tif(currentState === STATES.STATE_ONE) {\n\t\t\tsetRotate(false)\n\t\t\tonStateOne()\n\n\t\t}\n\t\telse {\n\t\t\tsetRotate(true)\n\t\t\tonStateTwo()\n\t\t}\n\t}, [currentState])\n\n\treturn (\n\t\t<styled.Container\n\t\t\tcss={containerCss}\n\t\t\tschema={schema}\n\t\t\tonClick={() => {\n\t\t\t\tsetCurrentState(currentState === STATES.STATE_ONE ? STATES.STATE_TWO : STATES.STATE_ONE)\n\t\t\t}}\n\t\t>\n\t\t\t<styled.Icon\n\t\t\t\tschema={schema}\n\t\t\t\tcss={iconCss}\n\t\t\t\trotate={rotate}\n\t\t\t\trotationTime={rotationTime}\n\t\t\t\tclassName={iconName1}\n\t\t\t>\n\t\t\t</styled.Icon>\n\t\t</styled.Container>\n\t)\n}\n\nRotateButton.propTypes = {\n\ticonName1: PropTypes.string,\n\trotationTime: PropTypes.number,\n\tonStateOne: PropTypes.func,\n\tonStateTwo: PropTypes.func,\n}\n\nRotateButton.defaultProps = {\n\ticonName1: \"\",\n\trotationTime: 500,\n\tonStateOne: () => {},\n\tonStateTwo: () => {},\n\tschema: \"default\"\n}\n\nexport default RotateButton\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as styled from \"../../zone_header/zone_header.style\";\n\nconst FlagButton = (props) => {\n\n\tconst {\n\t\tcolor,\n\t\tstyle,\n\t\tonClick,\n\t\t...rest\n\t} = props\n\n\treturn (\n\t\t<styled.FlagButton\n\t\t\tstyle={style}\n\t\t\ttype={\"button\"}\n\t\t\tcolor={color}\n\t\t\tclassName=\"fas fa-square\"\n\t\t\tonClick={onClick}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\nFlagButton.propTypes = {\n\tcolor: PropTypes.string,\n\tonClick: PropTypes.func\n};\n\nFlagButton.defaultTypes = {\n\tcolor: \"\",\n\tonClick: () => {},\n};\n\nexport default FlagButton;\n","import React, { useContext, useEffect, useRef, useState } from 'react'\nimport { useParams } from 'react-router-dom'\n\n// components internal\nimport DropDownSearch from \"../../../../basic/drop_down_search_v2/drop_down_search\"\nimport RotateButton from \"../../../../basic/rotate_button/rotate_button\"\n\n// functions external\nimport PropTypes from 'prop-types'\nimport { ThemeContext } from \"styled-components\"\nimport { useSelector } from \"react-redux\"\nimport { isMobile } from \"react-device-detect\"\n\n// styles\nimport * as styled from \"../zone_header/zone_header.style\"\n\n// utils\nimport { getAllTemplateFields } from \"../../../../../methods/utils/lot_utils\"\nimport {\n    FIELD_DATA_TYPES,\n    LOT_FILTER_OPTIONS,\n    LOT_SORT_OPTIONS,\n    SORT_DIRECTIONS\n} from \"../../../../../constants/lot_contants\"\n\nconst LotSortBar = (props) => {\n\n    const {\n        sortMode,\n        sortDirection,\n        setSortMode,\n        setSortDirection,\n    } = props\n\n    const params = useParams()\n\n    const {\n        dashboardID,\n    } = params || {}\n\n    const lotTemplates = useSelector(state => { return state.lotTemplatesReducer.lotTemplates }) || {}\n    const dashboard = useSelector(state => state.dashboardsReducer.dashboards)[dashboardID]\n    const [lotSortOptions, setLotSortOptions] = useState([...Object.values(LOT_SORT_OPTIONS)])\n\n    useEffect(() => {\n        const templateFields = getAllTemplateFields(lotTemplates)\n\n        let tempLotSortOptions = [...Object.values(LOT_SORT_OPTIONS)]\n\n        templateFields.forEach((currTemplateField) => {\n\n            const {\n                dataType,\n                label\n            } = currTemplateField\n\n            if (dataType === FIELD_DATA_TYPES.DATE_RANGE) {\n                tempLotSortOptions.push({\n                    ...currTemplateField,\n                    label: `${label} (start)`,\n                    index: 0,\n                    fieldName: label\n                })\n                tempLotSortOptions.push({\n                    ...currTemplateField,\n                    label: `${label} (end)`,\n                    index: 1,\n                    fieldName: label\n                })\n            }\n            else {\n                tempLotSortOptions.push({\n                    ...currTemplateField,\n                    fieldName: label\n                })\n            }\n        })\n\n        setLotSortOptions(tempLotSortOptions)\n    }, [lotTemplates])\n\n    const themeContext = useContext(ThemeContext)\n\n    return (\n        <styled.ColumnContainer>\n            <styled.Description\n                css={props.descriptionCss}\n            >\n\n                Sort\n            </styled.Description>\n            <styled.ContentContainer>\n                <styled.ItemContainer\n                    style={{\n                        flexWrap: \"nowrap\"\n                    }}\n                >\n                    <styled.OptionContainer>\n                        <DropDownSearch\n                            valueCss={props.valueCss}\n                            options={lotSortOptions}\n                            onChange={(values) => {\n                                // set sort mode\n                                setSortMode(values[0])\n                            }}\n                            values={[sortMode]}\n                            labelField={\"label\"}\n                            valueField={\"label\"}\n                            schema={\"lots\"}\n                            style={{\n                                borderTopRightRadius: 0,\n                                borderBottomRightRadius: 0,\n                                minWidth: \"10rem\",\n                                maxWidth: \"15rem\",\n                                background: themeContext.bg.tertiary\n                            }}\n                        />\n                        <RotateButton\n                            schema={\"lots\"}\n                            state = {sortDirection.id}\n                            iconName1={'fas fa-arrow-up'}\n                            containerCss={styled.rotateButtonContainerCss}\n                            iconCss={styled.rotateButtonIconCss}\n                            onStateOne={() => {\n                                // set sort direction\n                                  setSortDirection(SORT_DIRECTIONS.ASCENDING)\n                            }}\n                            onStateTwo={() => {\n                                // set sort direction\n                                  setSortDirection(SORT_DIRECTIONS.DESCENDING)\n                            }}\n                        />\n                    </styled.OptionContainer>\n                </styled.ItemContainer>\n            </styled.ContentContainer>\n        </styled.ColumnContainer>\n    )\n}\n\nLotSortBar.propTypes = {\n    setSortMode: PropTypes.func,\n    sortMode: PropTypes.any,\n    setSortDirection: PropTypes.func,\n}\n\nLotSortBar.defaultProps = {\n    sortMode: {},\n    setSortMode: () => { },\n    setSortDirection: () => { }\n}\n\nexport default LotSortBar\n","import styled, { css } from \"styled-components\";\n\nexport const dropdownCss = css`\n\t//min-width: fit-content;\n  z-index: 5000;\n`\n\nexport const valueCss = css`\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  \n  overflow-x: auto;\n  @media (max-width: ${props => props.theme.widthBreakpoint.laptop}) {\n\tfont-size: ${props => props.theme.fontSize.sz4};\n  }\n\n  word-break: break-all;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nexport const BarsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-bottom: -1rem;\n  max-width: 100%;\n  flex-wrap: wrap;\n  \n  width: 100%;\n  // justify-content: center;\n`\n\nexport const columnCss = css`\n  //border: 1px solid black;\n  flex-direction: row;\n  align-items: center;\n  \n  \n  //max-width: 40%;\n  @media (max-width: ${props => props.theme.widthBreakpoint.laptop}) {\n    max-width: auto;\n    margin: .5rem 0;\n    align-self: stretch;\n  }\n\n  @media (min-width: ${props => props.theme.widthBreakpoint.laptop}) {\n    max-width: 40%;\n    margin: 0 .5rem;\n  }\n\n  \n`\n\nexport const columnCss3 = css`\n  //border: 1px solid black;\n  flex-direction: row;\n  align-items: center;\n  \n  \n  //max-width: 40%;\n  @media (max-width: ${props => props.theme.widthBreakpoint.laptop}) {\n    max-width: auto;\n    margin: .5rem 0;\n    align-self: stretch;\n  }\n\n  @media (min-width: ${props => props.theme.widthBreakpoint.laptop}) {\n    max-width: 30%;\n    margin: 0 .5rem;\n  }\n\n  \n`\n\nexport const containerCss = css`\n  //max-width: 30%;\n  overflow: hidden;\n  flex: 1;\n  //width: 0;\n  max-width: auto;\n  width: auto;\n  min-width: auto;\n`\n\n\n\nexport const reactDropdownSelectCss = css`\n  //max-width: 100%;\n  @media (max-width: ${props => props.theme.widthBreakpoint.laptop}) {\n    //max-width: 5rem;\n  }\n  \n  \n  \n`\n\nexport const descriptionCss = css`\n   color: black;\n  // margin: \"0 1rem 0 0\",\n\twhite-space: nowrap;\n\tmin-width: 6rem;\n\tmax-width: 6rem;\n`","import React, {useContext, useEffect, useRef, useState} from 'react'\n\n// components internal\nimport DropDownSearch from \"../../../../basic/drop_down_search_v2/drop_down_search\"\nimport Textbox from \"../../../../basic/textbox/textbox\"\nimport FlagButton from \"./flag_button/flag_button\"\nimport CalendarPlaceholder from \"../../../../basic/calendar_placeholder/calendar_placeholder\"\n\n// constants\nimport {\n    FIELD_DATA_TYPES, FLAG_OPTIONS,\n    LOT_FILTER_OPTIONS,\n} from \"../../../../../constants/lot_contants\"\nimport {BASIC_FIELD_DEFAULTS} from \"../../../../../constants/form_constants\"\n\n// functions external\nimport PropTypes from 'prop-types'\nimport {ThemeContext} from \"styled-components\"\nimport {useSelector} from \"react-redux\"\nimport { isMobile } from \"react-device-detect\"\n\n// utils\nimport {immutableDelete, immutableReplace, isArray, isNonEmptyArray} from \"../../../../../methods/utils/array_utils\"\nimport {getAllTemplateFields} from \"../../../../../methods/utils/lot_utils\"\n\n// styles\nimport * as styled from \"../zone_header/zone_header.style\"\nimport AdvancedCalendarPlaceholderButton\n    , {FILTER_DATE_OPTIONS} from \"../../../../basic/advanced_calendar_placeholder_button/advanced_calendar_placeholder_button\"\nimport {newPositionTemplate} from \"../../../../../constants/position_constants\";\n\nconst VALUE_MODES = {\n    TEXT_BOX: \"TEXT_BOX\",\n    DATE_RANGE: \"DATE_RANGE\",\n    SINGLE_DATE: \"SINGLE_DATE\",\n    FLAGS: \"FLAGS\"\n}\n\nconst LotFilterBarBasic = (props) => {\n\n    const {\n        setLotFilterValue,\n        lotFilterValue,\n        selectedFilterOption,\n        setSelectedFilterOption,\n        shouldFocusLotFilter,\n    } = props\n    // theme\n    const themeContext = useContext(ThemeContext)\n\n    // redux state\n    const lotTemplates = useSelector(state => {return state.lotTemplatesReducer.lotTemplates}) || {}\n\n    // component state\n    const [lotFilterOptions, setLotFilterOptions] = useState([...Object.values(LOT_FILTER_OPTIONS)])    // array of options for field to filter by\n    const [open, setOpen] = useState(true) // is filter options open ?\n    const [valueMode, setValueMode] = useState()      // used as var in switch statement to control what component to render for entering filter value (ex: use a textbox for strings, calendar picker for dates)\n\n    /*\n    * This effect is used to set valueMode based on the current selected filter option (name / date type)\n    * */\n    useEffect(() => {\n        const {\n            label,\n            dataType\n        } = selectedFilterOption || {}\n\n\n        // for flags, use flags mode\n        if(label === LOT_FILTER_OPTIONS.flags.label) {\n            setValueMode(VALUE_MODES.FLAGS)\n        }\n\n        // for date range, use date range mode\n        else if(dataType === FIELD_DATA_TYPES.DATE_RANGE) {\n            setValueMode((VALUE_MODES.DATE_RANGE))\n        }\n\n        // for date, use date mode\n        else if(dataType === FIELD_DATA_TYPES.DATE) {\n            setValueMode(VALUE_MODES.SINGLE_DATE)\n        }\n\n        // everything else, use a text box\n        else {\n          setValueMode(VALUE_MODES.TEXT_BOX)\n        }\n\n    }, [selectedFilterOption])\n\n    /*\n    * This effect is used to set the filter options\n    *\n    * This is dependent on lotTemplates, as the available fields may change when a template does\n    * */\n    useEffect(() => {\n        const templateFields = getAllTemplateFields()\n\n        let tempLotFilterOptions = [...Object.values(LOT_FILTER_OPTIONS)]\n\n        templateFields.forEach((currTemplateField) => {\n            const {\n                dataType,\n                label\n            } = currTemplateField\n\n            tempLotFilterOptions.push(currTemplateField)\n        })\n\n        setLotFilterOptions(tempLotFilterOptions)\n    }, [lotTemplates])\n\n\n\n    return (\n        <styled.ColumnContainer\n            open={open}\n            style={{\n                flex: (open && valueMode === VALUE_MODES.TEXT_BOX) && 1,\n                padding: open ? \".25rem 1rem 0 1rem\" : \"1rem\",\n                maxWidth: valueMode === VALUE_MODES.TEXT_BOX && \"30rem\"\n            }}\n        >\n            <styled.Description\n                css={props.descriptionCss}\n                onClick={()=>setOpen(!open)}\n            >\n                <styled.ExpandContractIcon\n                    className={open ? \"fas fa-chevron-down\" : \"fas fa-chevron-right\"}\n                    onClick={()=>setOpen(!open)}\n                />\n                Filter\n            </styled.Description>\n\n            {/* only show content when open */}\n            {open &&\n            <styled.ContentContainer>\n                <styled.ItemContainer>\n                    <styled.OptionContainer>\n                        <DropDownSearch\n                            // reactDropdownSelectCss={props.reactDropdownSelectCss}\n                            // dropdownCss={props.dropdownCss}\n                            // valueCss={props.valueCss}\n                            options={lotFilterOptions}\n                            onChange={(values) => {\n                                // *** selected new option ***\n                                const newFilterOption = values[0]\n\n                                // updated selectedFilterOption\n                                setSelectedFilterOption(newFilterOption)\n                                const {\n                                    dataType\n                                } = newFilterOption\n\n                                // update filter value to appropriate default based on dataType\n\n                                let newFilterValue = null // null is suitable for most, use as default\n                                switch(dataType) {\n                                    case FIELD_DATA_TYPES.DATE_RANGE:\n                                        newFilterValue = BASIC_FIELD_DEFAULTS.CALENDAR_FIELD_RANGE\n                                        break\n                                    case FIELD_DATA_TYPES.DATE:\n                                        newFilterValue = BASIC_FIELD_DEFAULTS.CALENDAR_FIELD\n                                        break\n                                }\n                                setLotFilterValue(newFilterValue)\n                            }}\n                            values={[selectedFilterOption]}\n                            labelField={\"label\"}\n                            valueField={\"label\"}\n                            schema={\"lots\"}\n                            style={{\n                                minWidth: \"12rem\",\n                                maxWidth: \"12rem\",\n                                overflow: 'visible',\n                                background: themeContext.bg.tertiary,\n                            }}\n                            containerStyle={{\n                                marginRight: \"1rem\",\n                            }}\n                        />\n                    </styled.OptionContainer>\n\n                    <styled.OptionContainer\n                    style={{flex:1}}>\n                        { // render different component for entering value depending on value type\n                            {\n                                [VALUE_MODES.FLAGS]:\n                                    <div\n                                        style={{flex: 3}}\n                                    >\n                                        <DropDownSearch\n                                            multi={true}\n                                            options={Object.values(FLAG_OPTIONS)}\n                                            onChange={(values) => {\n                                                setLotFilterValue(values)\n                                            }}\n                                            onRemoveItem={(values) => {\n                                                setLotFilterValue(values)\n                                            }}\n                                            onClearAll={() => {\n                                                setLotFilterValue([])\n                                            }}\n                                            labelField={\"id\"}\n                                            valueField={\"id\"}\n                                            schema={\"lots\"}\n                                            contentRenderer={({ props, state, methods }) => {\n\n                                                const {\n                                                    values = []\n                                                } = state || {}\n                                                const value = state.values[0]\n\n                                                return (\n                                                    <styled.FlagsContainer style={{minWidth: '4rem', paddingRight: '1rem'}}>\n                                                        {isArray(values) && values.map(currVal => {\n                                                            const {\n                                                                color: currColor,\n                                                                id: currColorId\n                                                            } = currVal || {}\n\n                                                            return (\n                                                                <styled.FlagButton\n                                                                    style={{\n                                                                        margin: \"0rem .1rem\",\n                                                                    }}\n                                                                    key={currColorId}\n                                                                    type={\"button\"}\n                                                                    color={currColor}\n                                                                    onClick={(event) => {\n                                                                        event.stopPropagation()\n                                                                        methods.dropDown('open')\n                                                                    }}\n                                                                    schema={props.schema}\n                                                                    className=\"fas fa-square\"\n                                                                />\n                                                            )\n                                                        })}\n\n                                                    </styled.FlagsContainer>\n                                                )\n                                            }}\n                                            itemRenderer={({ item, itemIndex, props, state, methods }) => {\n                                                const {\n                                                    color: currColor,\n                                                    id: currColorId\n                                                } = item\n\n                                                const isSelected = methods.isSelected(item)\n\n                                                return(\n                                                    <FlagButton\n                                                        style={{\n                                                            paddingTop: \".5rem\",\n                                                            paddingBottom: \".5rem\",\n                                                        }}\n                                                        selected={isSelected}\n                                                        key={currColorId}\n                                                        type={\"button\"}\n                                                        color={currColor}\n                                                        role=\"option\"\n                                                        tabIndex=\"-1\"\n                                                        onClick={item.disabled ? undefined : () => methods.addItem(item)}\n                                                        onKeyPress={item.disabled ? undefined : () => methods.addItem(item)}\n                                                        schema={props.schema}\n                                                        className={isSelected ? \"fas fa-check-square\" : \"fas fa-square\"}\n                                                    />\n                                                )\n                                            }}\n                                            style={{\n                                                minWidth: \"10rem\",\n                                                flex: 1,\n                                                background: themeContext.bg.tertiary,\n                                                alignSelf: \"stretch\",\n                                            }}\n                                        />\n                                    </div>,\n\n                                [VALUE_MODES.TEXT_BOX]:\n                                    <Textbox\n                                        placeholder='Filter lots...'\n                                        onChange={(e) => {\n                                            setLotFilterValue(e.target.value)\n                                        }}\n                                        focus={shouldFocusLotFilter}\n                                        inputStyle={{\n                                            height: \"100%\",\n                                            background: themeContext.bg.tertiary,\n                                        }}\n                                        style={{\n                                            alignSelf: \"stretch\",\n                                            flex: 1,\n                                            minWidth: \"5rem\",\n                                            maxWidth: \"12rem\"\n                                        }}\n                                        schema={\"lots\"}\n                                    />,\n                                [VALUE_MODES.DATE_RANGE]:\n                                    <CalendarPlaceholder\n                                        schema={\"lots\"}\n                                        PlaceholderButton={<AdvancedCalendarPlaceholderButton\n                                            filterValue={lotFilterValue}\n                                            onOptionClick={(index, option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t// this function toggles option in lotFilerValue at index\n\n                                                const {\n                                                    options: prevOptions = []\n                                                } = lotFilterValue[index] || {}\n\n                                                // spread current options\n                                                let newOptions = [...prevOptions]\n\n                                                // get index of new option (if it exists)\n                                                const optionIndex = prevOptions.indexOf(option)\n\n                                                // if it doesn't exist, add it\n                                                if(optionIndex === -1) {\n                                                    const equalsIndex = prevOptions.indexOf(FILTER_DATE_OPTIONS.EQUAL)\n                                                    if(equalsIndex !== -1) {\n                                                        /*\n                                                            if we are adding the \"greater than\" condition\n                                                                check if less than condition already exists\n                                                                remove it if it does, as having less than, equal to, and greater than would include everything, which is pointless\n                                                        */\n                                                        if(option === FILTER_DATE_OPTIONS.GREATER_THAN) {\n                                                            const lessThanIndex = prevOptions.indexOf(FILTER_DATE_OPTIONS.LESS_THAN)\n                                                            if(lessThanIndex !== -1) {\n                                                                newOptions = immutableDelete(newOptions, lessThanIndex)\n                                                            }\n                                                        }\n\n                                                        /*\n                                                            if we are adding the \"less than\" condition\n                                                                check if greater than condition already exists\n                                                                remove it if it does, as having less than, equal to, and greater than would include everything, which is pointless\n                                                         */\n                                                        else if(option === FILTER_DATE_OPTIONS.LESS_THAN) {\n                                                            const greaterThanIndex = prevOptions.indexOf(FILTER_DATE_OPTIONS.GREATER_THAN)\n                                                            if(greaterThanIndex !== -1) {\n                                                                newOptions = immutableDelete(newOptions, greaterThanIndex)\n                                                            }\n                                                        }\n                                                    }\n                                                    else {\n                                                        // if we are adding equals condition, and the current number of conditions is one less than the max, adding the equals will have all conditions, which does not filtering, so remove one\n                                                        if(prevOptions.length === Object.values(FILTER_DATE_OPTIONS).length - 1) {\n                                                            newOptions = immutableDelete(newOptions, 0)\n                                                        }\n                                                    }\n\n                                                    newOptions.push(option)\n                                                }\n                                                // if it does, remove it\n                                                else {\n                                                    newOptions = immutableDelete(newOptions, optionIndex)\n                                                }\n\n                                                // set filterValue with updated option\n                                                setLotFilterValue(immutableReplace(lotFilterValue, {\n                                                    ...lotFilterValue[index],\n                                                    options: newOptions\n                                                }, index))\n                                            }}\n                                        />}\n                                        minDate={isNonEmptyArray(lotFilterValue) ? lotFilterValue[0]?.value : null}\n                                        maxDate={isNonEmptyArray(lotFilterValue) ? lotFilterValue[1]?.value : null}\n                                        value={isNonEmptyArray(lotFilterValue) ? lotFilterValue.map((currValue) => currValue?.value) : BASIC_FIELD_DEFAULTS.CALENDAR_FIELD_RANGE}\n                                        containerStyle={{\n                                            background: \"transparent\",\n                                            padding: \"0\",\n                                            margin: 0,\n                                        }}\n                                        onChange={(val) => {\n                                            // this function updates lot filter value\n                                            setLotFilterValue(val.map((currItem, currIndex) => {\n                                                const prevValue = isNonEmptyArray(lotFilterValue) ? lotFilterValue[currIndex] : {} // previous value\n                                                return {\n                                                    options: [FILTER_DATE_OPTIONS.EQUAL],   // default to use EQUALS option\n                                                    ...prevValue,                           // spread previous attributes\n                                                    value: currItem,                        // update value\n                                                }\n                                            }))\n                                        }}\n                                        usable={true}\n                                        selectRange={true}\n                                    />,\n                                [VALUE_MODES.SINGLE_DATE]:\n                                    <CalendarPlaceholder\n                                        schema={\"lots\"}\n                                        PlaceholderButton={<AdvancedCalendarPlaceholderButton\n                                            filterValue={lotFilterValue}\n                                            onOptionClick={(index, option) => {\n                                                // this function toggles option in lotFilerValue (index ignored since its single value)\n                                                const {\n                                                    options: prevOptions = []\n                                                } = lotFilterValue || {}\n\n                                                // spread prev options\n                                                let newOptions = [...prevOptions]\n\n                                                // get index of option (if it exists)\n                                                const optionIndex = prevOptions.indexOf(option)\n\n                                                // if it doesn't exist, add it\n                                                if(optionIndex === -1) {\n                                                    const equalsIndex = prevOptions.indexOf(FILTER_DATE_OPTIONS.EQUAL)\n                                                    if(equalsIndex !== -1) {\n                                                        /*\n                                                            if we are adding the \"greater than\" condition\n                                                                check if less than condition already exists\n                                                                remove it if it does, as having less than, equal to, and greater than would include everything, which is pointless\n                                                        */\n                                                        if(option === FILTER_DATE_OPTIONS.GREATER_THAN) {\n                                                            const lessThanIndex = prevOptions.indexOf(FILTER_DATE_OPTIONS.LESS_THAN)\n                                                            if(lessThanIndex !== -1) {\n                                                                newOptions = immutableDelete(newOptions, lessThanIndex)\n                                                            }\n                                                        }\n\n                                                        /*\n                                                            if we are adding the \"less than\" condition\n                                                                check if greater than condition already exists\n                                                                remove it if it does, as having less than, equal to, and greater than would include everything, which is pointless\n                                                         */\n                                                        else if(option === FILTER_DATE_OPTIONS.LESS_THAN) {\n                                                            const greaterThanIndex = prevOptions.indexOf(FILTER_DATE_OPTIONS.GREATER_THAN)\n                                                            if(greaterThanIndex !== -1) {\n                                                                newOptions = immutableDelete(newOptions, greaterThanIndex)\n                                                            }\n                                                        }\n                                                    }\n                                                    else {\n                                                        // if we are adding equals condition, and the current number of conditions is one less than the max, adding the equals will have all conditions, which does not filtering, so remove one\n                                                        if(prevOptions.length === Object.values(FILTER_DATE_OPTIONS).length - 1) {\n                                                            newOptions = immutableDelete(newOptions, 0)\n                                                        }\n                                                    }\n\n                                                    newOptions.push(option)\n                                                }\n\n                                                // if it does exist, remove it\n                                                else {\n                                                    newOptions = immutableDelete(newOptions, optionIndex)\n                                                }\n\n                                                // update filter value with updated options\n                                                setLotFilterValue({\n                                                    ...lotFilterValue,\n                                                    options: newOptions\n                                                })\n                                            }}\n                                        />}\n                                        containerStyle={{\n                                            width: \"8rem\",\n                                            height: \"36px\",\n                                            boxShadow: \"0 0.1rem 0.2rem 0rem rgba(0,0,0,0.1)\",\n                                        }}\n                                        value={lotFilterValue?.value}\n                                        onChange={(val) => {\n                                            // update filer value\n                                            setLotFilterValue({\n                                                options: [FILTER_DATE_OPTIONS.EQUAL],   // by default, use EQUAL condition\n                                                ...lotFilterValue,                      // include previous attributes (also prevents overwriting conditions with the equal that was just added if conditions have already been set)\n                                                value: val,                             // set the actual value\n                                            })\n                                        }}\n                                        usable={true}\n                                    />\n                            }[valueMode] ||\n                            null\n                        }\n                    </styled.OptionContainer>\n                </styled.ItemContainer>\n            </styled.ContentContainer>\n            }\n        </styled.ColumnContainer>\n    )\n}\n\nLotFilterBarBasic.propTypes = {\n    setLotFilterValue: PropTypes.func,\n    lotFilterValue: PropTypes.any,\n    selectedFilterOption: PropTypes.object,\n    setSelectedFilterOption: PropTypes.func,\n    shouldFocusLotFilter: PropTypes.bool,\n}\n\nLotFilterBarBasic.defaultProps = {\n    setLotFilterValue: () => {},\n    lotFilterValue: null,\n    selectedFilterOption: () => {},\n    setSelectedFilterOption: () => {},\n    shouldFocusLotFilter: false,\n}\n\nexport default LotFilterBarBasic\n"],"sourceRoot":""}