{"version":3,"sources":["containers/map_view/map_view.style.js","components/map/locations/cart_waypoint/cart_waypoint.style.js","components/map/locations/cart_waypoint/cart_waypoint.js","components/map/locations/station/station.style.js","methods/utils/widget_utils.js","components/map/locations/location_svg/location_svg.style.js","components/map/locations/location_svg/location_svg.js","components/map/locations/drag_entity_proto.js","components/map/locations/station/station.js","components/map/locations/position/position.js","components/map/heatmap/heatspot/heatspot.js","components/map/heatmap/heatmap.js","components/map/ratsnest/ratsnest_path.js","components/map/ratsnest/ratsnest.js","containers/map_view/map_view.js","redux/actions/sidebar_actions.js","constants/position_constants.js","constants/station_constants.js","redux/actions/widget_actions.js"],"names":["MapContainer","styled","div","props","isBlank","theme","bg","quaternary","MapGroup","g","MapImage","img","tall","Container","yPosition","xPosition","WaypointIcon","i","CartWaypoint","d3","x","y","useDispatch","className","style","color","handleRenderWaypoints","foreignObject","width","h1","handleWidgetHoverCoord","location","rd3tClassName","widgetInfo","id","_id","heightWidth","scale","realScale","WorkstationGroup","TranslateGroup","LocationSvg","isSelected","hoveringInfo","hovering","rotating","shouldGlow","handleMouseEnter","handleMouseLeave","handleMouseDown","handleTranslating","schema","handleRotating","locationTypes","StationTypes","PositionTypes","settings","useSelector","state","settingsReducer","useState","colour","setColour","useEffect","fill","stroke","onMouseEnter","LightenDarkenColor","onMouseDown","onMouseLeave","transform","rotation","imgResolution","mapApps","labels","fontSize","dominantBaseline","textAnchor","name","stdDeviation","result","in","height","operator","radius","floodColor","in2","onMouseUp","type","viewBox","filter","svgPath","defaultProps","DragEntityProto","handleRotate","handleTranslate","handleDisableDrag","handleEnableDrag","handleTranslateEnd","setRotating","translating","setTranslating","isBinded","setBinded","bindDragListener","unbindDragListener","rotateStart","originalRotation","deltaRotation","translateStart","originalTranslation","deltaTranslation","ringElement","rectElement","call","drag","on","d","event","element","angle","sourceEvent","Math","atan2","clientY","clientX","PI","touches","abs","round","rotate","translation","translate","a","length","Station","station","mouseDown","setHovering","selectedStation","stationsReducer","editingProcess","editingStation","processesReducer","selectedPosition","positionsReducer","selectedTask","tasksReducer","selectedProcess","widgetReducer","hoverStationInfo","dispatch","tasks","fixingProcess","positions","dispatchHoverStationInfo","info","dispatchSetStationAttributes","attr","setStationAttributes","dispatchSetSelectedTask","task","setSelectedTask","dispatchSetTaskAttributes","load","setTaskAttributes","disabled","children","includes","highlight","unload","params","useParams","window","addEventListener","onSetListener","removeEventListener","undefined","stationID","widgetPage","handleWidgetHover","Fragment","temp","editing","setSelectedStation","dispatchSetSelectedStation","newRoute","generateDefaultRoute","onSetStationTask","pageDataChanged","bool","pos","convertD3ToReal","pos_x","pos_y","Position","position","positionId","dispatchSetSelectedPosition","setSelectedPosition","dispatchSetPositionAttributes","setPositionAttributes","hoverLocationID","stations","selectedStationChildrenCopy","routeStart","getRouteStart","routeEnd","getRouteEnd","parent","routeBeforeBreak","routes","broken","isPositionAtUnloadStation","routeAfterBreak","isPositionInRoutes","isPositionAtLoadStation","insertIndex","routeIndex","getRouteIndexInRoutes","map","currProcess","immutableDelete","previousRoute","getPreviousRoute","previousRouteEnd","loadPositionId","getLoadPositionId","loadStationId","getLoadStationId","firstRoute","nextRoute","x1","y1","x2","y2","strokeWidth","shapeRendering","opacity","renderParentLine","deepCopy","onSetPositionTask","HeatSpot","wipRatio","d3Scale","spotSize","min","max","isNaN","cx","cy","r","HeatMap","map_id","stationWIPRatios","setStationWIPRatios","cards","cardsReducer","editingPosition","Object","values","processes","WIPBuildupRatios","forEach","process","pStationId","processStations","getProcessStationsSorted","totalProcessWIP","stationWIP","stationsWithWip","card","process_id","reduce","accumWIP","getBinQuantity","WIPRatio","meanProcessWIP","offset","stopColor","stopOpacity","RatsnestPaths","route","unloadPositionId","getUnloadPositionId","startPos","endPos","strokeLinecap","RatsNest","mapProcesses","TaskPaths","log","getLogger","lazy","ProcessPaths","MiR100","RightClickMenu","Widgets","MapApps","MapView","checkForMapLoad","currentMap","maps","find","localSettings","currentMapId","setState","updatedSettings","dispatchPostLocalSettings","refreshMap","dispatchGetMap","guid","openLocation","path","dragNewEntity","e","draggingChild","validateNewEntity","newChildEntity","bindZoomListener","scaleExtent","resolution","svg","rd3tSvgClassName","rd3tMapClassName","zoom","lastEvent","devices","convertRealToD3","updatedSelectedStation","dispatchUpdateStations","updatedSelectedPosition","updatedChildrenPositions","dispatchUpdatePositions","device","device_model","dispatchUpdateDevices","initialRender","unbindZoomListener","onDisableDrag","draggable","onEnableDrag","onWidgetDisableDrag","widgetDraggable","onWidgetEnableDrag","calculateD3Geometry","locations","mapContainer","mapImage","cHeight","getBoundingClientRect","cWidth","iHeight","iWidth","iNatHeight","naturalImageDimensions","iNatWidth","mapResolution","actualDims","naturalDims","handleRightClickMenu","preventDefault","showRightClickMenu","mobileMode","onClick","hasStartAndEnd","rd3tLocClassName","rd3tStationClassName","rd3tPosClassName","naturalScale","boundingClientHeight","heigh","this","passive","prevProps","prevState","getHasStartAndEnd","getIsEquivalent","match","document","validateNewLocation","capture","deviceEnabled","onMouseMove","ref","mc","touchAction","pointerEvents","fallback","keys","coords","buttonClicked","onContextMenu","widgetLoaded","onMouseOver","mi","src","onLoad","naturalHeight","naturalWidth","selectedHoveringTask","heatmap","ratsnest","ind","connected","current_task_queue_id","taskQueue","custom_task","coordinate","Component","zoomable","withRouter","connect","mapReducer","localReducer","devicesReducer","taskQueueReducer","showRouteConfirmation","editingTask","getMap","dispatchSetCurrentMap","setCurrentMap","dispatchPostSettings","postSettings","postLocalSettings","updateStations","childrenPositions","updatePositions","deviceActions","dispatchPostPosition","postPosition","dispatchWidgetLoaded","setMode","mode","SET_MODE","payload","setWidth","SET_WIDTH","setOpen","SET_OPEN","PAGE_DATA_CHANGED","setConfirmDelete","show","callback","SET_CONFIRM_DELETE","showLotScanModal","SHOW_LOT_SCAN_MODAL","positionColor","shelf_position","rx","strokeMiterlimit","attributes","new","charger_position","cart_position","temporary_cart_position","newPositionTemplate","uuid","v4","stationColor","main","solid","warehouse","version","xmlns","dashboards","human","widgetPageLoaded","WIDGET_PAGE_LOADED","WIDGET_LOADED","HOVER_STATION_INFO"],"mappings":"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","file":"static/js/34.a7055c31.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const MapContainer = styled.div`\n    height: 100%;\n    width: 100%;\n    flex: 1;\n    background: ${props => props.isBlank ? '#F9FBFC' : props.theme.bg.quaternary};\n    user-select: none;\n\n    // cursor: move; /* fallback if grab cursor is unsupported */\n    // cursor: -webkit-move;\n    // cursor: -moz-move;\n\n    cursor: url(https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur), grab;\n\n    &:active {\n        cursor: grabbing;\n        cursor: -moz-grabbing;\n        cursor: -webkit-grabbing;\n    }\n\n    background-size: cover;\n    overflow: visible;\n`\n\nexport const MapGroup = styled.g`\n`\n\nexport const MapImage = styled.img`\n    height: 100%;\n    width: auto;\n\n    ccursor: move; /* fallback if grab cursor is unsupported */\n    cursor: -webkit-move;\n    cursor: -moz-move;\n\n    // ${props => props.tall && `\n    //     height: auto;\n    //     width: 100%;\n    // `}\n    \n`","import styled from 'styled-components'\n\n\nexport const Container = styled.div`\n    position: absolute;\n    display: flex;\n\n    flex-direction: column;\n    align-items: center;\n\n    top: ${props => props.yPosition};\n    left: ${props => props.xPosition};\n\n    padding: .1rem;\n    background-color: transparent;\n    opacity: 100%;\n\n`\n\nexport const WaypointIcon = styled.i`\n\n    font-size: 1.3rem;\n    color: lightgreen;\n\n`\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useLocation } from \"react-router-dom\";\n\n// Import Styles\nimport * as styled from './cart_waypoint.style'\n\nconst CartWaypoint = (props) => {\n\n    const {\n        d3,\n        x,\n        y,\n    } = props\n    const dispatch = useDispatch()\n\n    const handleRenderWaypoints = () => {\n\n        const xPosition = (x-10) + 'px'\n        const yPosition = (y-20) + 'px'\n\n          return (\n              <styled.Container xPosition={xPosition} yPosition={yPosition}>\n                <styled.WaypointIcon\n                    className='fas fa-map-marker-alt'\n                    style={{ color: '#ffb62e' }}\n                />\n              </styled.Container>\n          )\n  }\n\n    return (\n      handleRenderWaypoints()\n    )\n}\n\nexport default CartWaypoint\n","import styled from 'styled-components'\n\n\nexport const WidgetForeignObject = styled.foreignObject`\n    transition: ${props => props.width === '100%' ? 'all 0.25s ease' : 'none'};\n    overflow: visible;\n    z-index: 1;\n`\n\nexport const WidgetHoverArea = styled.div`\n    margin-top: -12.7rem;\n    width: 30rem;\n    height: 10rem;\n    z-index: 5000;\n`\n\nexport const WorkstationGroup = styled.g`\n    stroke-width: 0;\n    opacity: 0.8;\n`\n\nexport const StationLabel = styled.h1`\n    color: red;\n    position: relative;\n`\n","/**\n * All of these coordinates have been calc by adjusting them on map with chrome dev tools\n * @param {*} location\n * @param {*} rd3tClassName\n * @param {*} d3\n */\n\nexport const handleWidgetHoverCoord = (location, rd3tClassName, d3) => {\n    let widgetInfo = {}\n    widgetInfo.id = location._id\n\n    widgetInfo.heightWidth = '1'\n\n    // Initial Ratios\n    widgetInfo.yPosition = location.y\n    widgetInfo.xPosition = location.x\n    // widgetInfo.scale = Math.min(Math.max(d3.scale, 0.8), 1.3);\n    widgetInfo.scale = d3.scale\n\n    // Sets real scale to be used with the widget hover area\n    widgetInfo.realScale = d3.scale\n\n    return widgetInfo\n\n}\n","import styled from 'styled-components'\n\nexport const WorkstationGroup = styled.g`\n    stroke-width: 0;\n    opacity: 0.8;\n`\n\nexport const TranslateGroup = styled.g`\n    cursor: url(https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur), grab;\n\n    &:active {\n        cursor: grabbing;\n        cursor: -moz-grabbing;\n        cursor: -webkit-grabbing;\n    }\n`\n","import React, {useState, useEffect} from 'react'\nimport { useSelector } from 'react-redux';\n\nimport * as styled from './location_svg.style'\n\n// Import Constants\nimport { StationTypes } from '../../../../constants/station_constants'\nimport { PositionTypes } from '../../../../constants/position_constants'\nimport PropTypes from \"prop-types\";\nimport { LightenDarkenColor } from '../../../../methods/utils/color_utils'\n\nconst LocationSvg = (props) => {\n\n    const {\n        location,\n        rd3tClassName,\n        color,\n        d3,\n        isSelected,\n        hovering,\n        rotating,\n        hoveringInfo,\n        shouldGlow,\n\n        handleMouseEnter,\n        handleMouseLeave,\n        handleMouseDown,\n        handleTranslating,\n        handleRotating,\n\n\n    } = props\n\n    const schema = location.schema\n    const locationTypes = {\n        ...StationTypes,\n        ...PositionTypes\n    }\n\n    const settings = useSelector(state => state.settingsReducer.settings)\n    const [colour, setColour] = useState(color)\n    const ellipsis = (text) => {\n\n    }\n    useEffect(() => {\n      setColour(color)\n\n    }, [color])\n    return (\n        <styled.WorkstationGroup\n            id={rd3tClassName}\n            className={rd3tClassName}\n            style={{ fill: colour, stroke: colour }}\n            onMouseEnter={() => {\n                handleMouseEnter()\n                if(!!isSelected) setColour(LightenDarkenColor('#5c6fff', -50))\n            }}\n            onMouseDown={() => {\n                handleMouseDown()\n            }}\n            onMouseLeave={() => {\n                handleMouseLeave()\n                setColour(color)\n            }}\n            transform={`translate(${location.x},${location.y}) rotate(${-location.rotation}) scale(${d3.scale / d3.imgResolution})`}\n        >\n            {((settings.mapApps.labels || isSelected) && hoveringInfo?.id !== location?._id) && \n                <text y={-16} fontSize=\"0.7em\" dominantBaseline=\"middle\" textAnchor=\"middle\">{location.name}</text>\n\n            }\n            <defs>\n\n                {/* a transparent glow that takes on the colour of the object it's applied to */}\n                <filter id=\"glow\">\n                    <feGaussianBlur stdDeviation=\"1\" result=\"coloredBlur\" />\n                    <feMerge>\n                        <feMergeNode in=\"coloredBlur\" />\n                        <feMergeNode in=\"SourceGraphic\" />\n                    </feMerge>\n                </filter>\n\n                <filter id=\"glow2\" height=\"300%\" width=\"300%\" x=\"-75%\" y=\"-75%\">\n                    <feMorphology operator=\"dilate\" radius=\"1\" in=\"SourceAlpha\" result=\"thicken\" />\n                    <feGaussianBlur in=\"thicken\" stdDeviation=\"2\" result=\"blurred\" />\n                    <feFlood floodColor={color} result=\"glowColor\" />\n                    <feComposite in=\"glowColor\" in2=\"blurred\" operator=\"in\" result=\"softGlow_colored\" />\n                    <feMerge>\n                        <feMergeNode in=\"softGlow_colored\" />\n                        <feMergeNode in=\"SourceGraphic\" />\n                    </feMerge>\n                </filter>\n\n            </defs>\n\n        {/*   <g\n                className={`${rd3tClassName}-rot`}\n                onMouseLeave={() => {\n                    handleMouseLeave()\n                }}\n\n            >\n                <circle x=\"-20\" y=\"-20\" r=\"20\" strokeWidth=\"0\" fill=\"transparent\" style={{ cursor: rotating ? \"pointer\" : \"grab\" }}\n                />\n                {isSelected && (hovering || rotating) && hoveringInfo === null &&\n                    <>\n                        <circle x=\"-20\" y=\"-20\" r=\"18\" fill=\"none\" strokeWidth=\"4\" stroke=\"transparent\" style={{ cursor: \"pointer\" }}\n                            onMouseDown={() => handleRotating(true)}\n                            onMouseUp={() => handleRotating(false)}\n\n                        />\n                        <circle x=\"-18\" y=\"-18\" r=\"18\" fill=\"none\" strokeWidth=\"0.8\" style={{ filter: \"url(#glow)\", cursor: \"pointer\" }}\n                        />\n                    </>\n                }\n            </g>\n            */}\n\n            <styled.TranslateGroup\n                className={`${rd3tClassName}-trans`}\n                onMouseEnter={() => {\n                    handleMouseEnter()\n                }}\n                onMouseDown={() => handleTranslating(true)}\n                onMouseUp={() => handleTranslating(false)}\n                // Devices and shelf positions require their own transforms\n                transform={location.type === 'device' ? 'scale(.07) translate(-180,-140)' : location.type === 'shelf_position' ? 'rotate(90)' : ''}\n            >\n\n                <svg id={`${rd3tClassName}-${schema}`} x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" viewBox=\"0 0 400 400\" style={{ filter: shouldGlow ? 'url(#glow2)' : 'none' }}>\n                    {locationTypes[location.type].svgPath}\n                </svg>\n\n\n            </styled.TranslateGroup>\n\n\n        </styled.WorkstationGroup>\n    )\n}\n\nLocationSvg.propTypes = {\n    handleMouseEnter: PropTypes.func,\n    handleMouseLeave: PropTypes.func,\n    handleMouseDown: PropTypes.func,\n    handleTranslating: PropTypes.func,\n    handleRotating: PropTypes.func,\n}\n\nLocationSvg.defaultProps = {\n    handleMouseEnter: () => {},\n    handleMouseLeave: () => {},\n    handleMouseDown: () => {},\n    handleTranslating: () => {},\n    handleRotating: () => {},\n}\n\nexport default LocationSvg\n","import { useState, useEffect } from 'react'\nimport * as d3 from 'd3'\n\n\nconst DragEntityProto = (props) => {\n    const {\n        isSelected,\n        location,\n        handleRotate,\n        handleTranslate,\n        handleDisableDrag,\n        handleEnableDrag,\n        handleTranslateEnd,\n        rd3tClassName,\n        // d3\n    } = props\n\n    // console.log(location.name, isSelected)\n\n    const [rotating, setRotating] = useState(false)\n    const [translating, setTranslating] = useState(false)\n\n    const [isBinded, setBinded] = useState(false)\n\n    useEffect(() => {\n        if (isSelected) {\n            !isBinded && bindDragListener()\n        } else {\n            isBinded && unbindDragListener()\n        }\n    }, [isSelected])\n\n    let rotateStart = null          // Inital rotation angle\n    let originalRotation = null     // Original rotation of location\n    let deltaRotation = null        // Change in rotation (current angle - start angle)\n\n    let translateStart = null       // Initial coordinates of translate\n    let originalTranslation = []    // Original coordinates of location\n    let deltaTranslation = []       // Change in coordinates (over course of the drag event)\n\n    /** Callback on continuous rotate event */\n    const rotate = (event, element) => {\n\n        // Cant rotate if this location is not selected\n        if (!isSelected) { return }\n        if (!rotating) { setRotating(true) }\n\n        // The angle is calculated between the current cursor location and the center of the location\n        // NOTE: Im not sure why the 160 offset is neccessary. I think it might have to do with the way the menu/status bar\n        // is layered.\n        let angle\n        if (event.sourceEvent.type === \"mousemove\") {    // Computer\n            angle = Math.atan2(event.sourceEvent.clientY - location.y, event.sourceEvent.clientX - location.x) * 180 / Math.PI\n        } else if (event.sourceEvent.type === \"touchmove\") { // Tablet\n            angle = Math.atan2(event.sourceEvent.touches[0].clientY - location.y, event.sourceEvent.touches[0].clientX - location.x) * 180 / Math.PI\n        }\n\n        // Keep track of BOTH the initial rotation of the position, and the start angle of the drag\n        if (rotateStart == null) {\n            originalRotation = location.rotation\n            rotateStart = angle\n        }\n        // The delta is the current angle - the start angle (round to nearest 5th degree or nearest 45 degree)\n        deltaRotation = angle - rotateStart\n        if (Math.abs(deltaRotation % 45) < 5) {\n            deltaRotation = Math.round(deltaRotation / 45) * 45\n        } else {\n            deltaRotation = Math.round(deltaRotation / 10) * 10\n        }\n\n\n        // Final Rotation\n        let rotation = originalRotation - deltaRotation\n        // If rotation goes negative, then add 360 to the number to get irs positive variant\n        if(rotation < 0){\n            rotation = rotation + 360\n        }\n        \n        // Callback passed from props to set the appropriate location atttribute\n        handleRotate(rotation)\n    }\n\n    const rotateEnd = () => {\n        // Effectivly clears the rotate event\n        rotateStart = null\n    }\n\n    const translate = (event, element) => {\n\n        // Cant move location if the location isnt selected\n        if (!isSelected) { return }\n        if (!translating) { setTranslating(true) }\n\n        // Set the translation based on the event\n        let translation = []\n        if (event.sourceEvent.type === \"mousemove\") {    // Computer\n            translation = [event.sourceEvent.clientX, event.sourceEvent.clientY]\n        } else if (event.sourceEvent.type === \"touchmove\") { // Tablet\n            translation = [event.sourceEvent.touches[0].clientX, event.sourceEvent.touches[0].clientY]\n        }\n\n        // Keep track of the initial positon coords and the start coords of the event\n        if (translateStart == null) {\n            translateStart = translation\n            originalTranslation = [location.x, location.y]\n        }\n        // Calculate the change in translation relative to the start coordinates (round to nearest 5th pixel)\n        deltaTranslation[0] = Math.round((translation[0] - translateStart[0]) / 5) * 5\n        deltaTranslation[1] = Math.round((translation[1] - translateStart[1]) / 5) * 5\n\n        // Callback to set the appropriate location attributes\n        handleTranslate({ x: originalTranslation[0] + deltaTranslation[0], y: originalTranslation[1] + deltaTranslation[1] })\n    }\n\n    const translateEnd = () => {\n        translateStart = null\n    }\n\n    /* translateStart = nullconvertRealToD3\n     * Bind the listener that will listen for events that are made directly to this element\n     */\n    const bindDragListener = () => {\n\n        const mainElement = d3.select(`.${rd3tClassName}`)\n        const ringElement = d3.select(`.${rd3tClassName}-rot`)\n        const rectElement = d3.select(`.${rd3tClassName}-trans`)\n\n        // Define drag callbacks for dragging the ring (which rotates the location)\n        ringElement.call(\n            d3.behavior.drag()\n                .on(\"dragstart\", () => {\n                    if (isSelected) {\n                        handleDisableDrag()\n                    }\n                })\n                .on(\"drag\", function (d, i) {\n                    if (isSelected) {\n                        rotate(d3.event, mainElement)\n                    }\n                })\n                .on(\"dragend\", () => {\n                    if (isSelected) {\n                        rotateEnd()\n                        handleEnableDrag()\n                        setRotating(false)\n                    }\n                })\n        )\n\n        // Define drag callbacks for the element itself (which translates location)\n        rectElement.call(\n            d3.behavior.drag()\n                .on(\"dragstart\", () => {\n                    originalTranslation = [location.x, location.y]\n                    if (isSelected) {\n                        handleDisableDrag()\n                    }\n                })\n                .on(\"drag\", function (d, i) {\n                    if (isSelected) {\n                        translate(d3.event, mainElement)\n                    }\n                })\n                .on(\"dragend\", async () => {\n                    if (isSelected) {\n                        if (deltaTranslation.length === 2) {\n                            handleTranslateEnd({ x: originalTranslation[0] + deltaTranslation[0], y: originalTranslation[1] + deltaTranslation[1] })\n                            translateEnd()\n                        }\n                        handleEnableDrag()\n                        setTranslating(false)\n                    }\n                })\n        )\n\n        setBinded(true)\n    }\n\n    const unbindDragListener = () => {\n\n        const mainElement = d3.select(`.${rd3tClassName}`)\n        const ringElement = d3.select(`.${rd3tClassName}-rot`)\n        const rectElement = d3.select(`.${rd3tClassName}-trans`)\n\n        // Define drag callbacks for dragging the ring (which rotates the location)\n        ringElement.call(\n            d3.behavior.drag()\n                .on(\"dragstart\", () => {})\n                .on(\"drag\", () => {})\n                .on(\"dragend\", () => {})\n        )\n\n        // Define drag callbacks for the element itself (which translates location)\n        rectElement.call(\n            d3.behavior.drag()\n                .on(\"dragstart\", () => {})\n                .on(\"drag\", () => {})\n                .on(\"dragend\", async () => {})\n        )\n\n        setBinded(false)\n    }\n\n    return (null)\n}\n\nexport default DragEntityProto","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n\nimport * as styled from \"./station.style\";\n\n// Import actions\nimport { hoverStationInfo } from \"../../../../redux/actions/widget_actions\";\nimport {\n    setSelectedStation,\n    setStationAttributes,\n} from \"../../../../redux/actions/stations_actions\";\nimport {\n    setSelectedTask,\n    setTaskAttributes,\n} from \"../../../../redux/actions/tasks_actions\";\nimport { pageDataChanged } from \"../../../../redux/actions/sidebar_actions\";\n\n// Import Utils\nimport { handleWidgetHoverCoord } from \"../../../../methods/utils/widget_utils\";\nimport { convertD3ToReal } from \"../../../../methods/utils/map_utils\";\nimport { editing } from \"../../../../methods/utils/locations_utils\";\n\n// Import Constants\nimport { StationTypes } from \"../../../../constants/station_constants\";\n\n// Import Components\nimport LocationSvg from \"../location_svg/location_svg\";\nimport DragEntityProto from \"../drag_entity_proto\";\nimport {\n    generateDefaultRoute,\n} from \"../../../../methods/utils/route_utils\";\n\nfunction Station(props) {\n    const {\n        station,\n        rd3tClassName,\n        d3,\n        handleEnableDrag,\n        handleDisableDrag,\n        mouseDown,\n        // isSelected,\n    } = props;\n\n    const [hovering, setHovering] = useState(false);\n    const [rotating, setRotating] = useState(false);\n    const [translating, setTranslating] = useState(false);\n\n    const selectedStation = useSelector(\n        (state) => state.stationsReducer.selectedStation\n    );\n    const editingStation = useSelector(\n        (state) => state.stationsReducer.editingStation\n    );\n    const editingProcess = useSelector(\n        (state) => state.processesReducer.editingProcess\n    );\n    const selectedPosition = useSelector(\n        (state) => state.positionsReducer.selectedPosition\n    );\n    const selectedTask = useSelector(\n        (state) => state.tasksReducer.selectedTask\n    );\n    const selectedProcess = useSelector(\n        (state) => state.processesReducer.selectedProcess\n    );\n    const hoveringInfo = useSelector(\n        (state) => state.widgetReducer.hoverStationInfo\n    );\n    const tasks = useSelector((state) => state.tasksReducer.tasks);\n    const fixingProcess = useSelector(\n        (state) => state.processesReducer.fixingProcess\n    );\n    const positions = useSelector((state) => state.positionsReducer.positions);\n\n    const dispatch = useDispatch();\n    const dispatchHoverStationInfo = (info) => dispatch(hoverStationInfo(info));\n    const dispatchSetSelectedStation = (station) =>\n        dispatch(setSelectedStation(station));\n    const dispatchSetStationAttributes = (id, attr) =>\n        dispatch(setStationAttributes(id, attr));\n    const dispatchSetSelectedTask = async (task) =>\n        await dispatch(setSelectedTask(task));\n    const dispatchSetTaskAttributes = (id, load) =>\n        dispatch(setTaskAttributes(id, load));\n    const dispatchPageDataChanged = (bool) => dispatch(pageDataChanged(true));\n\n    // ======================================== //\n    //                                          //\n    //        Station Characteristics           //\n    //                                          //\n    // ======================================== //\n\n    const isSelected = !!selectedStation && selectedStation._id === station._id\n\n    let disabled = false;\n    if (!!selectedTask && !!selectedProcess) {\n    } else {\n        // Disable if the selected station is not this station\n        if (!!selectedStation && selectedStation._id !== station._id)\n            disabled = true;\n        // Disable if theres a selected position and the station's children dont contain that position\n        else if (\n            !!selectedPosition &&\n            !station.children.includes(selectedPosition._id)\n        )\n            disabled = true;\n    }\n\n    const shouldGlow = false;\n\n    let highlight = false;\n    // Set selected to true if the selected task inculdes the station\n    if (\n        !!selectedTask &&\n        (selectedTask?.load === station._id ||\n            selectedTask?.unload === station._id)\n    )\n        highlight = true;\n\n    // Set Color\n    let color = StationTypes[station.type].color;\n    if (!isSelected && disabled) color = \"#afb5c9\";\n    // Grey\n    else if (highlight) color = \"#38eb87\"; // Green\n\n    // ======================================== //\n    //                                          //\n    //            Station Functions             //\n    //                                          //\n    // ======================================== //\n\n    // Used to see if a widget Page is opened\n    let params = useParams();\n    useEffect(() => {\n        window.addEventListener(\"mouseup\", onSetListener);\n        return () => {\n            window.removeEventListener(\"mouseup\", onSetListener);\n        };\n    }, []);\n\n    const onSetListener = () => {\n        setRotating(false);\n        setTranslating(false);\n    };\n\n    /**\n     * This runs on page load (thats mean station are mounted) and shows a widget page if it returns true.\n     * If there is a station ID in the params (URL) and it matches this station,\n     * and the URL (params) container a widget page then the widget page should be showing\n     */\n    useEffect(() => {\n        if (\n            params.stationID !== undefined &&\n            params.stationID === props.station._id &&\n            !!params.widgetPage\n        ) {\n            dispatchHoverStationInfo(handleWidgetHover());\n        }\n    }, []);\n\n    /**\n     * Passes the X, Y, scale and ID of station to redux which is then used in widgets\n     */\n    const handleWidgetHover = () => {\n        return handleWidgetHoverCoord(station, rd3tClassName, d3);\n    };\n\n    // Handles if URL has widget page open\n    const onWidgetPageOpen = () => {\n        // If widget page is open, hovering is false and the open widget page stations id matches the station ID, set it to true so\n        // that the widget page doesn't disappear when mouse goes out of page\n        if (\n            !!params.widgetPage &&\n            !hovering &&\n            params.stationID === station._id\n        ) {\n            setHovering(true);\n            dispatchHoverStationInfo(handleWidgetHover());\n        }\n\n        // If hovering is true but there's no hoverInfo in the reducer (see widgets for when hoverInfo is set to null), set hovering to false\n        else if (!isSelected && hovering && hoveringInfo === null) {\n            setHovering(false);\n        }\n    };\n\n    /**\n     * This handles when a station is selected for a task\n     * Can only add a station to a task if the station is a warehouse or a human\n     *\n     * For a warehouse, the thing to remember is that you push to a warehouse and pull from a warehouse\n     */\n    const onSetStationTask = () => {\n        if (!!selectedTask) {\n            if (\n                selectedTask?.load !== null &&\n                selectedTask?.unload === null &&\n                selectedTask.load !== station._id\n            ) {\n                // If it's a warehouse and the load station has been selected, then the task type has to be a push\n                // You can only push to a ware house\n                let type = station.type === \"warehouse\" ? \"push\" : \"push\";\n\n                dispatchSetTaskAttributes(selectedTask._id, {\n                    unload: station._id,\n                    type,\n                });\n            } else {\n                // If it's a warehouse and the load position has not been selected then the task type is a pull\n                // You can only pull from a ware house\n                let type = station.type === \"warehouse\" ? \"pull\" : \"push\";\n\n                dispatchSetTaskAttributes(selectedTask._id, {\n                    load: station._id,\n                    unload: null,\n                    type,\n                });\n            }\n        } else if (!!selectedProcess) {\n            let newRoute = generateDefaultRoute(selectedProcess._id);\n            newRoute.type = station.type === \"warehouse\" ? \"push\" : \"push\";\n            newRoute.load = station._id;\n            newRoute.unload = null;\n\n            dispatchSetSelectedTask(newRoute);\n        }\n    };\n\n    const onMouseEnter = () => {\n        // Only allow hovering if there is no selected task and mouse is not down on the map\n        if (\n            !hoveringInfo &&\n            selectedTask === null &&\n            !station.temp &&\n            !mouseDown &&\n            !editingProcess\n        ) {\n            setHovering(true);\n\n            if (\n                !editing() &&\n                !rotating &&\n                !translating &&\n                !selectedStation &&\n                !selectedTask &&\n                !selectedProcess\n            ) {\n                dispatchHoverStationInfo(handleWidgetHover());\n                dispatchSetSelectedStation(station);\n            }\n        }\n    };\n\n    const onMouseDown = () => {\n        if (!disabled) onSetStationTask();\n        dispatchPageDataChanged(true);\n    };\n\n    const onTranslating = (bool) => {\n        setTranslating(bool);\n    };\n\n    const onRotating = (bool) => {\n        setRotating(bool);\n    };\n\n    const onMouseLeave = () => {\n        setHovering(false);\n    };\n\n    return (\n        <React.Fragment key={`frag-loc-${station._id}`}>\n            <LocationSvg\n                location={station}\n                rd3tClassName={rd3tClassName}\n                color={color}\n                d3={d3}\n                isSelected={isSelected}\n                hovering={hovering}\n                rotating={rotating}\n                hoveringInfo={hoveringInfo}\n                shouldGlow={shouldGlow}\n                handleMouseEnter={onMouseEnter}\n                handleMouseLeave={onMouseLeave}\n                handleMouseDown={onMouseDown}\n                handleTranslating={onTranslating}\n                handleRotating={onRotating}\n            ></LocationSvg>\n\n            <DragEntityProto\n                isSelected={isSelected}\n                location={station}\n                rd3tClassName={rd3tClassName}\n                d3={() => d3()}\n                handleRotate={(rotation) => {\n                    dispatchSetStationAttributes(station._id, { rotation });\n                }}\n                handleTranslate={({ x, y }) => \n                    dispatchSetStationAttributes(station._id, { x, y })\n                }\n                handleTranslateEnd={({ x, y }) => {\n                    const pos = convertD3ToReal([x, y], props.d3);\n                    dispatchSetStationAttributes(station._id, {\n                        pos_x: pos[0],\n                        pos_y: pos[1],\n                    });\n                    \n                }}\n                handleEnableDrag={() => {\n                    handleEnableDrag();\n                }}\n                handleDisableDrag={() => {\n                    handleDisableDrag();\n                }}\n            />\n            {onWidgetPageOpen()}\n        </React.Fragment>\n    );\n}\n\nexport default Station;\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useParams } from 'react-router-dom'\n\n// Import Utils\nimport { deepCopy } from '../../../../methods/utils/utils'\nimport { handleWidgetHoverCoord } from '../../../../methods/utils/widget_utils'\nimport { convertD3ToReal } from '../../../../methods/utils/map_utils'\nimport { editing } from '../../../../methods/utils/locations_utils'\nimport { getProcessStationsWhileEditing } from '../../../../methods/utils/processes_utils'\n\n// Import Constants\nimport { PositionTypes } from '../../../../constants/position_constants'\n\n// Import Actions\nimport { selectTask, setTaskAttributes } from '../../../../redux/actions/tasks_actions'\nimport { setSelectedPosition, setPositionAttributes } from '../../../../redux/actions/positions_actions'\nimport { hoverStationInfo } from '../../../../redux/actions/widget_actions'\nimport { pageDataChanged } from '../../../../redux/actions/sidebar_actions'\n\n// Import Components\nimport LocationSvg from '../location_svg/location_svg'\nimport DragEntityProto from '../drag_entity_proto'\nimport { getPreviousRoute } from \"../../../../methods/utils/processes_utils\";\nimport {\n    getLoadPositionId,\n    getLoadStationId, getRouteEnd, getRouteIndexInRoutes, getRouteStart,\n    isPositionAtLoadStation, isPositionAtUnloadStation,\n    isPositionInRoutes,\n    isStationInRoutes, isStationLoadStation, isStationUnloadStation\n} from \"../../../../methods/utils/route_utils\";\nimport {immutableDelete} from \"../../../../methods/utils/array_utils\";\n\nfunction Position(props) {\n\n    const {\n        d3,\n        position,\n        rd3tClassName,\n        handleEnableDrag,\n        handleDisableDrag,\n        mouseDown\n    } = props\n\n\n    const {\n        _id: positionId\n    } = position\n\n    const [hovering, setHovering] = useState(false)\n    const [rotating, setRotating] = useState(false)\n    const [translating, setTranslating] = useState(false)\n\n    const dispatch = useDispatch()\n    const dispatchSetTaskAttributes = (id, load) => dispatch(setTaskAttributes(id, load))\n    const dispatchHoverStationInfo = (info) => dispatch(hoverStationInfo(info))\n    const dispatchSetSelectedPosition = (position) => dispatch(setSelectedPosition(position))\n    const dispatchSetPositionAttributes = (id, attr) => dispatch(setPositionAttributes(id, attr))\n    const dispatchPageDataChanged = (bool) => dispatch(pageDataChanged(true))\n\n    const selectedTask = useSelector(state => state.tasksReducer.selectedTask)\n    const selectedProcess = useSelector(state => state.processesReducer.selectedProcess)\n    const selectedPosition = useSelector(state => state.positionsReducer.selectedPosition)\n    const selectedStation = useSelector(state => state.stationsReducer.selectedStation)\n    const hoveringID = useSelector(state => state.widgetReducer.hoverLocationID)\n    const hoveringInfo = useSelector(state => state.widgetReducer.hoverStationInfo)\n    const stations = useSelector(state => state.stationsReducer.stations)\n    const positions = useSelector(state => state.positionsReducer.positions)\n    const tasks = useSelector(state => state.tasksReducer.tasks)\n    const selectedStationChildrenCopy = useSelector(state => state.positionsReducer.selectedStationChildrenCopy)\n    const fixingProcess = useSelector(state => state.processesReducer.fixingProcess)\n\n    // ======================================== //\n    //                                          //\n    //       Position Characteristics           //\n    //                                          //\n    // ======================================== //\n    const routeStart = getRouteStart(selectedTask)\n    const routeEnd = getRouteEnd(selectedTask)\n    // Used to allow translating/rotation\n    let isSelected = false\n    // Set selected if the positon is part of a stations children copy and no selected task\n    if (!!selectedStationChildrenCopy && (positionId in selectedStationChildrenCopy) && !selectedTask) isSelected = true\n    // Set selected if there is a selected postion that is this position and no selected task\n    else if (!!selectedPosition && selectedPosition._id === positionId && !selectedTask) isSelected = true\n    // Set selected if the position is a temp right click\n    else if (position.schema === 'temporary_position') isSelected = true\n\n    // Used to disable the ability to add position as a task\n    let disabled = false\n\n    if(selectedTask && selectedProcess) {\n\n\n        if (!position.parent) {\n            disabled = true\n        }\n\n        // This filters out positions when fixing a process\n        // If the process is broken, then you can only start the task at the route before break's unload location\n        if (!!fixingProcess) {\n            if (!position.parent) {\n                disabled = true\n            }\n            else {\n                // setting load (or both are set, in which case logic is the same, as click another position would be setting the load\n                if ((!routeStart) || (routeStart && routeEnd)) {\n                    // disable all positions except those at unload station of the route before the break\n                    const routeBeforeBreak = selectedProcess.routes[selectedProcess.broken - 1]\n                    disabled = !isPositionAtUnloadStation(routeBeforeBreak, positionId)\n                }\n\n                // setting unload\n                else if (!routeEnd) {\n                    if (!positions[selectedTask?.load?.position]) disabled = true\n\n                    // don't allow selecting positions at stations already in process\n                    const routeAfterBreak = selectedProcess.routes[selectedProcess.broken]\n\n                    if(isPositionInRoutes(selectedProcess.routes, positionId) && !isPositionAtLoadStation(routeAfterBreak, positionId)) disabled = true\n                }\n            }\n        }\n            // This filters positions when making a process\n            // If the process has routes, and you're adding a new route, you should only be able to add a route starting at the last station\n        // This eliminates process with gaps between stations\n        else {\n\n             {\n                // extract insertIndex for adding new routes to beginning of a process\n                const {\n                    temp\n                } = selectedTask || {}\n                const {\n                    insertIndex\n                } = temp || {}\n\n                // not first route\n                if (selectedProcess.routes.length > 0) {\n                    const routeIndex = getRouteIndexInRoutes(selectedProcess.routes.map((currProcess) => currProcess._id), selectedTask?._id)\n\n                    // setting load (or both have been set)\n                    if (!routeStart || (routeStart && routeEnd)) {\n\n                        // adding to beginning of process\n                        if (insertIndex === 0) {\n                            // disable all positions already in the process\n                            if(isPositionInRoutes(selectedProcess.routes, positionId)) disabled = true\n                        }\n\n                        else if (routeIndex === 0) {\n                            if (isPositionInRoutes(immutableDelete(selectedProcess.routes, 0), positionId)) disabled = true\n                        }\n\n                        else {\n                            // must start at position at unload station of previous route\n                            const previousRoute = getPreviousRoute(selectedProcess.routes, selectedTask._id)\n                            const previousRouteEnd = getRouteEnd(previousRoute)\n                            if(!isPositionAtUnloadStation(previousRoute, positionId) && previousRouteEnd) disabled = true\n\n\n\n                            const loadPositionId = getLoadPositionId(selectedTask)\n                            const loadStationId = getLoadStationId(selectedTask)\n\n                            if (isPositionInRoutes(selectedProcess.routes, positionId) && (previousRouteEnd !== position.parent) && positionId !== loadPositionId && loadStationId !== position.parent) disabled = true\n                        }\n                    }\n\n                    // setting unload\n                    else if (!routeEnd) {\n\n                        if (!positions[selectedTask?.load?.position]) disabled = true\n\n                        // adding new to beginning of process\n                        if (insertIndex === 0) {\n                            // disable positions already used\n                            const firstRoute = selectedProcess.routes[0]\n                            if(isPositionInRoutes(selectedProcess.routes, positionId) && !isPositionAtLoadStation(firstRoute, positionId)) disabled = true\n\n                            // disable positions at load station of current route, as unload and load shouldn't be at same route\n                            if (isPositionAtLoadStation(selectedTask, positionId)) disabled = true\n                        }\n\n                        else if (routeIndex === 0) {\n                            const nextRoute = selectedProcess.routes[1]\n                            if (isPositionInRoutes(selectedProcess.routes, positionId) && !isPositionAtLoadStation(nextRoute, positionId)) disabled = true\n                        }\n\n                        else {\n                            const nextRoute = selectedProcess.routes[routeIndex + 1]\n                            // disable positions already used\n                            if (isPositionInRoutes(selectedProcess.routes, positionId) && (!isPositionAtLoadStation(nextRoute, positionId) || routeIndex === -1)) disabled = true\n\n                            // disable positions at load station of current route, as unload and load shouldn't be at same route\n                            if (isPositionAtLoadStation(selectedTask, positionId)) disabled = true\n                        }\n                    }\n                }\n\n                // first route\n                else {\n                    // setting load\n                    if (!routeStart || (routeStart && routeEnd)) {\n                        // all positions are available for load position of first route\n                    }\n\n                    // setting unload\n                    else if (!routeEnd) {\n                        // disable positions at load station of current route, as unload and load shouldn't be at same route\n                        if (isPositionAtLoadStation(selectedTask, positionId)) disabled = true\n                    }\n                }\n            }\n        }\n    }\n    else {\n        // Disable if the selectedPosition is not this position\n        if (!!selectedPosition && selectedPosition._id !== positionId) disabled = true\n\n        // Disable if making a task and this position does not have a parent\n        else if (!!selectedTask && !position.parent) disabled = true\n\n        // Disable if the position does not belong to the children copy\n        else if (!!selectedStationChildrenCopy && !(positionId in selectedStationChildrenCopy)) disabled = true\n\n        // Disbale if the selected stations children does not include this station\n        else if (!!selectedStation && !selectedStation.children.includes(positionId)) disabled = true\n    }\n\n    // Tells the position to glow\n    const shouldGlow = selectedTask !== null &&\n        ((selectedTask.load.position == positionId && selectedTask.type == 'push') ||\n            (selectedTask.unload.position == positionId && selectedTask.type == 'pull') ||\n            (selectedTask.load.position == positionId && selectedTask.type == 'both') ||\n            (selectedTask.unload.position == positionId && selectedTask.type == 'both'))\n\n\n    // Used to highlight position if the position is part of the selected task\n    let highlight = false\n    if (!!selectedTask && (selectedTask.load.position === positionId || selectedTask.unload.position === positionId)) highlight = true\n\n\n    // Set Color\n    let color = PositionTypes[position.type].color\n    if (!isSelected && disabled) color = '#afb5c9' // Grey\n    else if (highlight) color = '#38eb87' // Green\n\n    // ======================================== //\n    //                                          //\n    //           Position Functions             //\n    //                                          //\n    // ======================================== //\n\n    useEffect(() => {\n        window.addEventListener(\"mouseup\", onSetListener)\n        return () => {\n            window.removeEventListener(\"mouseup\", onSetListener)\n        }\n\n    }, [])\n\n    const onSetListener = () => {\n        setRotating(false)\n        setTranslating(false)\n    }\n\n\n    // Automatically opens widget pages and sets hovering to true in the position is a temp right click\n    useEffect(() => {\n        if (position !== null && position.schema === 'temporary_position') {\n            setHovering(true)\n            dispatchHoverStationInfo(handleWidgetHover())\n            dispatchSetSelectedPosition(position)\n        }\n    }, [])\n\n\n    /**\n    * Passes the X, Y, scale and ID of position to redux which is then used in widgets\n    */\n    const handleWidgetHover = () => {\n\n        return handleWidgetHoverCoord(position, rd3tClassName, d3)\n\n    }\n\n    const onSetPositionTask = () => {\n\n        // Commented out for now\n        // If there's a selected process and the process has routes and the station is not selected, then disable it from being selected\n        // if (!!selectedProcess && selectedProcess.routes.length > 0 && !isSelected) return\n\n\n        if (selectedTask !== null) {\n            // If the load position has been defined but the unload position hasnt, assign the unload position\n            if (selectedTask.load.position !== null && selectedTask.unload.position === null) {\n                let unload = deepCopy(selectedTask.unload)\n                let type = selectedTask.type\n                unload.position = positionId\n                if (position.parent !== null) {\n                    unload.station = position.parent\n                } else {\n                    type = 'push'\n                }\n                dispatchSetTaskAttributes(selectedTask._id, { unload, type })\n            } else { // Otherwise assign the load position and clear the unload position (to define a new unload)\n                let load = deepCopy(selectedTask.load)\n                let unload = deepCopy(selectedTask.unload)\n                let type = selectedTask.type\n                load.position = positionId\n                if (position.parent !== null) {\n                    load.station = position.parent\n                } else {\n                    type = 'pull'\n                }\n                unload.position = null\n                unload.station = null\n                dispatchSetTaskAttributes(selectedTask._id, { load, unload, type })\n            }\n        }\n    }\n\n    const onMouseEnter = () => {\n        // Only hover if there is no selected task\n        if (!hoveringInfo && selectedTask === null && !position.temp && !mouseDown) {\n            setHovering(true)\n            if (!editing() && !rotating && !translating && !selectedPosition && !selectedStation && !selectedTask) {\n                dispatchHoverStationInfo(handleWidgetHover())\n                dispatchSetSelectedPosition(position)\n\n            }\n        }\n\n    }\n\n    const renderParentLine = () => {\n\n        const parent = ((!!selectedStationChildrenCopy && positionId in selectedStationChildrenCopy) && !!selectedStation) ? selectedStation : stations[position.parent]\n        // TODO: Temp fix\n        if (!parent) return\n        return (\n            <line x1={`${position.x}`} y1={`${position.y}`}\n                x2={`${parent.x}`} y2={`${parent.y}`}\n                stroke={color} strokeWidth=\"1.4\" shapeRendering=\"geometricPrecision\" style={{ opacity: '0.3', }}\n            />\n        )\n    }\n\n    const onMouseDown = () => {\n        if (!disabled) onSetPositionTask()\n        if(selectedPosition?.schema!==\"temporary_position\"){\n        dispatchPageDataChanged(true)\n      }\n    }\n\n    const onTranslating = (bool) => {\n        if (!isSelected) {\n            setTranslating(bool)\n        }\n    }\n\n    const onRotating = (bool) => {\n        setRotating(bool)\n        if (!bool) {\n            setHovering(false)\n        }\n    }\n\n    const onMouseLeave = () => {\n        position.schema !== 'temporary_position' && setHovering(false)\n    }\n\n    return (\n        <React.Fragment key={`frag-loc-${positionId}`}>\n            {!!position.parent && renderParentLine()}\n            <LocationSvg\n                location={position}\n                rd3tClassName={rd3tClassName}\n                color={color}\n                d3={d3}\n                isSelected={isSelected}\n                hovering={hovering}\n                rotating={rotating}\n                hoveringInfo={position.schema !== 'temporary_position' ? hoveringInfo : null}\n                shouldGlow={shouldGlow}\n\n                handleMouseEnter={onMouseEnter}\n                handleMouseLeave={onMouseLeave}\n                handleMouseDown={onMouseDown}\n                handleTranslating={onTranslating}\n                handleRotating={onRotating}\n\n            />\n\n            <DragEntityProto\n                isSelected={isSelected}\n                location={position}\n                rd3tClassName={rd3tClassName}\n                d3={() => d3()}\n\n                handleRotate={(rotation) => { dispatchSetPositionAttributes(positionId, { rotation }) }}\n                handleTranslate={({ x, y }) => dispatchSetPositionAttributes(positionId, { x, y })}\n                handleTranslateEnd={({ x, y }) => {\n                    const pos = convertD3ToReal([x, y], props.d3)\n                    dispatchSetPositionAttributes(positionId, { pos_x: pos[0], pos_y: pos[1] })\n                }}\n\n                handleEnableDrag={() => {\n                    handleEnableDrag()\n                }}\n                handleDisableDrag={() => {\n                    handleDisableDrag()\n                }}\n\n\n            />\n        </React.Fragment>\n    )\n}\n\nexport default Position\n","import React, { useMemo, useEffect, useState } from 'react';\n\nconst HeatSpot = (props) => {\n\n    const {\n        station,\n        wipRatio,\n        d3Scale\n    } = props;\n\n    const color = () => {\n        if (wipRatio < 1.5) {\n            return 'url(#goodGrad)';\n        } else if (wipRatio < 3) {\n            return 'url(#okayGrad)';\n        } else {\n            return 'url(#badGrad)'\n        }\n    }\n\n    const spotSize = 30*Math.min(Math.max(1, wipRatio), 4)*d3Scale;\n    if (isNaN(spotSize)) {return null}\n    \n\n    return (\n        \n        <g>\n            <circle cx={station.x} cy={station.y} r={spotSize} fill={color()} />\n        </g>\n    )\n}\n\nexport default HeatSpot;","import React, { useEffect, useMemo, useState } from 'react'\nimport moment from 'moment';\n\n// functions external\nimport { useDispatch, useSelector } from \"react-redux\";\n\n/// utils\nimport { getProcessStationsSorted } from '../../../methods/utils/processes_utils';\nimport { getBinQuantity, getCardsInBin, getLotTotalQuantity } from '../../../methods/utils/lot_utils';\nimport HeatSpot from './heatspot/heatspot';\n\n\nconst HeatMap = (props) => {\n\n    const {\n        map_id,\n        d3Scale\n    } = props;\n\n    const [stationWIPRatios, setStationWIPRatios] = useState({})\n\n    const cards = useSelector(state => state.cardsReducer.cards)\n\tconst routes = useSelector(state => state.tasksReducer.tasks)\n\n    const editingStation = useSelector(state => state.stationsReducer.editingStation)\n    const editingPosition = useSelector(state => state.positionsReducer.editingPosition)\n\n    let stations = useSelector(state => state.stationsReducer.stations)\n    stations = Object.values(stations).filter(station => (station.map_id === map_id))\n\n\tlet processes = useSelector(state => state.processesReducer.processes)\n    processes = Object.values(processes).filter((currProcess) => currProcess.map_id === map_id)\n\n    useEffect(() => {\n\n        let WIPBuildupRatios = {};    // The WIP ratios of each station on the map (stationWIP / meanProcessWIP) (refer to meanProcessWIP (~line 45))\n        processes.forEach(process => {\n            const processStations = getProcessStationsSorted(process, routes);\n\n            let totalProcessWIP = 0;    // Tracks total WIP in the process\n            let stationWIP = {}         // Tracks WIP at each station in the process (by id)\n            let i, pStationId, stationsWithWip = 0;\n            for (pStationId of processStations) { // Loop through each station in process to get mean WIP of the process\n                stationWIP[pStationId] = Object.values(cards).filter(card => card.process_id === process._id).reduce((accumWIP, card) => accumWIP + getBinQuantity(card, pStationId), 0)\n                stationsWithWip += (stationWIP[pStationId] > 0) ? 1 : 0;\n                totalProcessWIP += stationWIP[pStationId];\n            }\n\n            const meanProcessWIP = totalProcessWIP / stationsWithWip;    // The mean WIP at each station in this prcess\n\n            // Loop through stations again to find WIP Ratio (stationWIP / meanProcessWIP)\n            let WIPRatio;\n            for (i=0; i<processStations.length; i++) {\n                pStationId = processStations[i];\n                WIPRatio = stationWIP[pStationId] / meanProcessWIP;\n\n                if (pStationId in WIPBuildupRatios) {\n                    WIPBuildupRatios[pStationId] = WIPRatio + WIPBuildupRatios[pStationId] // Take the sum of WIP ratios for every process that goes through the station\n                } else if (WIPRatio > 0) {\n                    WIPBuildupRatios[pStationId] = WIPRatio;\n                }\n\n            }\n        });\n\n        setStationWIPRatios(WIPBuildupRatios);\n    }, [cards])\n\n    const spotStartOpacity = 0.7;\n    const spotEndOpacity = 0;\n\n    // console.log('render', stationWIPRatios)\n    \n    return (\n        <g>\n            <defs>\n                <radialGradient id=\"goodGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"20%\" style={{stopColor: '#00ffcf', stopOpacity: spotStartOpacity}} />\n                    <stop offset=\"100%\" style={{stopColor: '#00ff97', stopOpacity: spotEndOpacity}} />\n                </radialGradient>\n                <radialGradient id=\"okayGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"20%\" style={{stopColor: '#ff9300', stopOpacity: spotStartOpacity}} />\n                    <stop offset=\"100%\" style={{stopColor: '#ffc200', stopOpacity: spotEndOpacity}} />\n                </radialGradient>\n                <radialGradient id=\"badGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"20%\" style={{stopColor: '#ff0e00', stopOpacity: spotStartOpacity}} />\n                    <stop offset=\"100%\" style={{stopColor: '#ff6800', stopOpacity: spotEndOpacity}} />\n                </radialGradient>\n            </defs>\n            {!editingStation && !editingPosition &&\n                stations.map(station => \n                    station._id in stationWIPRatios && \n                        <HeatSpot \n                            key={station._id+'-heatspot'}\n                            station={station} \n                            wipRatio={stationWIPRatios[station._id]} \n                            d3Scale={d3Scale}\n                        />\n                )\n            }\n        </g>\n    );\n}\n\nexport default HeatMap;","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\n// Import Actions\nimport { setTaskAttributes } from '../../../redux/actions/tasks_actions'\nimport {getLoadPositionId, getUnloadPositionId, getRouteEnd, getRouteStart } from \"../../../methods/utils/route_utils\";\n\nexport default function RatsnestPaths(props) {\n\n    const {\n        route,\n        d3Scale\n    } = props\n\n    // console.log(route)\n    const tasks = useSelector(state => state.tasksReducer.tasks)\n    const positions = useSelector(state => state.positionsReducer.positions)\n    const stations = useSelector(state => state.stationsReducer.stations)\n\n    const loadPositionId = getLoadPositionId(tasks[route])\n    const unloadPositionId = getUnloadPositionId(tasks[route])\n\n    const startPos = !!positions[loadPositionId] ? positions[loadPositionId] : stations[loadPositionId]\n    const endPos = !!positions[unloadPositionId] ? positions[unloadPositionId] : stations[unloadPositionId]\n\n    if (!startPos || !endPos) {return null}\n\n\n    return (\n        <>\n            <g>\n                <line x1={`${startPos.x}`} y1={`${startPos.y}`}\n                    x2={`${endPos.x}`} y2={`${endPos.y}`}\n                    strokeWidth={`${d3Scale * 1.5}`} stroke={'lightgrey'}\n                    strokeLinecap=\"round\"\n                />\n            </g>\n        </>\n    )\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux'\n\nimport RatsnestPath from './ratsnest_path';\n\nconst RatsNest = (props) => {\n\n    const {\n        map_id,\n        d3Scale\n    } = props;\n\n    const processes = useSelector(state => state.processesReducer.processes);\n    const mapProcesses = Object.values(processes).filter(process => process.map_id === map_id)\n\n    const editingStation = useSelector(state => state.stationsReducer.editingStation)\n    const editingPosition = useSelector(state => state.positionsReducer.editingPosition)\n\n    return (\n        <>\n            {!editingStation && !editingPosition &&\n                mapProcesses.map(process => process.routes.map(route => (\n                    <RatsnestPath route={route} d3Scale={d3Scale} id={`ratsnest-path-${route._id}`}/>\n                )))\n            }\n        </>\n    )\n}\n\nexport default RatsNest;","import React, { Component, useState, lazy, Suspense } from 'react'\nimport { ReactDOM, Route } from 'react-dom'\nimport {connect, useSelector} from 'react-redux';\nimport moduleName from 'react'\nimport { withRouter } from \"react-router-dom\";\n\nimport * as styled from './map_view.style'\nimport VisibilitySensor from 'react-visibility-sensor'\n\nimport uuid from 'uuid';\nimport * as d3 from 'd3'\n\n// Import Utils\nimport { convertD3ToReal, convertRealToD3, getRelativeOffset } from '../../methods/utils/map_utils'\nimport { getIsEquivalent, } from '../../methods/utils/utils.js'\n\n// Import Actions\nimport { getMap } from '../../redux/actions/map_actions'\nimport { postSettings } from '../../redux/actions/settings_actions'\nimport { updateStations, setStationAttributes, setSelectedStation } from '../../redux/actions/stations_actions'\nimport { updatePositions, postPosition, setPositionAttributes, setSelectedPosition } from '../../redux/actions/positions_actions'\nimport * as deviceActions from '../../redux/actions/devices_actions'\n\nimport { widgetLoaded, hoverStationInfo } from '../../redux/actions/widget_actions'\n\n// Import Components\n//import TaskPaths from '../../components/map/task_paths/task_paths.js'\n//import ProcessPaths from '../../components/map/process_paths/process_paths'\n//import MiR100 from '../../components/map/amrs/mir100/mir100.js'\n//import Zones from '../../components/map/zones/zones'\n//import RightClickMenu from '../../components/map/right_click_menu/right_click_menu'\n//import TaskStatistics from '../../components/map/task_statistics/task_statistics'\n//import RouteConfirmation from '../../components/map/route_confirmation/route_confirmation'\n//import Widgets from '../../components/widgets/widgets'\nimport CartWaypoint from '../../components/map/locations/cart_waypoint/cart_waypoint'\n\nimport Station from '../../components/map/locations/station/station'\nimport Position from '../../components/map/locations/position/position'\nimport HeatMap from '../../components/map/heatmap/heatmap'\nimport RatsNest from '../../components/map/ratsnest/ratsnest'\n//import MapApps from '../../components/map/map_apps/map_apps'\n\n// logging\nimport log from \"../../logger\"\nimport { setCurrentMap } from \"../../redux/actions/map_actions\";\nimport { getPreviousRoute } from \"../../methods/utils/processes_utils\";\nimport { isObject } from \"../../methods/utils/object_utils\";\nimport {getHasStartAndEnd, getUnloadPositionId} from \"../../methods/utils/route_utils\";\nimport { postLocalSettings } from '../../redux/actions/local_actions';\nconst logger = log.getLogger(\"MapView\")\n\nconst TaskPaths = lazy(()=> import('../../components/map/task_paths/task_paths.js'))\nconst ProcessPaths = lazy(()=> import('../../components/map/process_paths/process_paths'))\nconst MiR100 = lazy(()=> import('../../components/map/amrs/mir100/mir100.js'))\nconst Zones = lazy(()=> import('../../components/map/zones/zones'))\nconst RightClickMenu = lazy(()=> import('../../components/map/right_click_menu/right_click_menu'))\nconst TaskStatistics = lazy(()=> import('../../components/map/task_statistics/task_statistics'))\nconst RouteConfirmation = lazy(()=> import('../../components/map/route_confirmation/route_confirmation'))\nconst Widgets = lazy(()=> import('../../components/widgets/widgets'))\nconst MapApps = lazy(()=> import('../../components/map/map_apps/map_apps'))\n\nexport class MapView extends Component {\n    constructor(props) {\n        super(props)\n\n        this.mobileMode = this.props.mobileMode\n        this.onClick = this.props.onClick\n\n        this.state = {\n            showRightClickMenu: {},\n            hasStartAndEnd: false,\n            currentMap: null,\n        }\n\n        this.rd3tSvgClassName = `__SVG`     // Gives uniqe className to map components to reference for d3 events\n        this.rd3tMapClassName = `__MAP`\n        this.rd3tLocClassName = '__LOC'\n        this.rd3tStationClassName = `__STATION`\n        this.rd3tPosClassName = '__POS'\n\n        this.lastEvent = null   // Save the latest event\n\n        this.initialRender = true   // Keeps track of where the D3 SVG has been zoomed or dragged\n        this.draggable = true   // Dragging is disabled when another event occurs (ex: moving a location)\n        this.widgetDraggable = true   // Dragging is disabled when widget page is open (ex: moving a location)\n\n        this.d3 = {\n            translate: [0, 0],\n            naturalDims: { height: 500, width: 500 },\n            scale: 1,\n            naturalScale: 1,\n            boundingClientHeight: 0\n        }\n\n        this.naturalImageDimensions = {\n            width: 100,\n            heigh: 100\n        }\n\n        this.mouseDown = false\n    }\n\n    componentDidMount() {\n\n\n\n        // Refresh the map on initial mount. This will only likely give you back the list of\n        // maps, but componentDidUpdate will catch that and set the current map to the first map\n        // in the returned list (which will be the active map)\n        // this.refreshMap()\n        this.checkForMapLoad()\n        window.addEventListener('mousedown', () => this.mouseDown = true, { passive: false })\n        window.addEventListener('mouseup', () => { this.mouseDown = false; this.validateNewEntity() }, { passive: false })\n        window.addEventListener(\"click\", () => { this.setState({ showRightClickMenu: {} }) });\n\n        // Event listener that will recalculate the map geometry when the screen size changes\n        window.addEventListener('resize', () => {\n            //this.calculateD3Geometry()\n            this.bindZoomListener()\n        }, { passive: false })\n\n    }\n\n    checkForMapLoad = () => {\n\n      var currentMap = this.props.maps.find(map => map._id === this.props.localSettings.currentMapId)\n\n      if(currentMap === undefined){\n        this.setState({currentMap: this.props.maps[0]})\n\n        const updatedSettings = {\n          ...this.props.localSettings,\n          currentMapId: this.props.maps[0]._id,\n        }\n        this.props.dispatchPostLocalSettings(updatedSettings)\n      }\n      else{\n        this.setState({currentMap: currentMap})\n      }\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        // If new maps are available, refresh current map\n        // NOTE: will be useless once we have a method to select map\n        // if (prevProps.maps.length != this.props.maps.length) {\n        //     this.refreshMap()\n        // }\n        //this.checkForMapLoad() //test\n\n        if(this.props.localSettings.currentMapId !== this.state.currentMap._id){\n          this.checkForMapLoad()\n        }\n        if(prevProps.selectedTask !== this.props.selectedTask) {\n            this.setState({hasStartAndEnd: getHasStartAndEnd(this.props.selectedTask)})\n        }\n\n        // If the map has been changed, recalculate the geometry and bind the zoom\n        // listener to default to the correct translation\n        if (!getIsEquivalent(prevProps.currentMap, this.state.currentMap)) {\n            //this.calculateD3Geometry(this.mapContainer)\n            this.bindZoomListener()\n        }\n\n        // If the map has been changed, recalculate the geometry and bind the zoom\n        // listener to default to the correct translation\n        // if (!isEquivalent(prevProps.locations, this.props.locations)) {\n        //     this.calculateD3Geometry()\n        //     this.bindZoomListener()\n        // }\n\n\n        // if a widget page is open, disable window event listeners so events work normally within the widget page\n        const { widgetPage } = this.props.match.params    // contains url params from route.\n        if (widgetPage) {\n            document.removeEventListener(\"dragend\", this.validateNewLocation)\n        } else {\n            // reattach event listeners if necessary\n            document.addEventListener('dragend', this.validateNewLocation, { capture: false, passive: true });\n        }\n\n        // if (this.props.currentMap != null && !isEquivalent(prevProps.locations, this.props.locations)) {\n        //     let locations = this.props.locations\n        //     locations.forEach((location, ind) => {\n        //         locations[ind].x = this.d3.translate[0] + this.d3.scale*(location.pos_x/this.props.currentMap.resolution)\n        //         locations[ind].y = this.d3.translate[1] + this.d3.scale*(this.d3.boundingClientHeight - location.pos_y/this.props.currentMap.resolution)\n        //     })\n        //     this.props.onUpdateLocations(locations)\n        // }\n\n\n\n          if(!this.props.editingStation && !this.props.hoveringInfo){\n            this.props.dispatchSetSelectedStation(null)\n          }\n    }\n\n\n    /* ========== Map Functions ========== */\n\n    /***\n     * Refreshes the map and all map entities\n     */\n    refreshMap = () => {\n        if (!!this.props.maps[0]) {\n            this.props.dispatchGetMap(this.props.maps[0].guid)\n        }\n    }\n\n    openLocation = () => {\n        return <Route path={[\"/locations\"]} />\n    }\n\n\n\n    // ---------- Functionality for adding new location ---------- //\n\n    /**\n     * Handles Draging new locations onto the map\n     *\n     * @param {*} e\n     */\n    dragNewEntity = e => {\n        if (!this.mouseDown) return\n\n        // Handle Stations\n        if (!!this.props.selectedStation && this.props.selectedStation.temp === true) {\n            this.props.dispatchSetStationAttributes(this.props.selectedStation._id, {\n                x: e.clientX,\n                y: e.clientY\n            })\n        }\n\n        // Handle Positions\n        else if (!!this.props.selectedPosition && this.props.selectedPosition.temp === true && this.props.selectedPosition.schema !== \"temporary_position\") {\n            this.props.dispatchSetPositionAttributes(this.props.selectedPosition._id, {\n                x: e.clientX,\n                y: e.clientY\n            })\n        }\n\n        // Else it's a stations child position\n        else if (!!this.props.selectedStationChildrenCopy) {\n            const draggingChild = Object.values(this.props.selectedStationChildrenCopy).find(position => position.temp === true)\n            if (!!draggingChild && !this.props.selectedPosition) {\n                this.props.dispatchSetPositionAttributes(draggingChild._id, {\n                    x: e.clientX,\n                    y: e.clientY\n                })\n            }\n\n        }\n\n    }\n\n    /**\n     * This runs on mouse up\n     * Handles adding pos_x and pos_y to new locations\n     * pos_x and pos_y are the real x and y relations of the location to the map\n     */\n    validateNewEntity = () => {\n\n        // Handle Stations\n        if (!!this.props.selectedStation && this.props.selectedStation.temp === true) {\n            const pos = convertD3ToReal([this.props.selectedStation.x, this.props.selectedStation.y], this.d3)\n            this.props.dispatchSetStationAttributes(this.props.selectedStation._id, {\n                pos_x: pos[0],\n                pos_y: pos[1],\n                temp: false\n            })\n        }\n\n        // Handle Posiitions\n        else if (!!this.props.selectedPosition && this.props.selectedPosition.temp === true && this.props.selectedPosition.schema !== \"temporary_position\") {\n            const pos = convertD3ToReal([this.props.selectedPosition.x, this.props.selectedPosition.y], this.d3)\n            this.props.dispatchSetPositionAttributes(this.props.selectedPosition._id, {\n                pos_x: pos[0],\n                pos_y: pos[1],\n                temp: false\n            })\n        }\n\n        // Handle child positions of stations\n        else if (!!this.props.selectedStationChildrenCopy) {\n            let newChildEntity = Object.values(this.props.selectedStationChildrenCopy).find(position => position.temp == true)\n            if (!!newChildEntity) {\n\n                // Update the new entity to the edited child copy\n                // Uses copy instead of the naked state in case you dont want to keep changes\n                newChildEntity = this.props.selectedStationChildrenCopy[newChildEntity._id]\n\n                const pos = convertD3ToReal([newChildEntity.x, newChildEntity.y], this.d3)\n                this.props.dispatchSetPositionAttributes(newChildEntity._id, {\n                    pos_x: pos[0],\n                    pos_y: pos[1],\n                    temp: false\n                })\n            }\n        }\n    }\n\n\n\n\n    /* ========== D3 Functions ========== */\n\n    /***\n     * Binds the d3 listener that listens for zoom events. Conveniently it also listens to\n     * drag events, so this will take care of both\n     */\n    bindZoomListener = () => {\n        const { scaleExtent } = this.props\n        const { resolution } = this.state.currentMap\n        const { translate, scale } = this.d3\n        const svg = d3.select(`.${this.rd3tSvgClassName}`)\n        const map = d3.selectAll(`.${this.rd3tMapClassName}`)\n\n        let x, y\n        svg.call(\n            d3.behavior\n                .zoom()\n                .scaleExtent([-100, 100])\n                // .scaleExtent([scaleExtent.min, scaleExtent.max])\n                .on('zoom', () => {\n                    // Disables the ability to hover over location on mouse drag when a location is selected that is not new or a right click\n                    if ((!!this.props.selectedStation || (!!this.props.selectedPosition && this.props.selectedPosition.schema !== 'temporary_position')) && (!this.props.editingStation || !this.props.editingPosition)) {\n                        this.props.dispatchHoverStationInfo(null)\n                    }\n\n                    //// Saving the last event is usefull for saving d3 state when draggable is toggled (when moving locations)\n                    this.lastEvent = d3.event\n                    let { stations, positions, devices } = this.props\n\n\n                    //// Apply the event translation to image\n                    map.attr('transform', `translate(${d3.event.translate}) scale(${d3.event.scale})`)\n                    this.d3 = {\n                        ...this.d3,\n                        translate: d3.event.translate,\n                        scale: d3.event.scale\n                    }\n\n                    //// Apply the event translation to each station\n                    Object.values(stations).forEach(station => {\n\n                        [x, y] = convertRealToD3([station.pos_x, station.pos_y], this.d3)\n                        station = {\n                            ...station,\n                            x: x,\n                            y: y,\n                        }\n                        stations[station._id] = station\n\n                    })\n\n                    // Apply the event translation to selectedStation if there is one\n                    let updatedSelectedStation = null\n                    if (!!this.props.selectedStation) {\n                        [x, y] = convertRealToD3([this.props.selectedStation.pos_x, this.props.selectedStation.pos_y], this.d3)\n                        updatedSelectedStation = this.props.selectedStation\n                        updatedSelectedStation = {\n                            ...updatedSelectedStation,\n                            x: x,\n                            y: y,\n                        }\n\n                    }\n\n                    this.props.dispatchUpdateStations(stations, updatedSelectedStation, this.d3) // Bulk Update\n\n                    //// Apply the event translation to each position\n                    Object.values(positions).forEach(position => {\n\n                        [x, y] = convertRealToD3([position.pos_x, position.pos_y], this.d3)\n                        position = {\n                            ...position,\n                            x: x,\n                            y: y,\n                        }\n\n                        positions[position._id] = position\n\n                    })\n\n                    // Apply the event translation to selectedPosition if there is one\n                    let updatedSelectedPosition = null\n                    if (!!this.props.selectedPosition) {\n                        [x, y] = convertRealToD3([this.props.selectedPosition.pos_x, this.props.selectedPosition.pos_y], this.d3)\n                        updatedSelectedPosition = this.props.selectedPosition\n                        updatedSelectedPosition = {\n                            ...updatedSelectedPosition,\n                            x: x,\n                            y: y,\n                        }\n                    }\n\n                    // Apple the event translation to Children Copy if need be\n                    let updatedChildrenPositions = null\n                    if (!!this.props.selectedStationChildrenCopy) {\n                        updatedChildrenPositions = {}\n                        Object.values(this.props.selectedStationChildrenCopy).forEach(position => {\n                            [x, y] = convertRealToD3([position.pos_x, position.pos_y], this.d3)\n\n                            position = {\n                                ...position,\n                                x: x,\n                                y: y,\n                            }\n                            updatedChildrenPositions[position._id] = position\n\n                        })\n                    }\n\n                    this.props.dispatchUpdatePositions(positions, updatedSelectedPosition, updatedChildrenPositions, this.d3) // Bulk Update\n\n                    //// Apply the event translation to each mobile device\n                    Object.values(devices).filter(device => device.device_model == 'MiR100').map(device => {\n                        [x, y] = convertRealToD3([device.position.pos_x, device.position.pos_y], this.d3)\n\n                        device.position = {\n                            ...device.position,\n                            x: x,\n                            y: y,\n                        }\n                        devices[device._id] = device\n                    })\n                    this.props.dispatchUpdateDevices(devices, this.d3) // Bulk Update\n\n                    // Once zoomed or dragged, stop initializing locations with transforms, instead now let the listener handle that. Otherwise zoom gets jumpy\n                    if (this.initialRender) { this.initialRender = false }\n                })\n                .on('zoomend', () => {\n\n                })\n                // Offset so that first pan and zoom does not jump back to [0,0] coords\n                .scale(scale)\n                .translate(translate),\n        );\n    }\n\n    /**\n     * Overwrite the listener we described above /\\ to be null\n     * (basically dont listen to drag/zoom events)\n     */\n    unbindZoomListener = () => {\n        const { rd3tSvgClassName } = this\n\n        const svg = d3.select(`.${rd3tSvgClassName}`);\n        svg.call(d3.behavior.zoom().on('zoom', null))\n    }\n\n    onDisableDrag = () => {\n        if (this.draggable) {\n            this.draggable = false\n            this.unbindZoomListener()\n        }\n    }\n\n    onEnableDrag = () => {\n        if (!this.draggable) {\n            this.draggable = true\n            this.bindZoomListener()\n        }\n    }\n\n    onWidgetDisableDrag = () => {\n        if (this.widgetDraggable) {\n            this.widgetDraggable = false\n            this.unbindZoomListener()\n        }\n    }\n\n    onWidgetEnableDrag = () => {\n        if (!this.widgetDraggable) {\n            this.widgetDraggable = true\n            this.bindZoomListener()\n        }\n    }\n\n    /**\n     * x: 0,\n     * y: 0property, instead of going\n     * through D3's scaling mechanism, which would have picked up both properties.\n     *\n     * @return {object} {translate: {x: number, y: number}, zoom: number}\n     */\n    calculateD3Geometry = () => {\n        let { locations } = this.props\n        let { resolution } = this.state.currentMap\n\n        let scale\n        if (this.props.zoom > this.props.scaleExtent.max) {\n            scale = this.props.scaleExtent.max;\n        } else if (this.props.zoom < this.props.scaleExtent.min) {\n            scale = this.props.scaleExtent.min;\n        } else {\n            scale = this.props.zoom;\n        }\n\n        let translate\n        if (!!this.mapContainer && !!this.mapImage) {\n\n            const cHeight = this.mapContainer.getBoundingClientRect().height\n            const cWidth = this.mapContainer.getBoundingClientRect().width\n\n            const iHeight = this.mapImage.getBoundingClientRect().height\n            const iWidth = this.mapImage.getBoundingClientRect().width\n\n            const iNatHeight = this.naturalImageDimensions.height\n            const iNatWidth = this.naturalImageDimensions.width\n\n\n\n            // Apply translations to map.\n            // The map is translated by half the container dims, and then back by\n            // half the image dims. This leaves it in the middle of the screen\n            translate = {\n                x: this.props.translate.x + cWidth / 2 - iWidth / 2,\n                y: this.props.translate.y + cHeight / 2 - iHeight / 2,\n            }\n\n            // Save necessary variables\n            this.d3 = {\n                translate: [translate.x, translate.y],\n                scale: scale,\n                mapResolution: resolution,\n                // imgResolution: iNatWidth / iWidth,\n                imgResolution: 1,\n                actualDims: {\n                    height: iHeight,\n                    width: iWidth\n                },\n                naturalDims: {\n                    height: iNatHeight,\n                    width: iNatWidth\n                },\n            }\n\n\n            let x, y\n            let { stations, positions, devices } = this.props\n            //// Apply the event translation to each station\n            Object.values(stations).forEach(station => {\n                [x, y] = convertRealToD3([station.pos_x, station.pos_y], this.d3)\n                station = {\n                    ...station,\n                    x: x,\n                    y: y,\n                }\n                stations[station._id] = station\n            })\n            this.props.dispatchUpdateStations(stations, null, this.d3) // Bulk Update\n\n            //// Apply the event translation to each position\n            Object.values(positions).forEach(position => {\n                [x, y] = convertRealToD3([position.pos_x, position.pos_y], this.d3)\n                position = {\n                    ...position,\n                    x: x,\n                    y: y,\n                }\n                // TODO: Delete\n                // Object.assign(position, { x, y })\n                positions[position._id] = position\n            })\n            this.props.dispatchUpdatePositions(positions, null, null, this.d3) // Bulk Update\n\n            //// Apply the event translation to each mobile device\n            Object.values(devices).filter(device => device.device_model == 'MiR100').map(device => {\n                [x, y] = convertRealToD3([device.position.pos_x, device.position.pos_y], this.d3)\n                device.position = {\n                    ...device.position,\n                    x: x,\n                    y: y,\n                }\n                devices[device._id] = device\n            })\n            this.props.dispatchUpdateDevices(devices, this.d3) // Bulk Update\n\n        } else {\n            translate = this.props.translate\n        }\n\n        // Set the initial map translation\n        const map = d3.selectAll(`.${this.rd3tMapClassName}`)\n        map.attr('transform', `translate(${translate.x},${translate.y}) scale(${scale})`)\n\n    }\n\n    // This handles the event when an onContextMenu is triggered in the svg containing the map\n    // It prevents the defaul menu for appearing and sets the state for the custom menu to appear\n    // Passes along x and y for the cusotm menu\n    // Go to right_click_menu to follow how the click logic works\n    handleRightClickMenu = (e) => {\n        e.preventDefault()\n        this.setState({ showRightClickMenu: { x: e.clientX, y: e.clientY } });\n    }\n\n\n    render() {\n        let { stations, positions, devices, selectedStation, selectedPosition, selectedStationChildrenCopy, deviceEnabled } = this.props\n        const { hasStartAndEnd } = this.state\n        if (this.state.currentMap == null) {\n\n           return (<></>)\n          }\n        const { translate, scale } = this.d3;\n\n        return (\n\n            <div style={{ width: '100%', height: '100%' }} onMouseMove={this.dragNewEntity} onMouseUp={this.validateNewLocation} >\n                <styled.MapContainer ref={mc => (this.mapContainer = mc)} style={{ touchAction: 'none', pointerEvents: this.widgetDraggable ? 'default' : 'none' }} >\n                  <Suspense fallback = {<></>}>\n                    <MapApps />\n                  </Suspense>\n\n                    {/* Commented out for now */}\n                    {/* <Zones/> */}\n\n                    {/* Right menu */}\n                    {Object.keys(this.state.showRightClickMenu).length > 0 &&\n                      <Suspense fallback = {<></>}>\n                        <RightClickMenu coords={this.state.showRightClickMenu} buttonClicked={() => { this.setState({ showRightClickMenu: {} }) }} d3={this.d3} />\n                      </Suspense>\n                    }\n\n                    {/* SVG element is the container for the whole view. This allows the view to be moved as one */}\n                    <svg\n                        className={this.rd3tSvgClassName}\n                        width=\"100%\"\n                        height=\"100%\"\n\n                        // onClick only registers on left click so this works as a way to hide the menu\n                        onClick={() => { this.setState({ showRightClickMenu: {} }) }}\n                        onContextMenu={(e) => { this.handleRightClickMenu(e) }}\n\n                        // These 2 mouse events are used to remove the issue when moving the mouse too fast over a location causing a widget to load, but not fast enough for the onmouselave to execute\n                        onMouseEnter={() => {\n                            if (!!this.props.widgetLoaded) {\n                                // If there is a selected location and its not the right click menu location then hide\n                                // should always show widget if its the right click menu\n                                if ((!!this.props.selectedStation || (!!this.props.selectedPosition && this.props.selectedPosition.schema !== 'temporary_position')) && (!this.props.editingStation || !this.props.editingPosition)) {\n                                    this.props.dispatchHoverStationInfo(null)\n                                    this.props.dispatchSetSelectedStation(null)\n                                    this.props.dispatchSetSelectedPosition(null)\n                                }\n                            }\n                        }}\n                        onMouseOver={() => {\n                            if (!!this.props.widgetLoaded) {\n                                // If there is a selected location and its not the right click menu location then hide\n                                // should always show widget if its the right click menu\n                                if ((!!this.props.selectedStation || (!!this.props.selectedPosition && this.props.selectedPosition.schema !== 'temporary_position'))) {\n                                    this.props.dispatchHoverStationInfo(null)\n\n                                    if (!this.props.editingStation || !this.props.editingPosition) {\n                                        this.props.dispatchSetSelectedStation(null)\n                                        this.props.dispatchSetSelectedPosition(null)\n                                    }\n                                }\n                            }\n                        }}\n\n                    > {/* Clears any unfinished drag events (ex: moving location) */}\n                        <styled.MapGroup\n                            className={this.rd3tMapClassName}\n\n                        >\n                            {/* Foreign object allows an image to be put in the SVG container */}\n                            <foreignObject width='200%' height='200%' >\n                                {!!this.state.currentMap &&\n                                    <styled.MapImage ref={mi => (this.mapImage = mi)}\n                                        tall={!!this.mapContainer && // Fixes the map sizing - cutoff issue\n                                            this.mapContainer.getBoundingClientRect().height / this.naturalImageDimensions.height\n                                            >\n                                            this.mapContainer.getBoundingClientRect().width / this.naturalImageDimensions.width}\n\n                                        src={'data:image/png;base64, ' + this.state.currentMap.map}\n                                        onLoad={() => {\n\n                                            this.naturalImageDimensions = {\n                                                height: this.mapImage.naturalHeight,\n                                                width: this.mapImage.naturalWidth\n                                            }\n                                            // Geometry changes once the image finishes loading, so the geometry needs to be reclaculated\n                                            // and the zoom listener needs to be re-bound to the new translations\n                                            this.calculateD3Geometry()\n                                            this.setState({\n                                                resolution: this.state.currentMap.resolution\n                                            }, () => this.bindZoomListener())\n                                        }}\n                                    >\n                                    </styled.MapImage>\n                                }\n                            </foreignObject>\n                        </styled.MapGroup>\n\n                        {(!!this.props.selectedTask || !!this.props.selectedHoveringTask) &&\n                          <Suspense fallback = {<></>}>\n                            <TaskPaths d3={this.d3} />\n                          </Suspense>\n                        }\n\n                        {!!this.props.selectedProcess &&\n                          <Suspense fallback = {<></>}>\n                            <ProcessPaths d3={this.d3} />\n                          </Suspense>\n                        }\n\n                        <defs>\n                            {/* a transparent glow that takes on the colour of the object it's applied to */}\n                            <filter id=\"glow\">\n                                <feGaussianBlur stdDeviation=\"1\" result=\"coloredBlur\" />\n                                <feMerge>\n                                    <feMergeNode in=\"coloredBlur\" />\n                                    <feMergeNode in=\"SourceGraphic\" />\n                                </feMerge>\n                            </filter>\n                        </defs>\n\n                        {!!this.state.resolution && !!this.mapImage &&\n                            <>\n\n                                {this.props.settings.mapApps.heatmap &&\n                                    <HeatMap map_id={this.state.currentMap?._id} d3Scale={this.d3.scale} />\n                                }\n\n                                {this.props.settings.mapApps.ratsnest &&\n                                    <RatsNest map_id={this.state.currentMap?._id} d3Scale={this.d3.scale} />\n                                }\n\n\n\n                                <>{\n                                    //// Render Locations\n                                    Object.values(stations)\n                                        .filter(station => (station.map_id === this.state.currentMap?._id))\n                                        .map((station, ind) =>\n\n                                            <Station\n                                                key={`loc-${ind}`}\n                                                // If there is a selected station, then render the selected station vs station in redux\n                                                // Selected station could contain local edits that are not on the backend (naked redux) yet\n                                                station={(!!selectedStation && station._id === selectedStation._id) ? selectedStation : station}\n                                                isSelected={(!!selectedStation && station._id === selectedStation._id)}\n                                                // station={station}\n                                                rd3tClassName={`${this.rd3tStationClassName}_${ind}`}\n                                                d3={this.d3}\n                                                handleEnableDrag={this.onEnableDrag}\n                                                handleDisableDrag={this.onDisableDrag}\n                                                // Mouse down is used to disabling hovering when the mouse is down on the map\n                                                mouseDown={this.mouseDown}\n                                            />\n                                        )\n                                }</>\n\n                                <>{\n                                    //// Render children positions if appropriate\n                                    Object.values(positions)\n                                        .filter(position => (position.map_id === this.state.currentMap?._id))\n                                        .map((position, ind) =>\n                                            <Position\n                                                key={`pos-${ind}`}\n                                                position={\n                                                    (!!selectedPosition && position._id === selectedPosition._id) ?\n                                                        // If there is a selected station, then render the selected station vs station in redux\n                                                        // Selected station could contain local edits that are not on the backend (naked redux) yet\n                                                        selectedPosition\n                                                        :\n                                                        // If the positions parent is currently being edited\n                                                        (!!selectedStationChildrenCopy && position._id in selectedStationChildrenCopy) ?\n                                                            selectedStationChildrenCopy[position._id]\n                                                            :\n                                                            position\n                                                }\n                                                rd3tClassName={`${this.rd3tPosClassName}_${ind}`}\n                                                d3={this.d3}\n                                                handleEnableDrag={this.onEnableDrag}\n                                                handleDisableDrag={this.onDisableDrag}\n                                                // Mouse down is used to disabling hovering when the mouse is down on the map\n                                                mouseDown={this.mouseDown}\n                                            />\n\n                                        )\n                                }</>\n\n                                <>{\n                                    //// Render mobile devices\n                                    (devices === undefined || !deviceEnabled) ?\n                                        <></>\n                                        :\n                                        Object.values(devices).filter(device => device.device_model == 'MiR100').map((device, ind) =>\n                                            <>\n                                                {device.connected == true &&\n                                                  <Suspense fallback = {<></>}>\n                                                    <MiR100 key={device._id}\n                                                        device={device}\n                                                        d3={this.d3}\n                                                    />\n                                                  </Suspense>\n                                                }\n                                            </>\n\n                                        )\n                                }</>\n                            </>\n                        }\n                    </svg>\n\n                    {/* {(!!this.props.selectedTask || !!this.props.selectedHoveringTask) &&\n                      <Suspense fallback = {<></>}>\n                        <TaskStatistics d3={this.d3} />\n                      </Suspense>\n                    } */}\n\n                    {/* {!!this.props.showRouteConfirmation &&\n                      <Suspense fallback = {<></>}>\n                        <RouteConfirmation d3={this.d3} />\n                      </Suspense>\n                    } */}\n\n                    {!!this.props.devices &&\n                        Object.values(this.props.devices).map((device) => {\n                            if (!!device.current_task_queue_id && !!this.props.taskQueue[device.current_task_queue_id] && !!this.props.taskQueue[device.current_task_queue_id].custom_task && !!this.props.taskQueue[device.current_task_queue_id].custom_task.coordinate) {\n                                const [x, y] = convertRealToD3([this.props.taskQueue[device.current_task_queue_id].custom_task.coordinate.pos_x, this.props.taskQueue[device.current_task_queue_id].custom_task.coordinate.pos_y], this.d3)\n\n                                return (\n                                    <CartWaypoint\n                                        x={x}\n                                        y={y}\n                                    />\n                                )\n                            }\n                        })\n                    }\n\n                    {/* Widgets are here when not in mobile mode. If mobile mode, then they are in App.js.\n                    The reasoning is that the map unmounts when in a widget while in mobile mode (for performance reasons). */}\n                    {this.props.hoveringInfo !== null && !this.mobileMode &&\n                      <Suspense fallback = {<></>}>\n                        <Widgets />\n                      </Suspense>\n                    }\n\n\n                </styled.MapContainer>\n\n            </div >\n\n     )\n    }\n}\n\nMapView.defaultProps = {\n    scaleExtent: { min: 0, max: 6 },\n    zoomable: true,\n    zoom: 1,\n    translate: { x: 0, y: 0 },\n\n}\n\nconst mapStateToProps = function (state) {\n    return {\n        maps: state.mapReducer.maps,\n        localSettings: state.localReducer.localSettings,\n        deviceEnabled: false,\n        settings: state.settingsReducer.settings,\n\n        devices: state.devicesReducer.devices,\n        positions: state.positionsReducer.positions,\n        stations: state.stationsReducer.stations,\n        tasks: state.tasksReducer.tasks,\n        taskQueue: state.taskQueueReducer.taskQueue,\n        showRouteConfirmation: state.tasksReducer.showRouteConfirmation,\n\n        selectedStation: state.stationsReducer.selectedStation,\n        selectedStationChildrenCopy: state.positionsReducer.selectedStationChildrenCopy,\n        selectedPosition: state.positionsReducer.selectedPosition,\n        editingStation: state.stationsReducer.editingStation,\n        editingPosition: state.positionsReducer.editingPosition,\n\n        selectedTask: state.tasksReducer.selectedTask,\n        selectedHoveringTask: state.tasksReducer.selectedHoveringTask,\n        editingTask: state.tasksReducer.editingTask,\n        selectedProcess: state.processesReducer.selectedProcess,\n        fixingProcess: state.processesReducer.fixingProcess,\n\n        hoveringInfo: state.widgetReducer.hoverStationInfo,\n        widgetLoaded: state.widgetReducer.widgetLoaded,\n\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        dispatchGetMap: (map_id) => dispatch(getMap(map_id)),\n        dispatchSetCurrentMap: (map) => dispatch(setCurrentMap(map)),\n        dispatchPostSettings: (settings) => dispatch(postSettings(settings)),\n        dispatchPostLocalSettings: (settings) => dispatch(postLocalSettings(settings)),\n\n        dispatchUpdateStations: (stations, selectedStation, d3) => dispatch(updateStations(stations, selectedStation, d3)),\n        dispatchUpdatePositions: (positions, selectedPosition, childrenPositions, d3) => dispatch(updatePositions(positions, selectedPosition, childrenPositions, d3)),\n        dispatchUpdateDevices: (devices, d3) => dispatch(deviceActions.updateDevices(devices, d3)),\n\n        dispatchPostPosition: (position) => dispatch(postPosition(position)),\n        dispatchSetStationAttributes: (id, attr) => dispatch(setStationAttributes(id, attr)),\n        dispatchSetPositionAttributes: (id, attr) => dispatch(setPositionAttributes(id, attr)),\n        dispatchSetSelectedStation: (station) => dispatch(setSelectedStation(station)),\n        dispatchSetSelectedPosition: (position) => dispatch(setSelectedPosition(position)),\n\n        dispatchHoverStationInfo: (info) => dispatch(hoverStationInfo(info)),\n        dispatchWidgetLoaded: (bool) => dispatch(widgetLoaded(bool)),\n\n\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MapView))\n","import {\n    SET_MODE,\n    SET_ACTION,\n    SET_WIDTH,\n    SET_OPEN,\n    PAGE_DATA_CHANGED, SET_CONFIRM_DELETE,\n    SHOW_LOT_SCAN_MODAL,\n} from '../types/sidebar_types'\n\nexport const setMode = (mode) => {\n    return { type: SET_MODE, payload: {mode}}\n}\n\nexport const setAction = (action) => {\n    return { type: SET_ACTION, payload: {action} }\n}\n\nexport const setWidth = (width) => {\n    return { type: SET_WIDTH, payload: width }\n}\n\nexport const setOpen = (state) => {\n    return { type: SET_OPEN, payload: state}\n}\n\nexport const pageDataChanged = (state) => {\n    return { type: PAGE_DATA_CHANGED, payload: state}\n}\n\nexport const setConfirmDelete = (show, callback) => {\n    return { type: SET_CONFIRM_DELETE, payload: {show, callback}}\n}\n\nexport const showLotScanModal = (show) => {\n    return { type: SHOW_LOT_SCAN_MODAL, payload: show }\n}\n","import React from 'react'\nimport uuid from 'uuid'\n\nconst positionColor = '#2adba6';\n\nexport const PositionTypes = {\n\n    /**\n     * Heads up, currently there are 2 different svg rectangles being used\n     * One thats width is 200 and height is 320\n     * One thats width is 378 and height 236\n     *\n     * Need to unify this and make all of them standard\n     * Probably use the 200 by 320 since you don't need to add a 'y' offset to the svg\n     *\n     *  */\n\n    shelf_position: {\n        svgPath:\n            <svg>\n                <rect fill='transparent' x=\"100\" y=\"40\" width=\"200\" height=\"320\" rx=\"30\" transform=\"translate(400 0) rotate(90)\" strokeMiterlimit=\"10\" strokeWidth=\"20\" />\n                <g y=\"65\" transform=\"scale(0.87) translate(35, 100)\">\n                    <path d=\"M263.53,56.31l33,47a10,10,0,0,1-8.18,15.74h-66a10,10,0,0,1-8.19-15.74l33-47A10,10,0,0,1,263.53,56.31Z\" />\n                    <path d=\"M142.71,56.31l33,47a10,10,0,0,1-8.19,15.74h-66a10,10,0,0,1-8.18-15.74l33-47A10,10,0,0,1,142.71,56.31Z\" />\n                \n                    <circle cx=\"255.44\" cy=\"146.56\" r=\"12.5\" />\n                    <circle cx=\"255.44\" cy=\"181.56\" r=\"7.5\" />\n                    <circle cx=\"134.44\" cy=\"146.56\" r=\"12.5\" />\n                    <circle cx=\"134.44\" cy=\"181.56\" r=\"7.5\" />\n                </g>\n            </svg>,\n        attributes:\n        {\n            schema: 'position',\n            type: 'shelf_position',\n            parent: null,\n            new: true,\n        },\n        color: positionColor,\n\n    },\n\n    charger_position: {\n        svgPath:\n            <svg>\n                <path d=\"M344.75,131.18l-47,33A10,10,0,0,1,282,156V90a10,10,0,0,1,15.75-8.18l47,33A10,10,0,0,1,344.75,131.18Z\" />\n                <rect fill='none' strokeMiterlimit='10' strokeWidth='20px' x=\"5\" y=\"5\" width=\"378\" height=\"236\" rx=\"30\" />\n                <path d=\"M251,171.13c-2.45,3.47-4.09,3.9-8.1,2.12l-73.27-32.63c-.72-.32-1.45-.61-2.47-1v3.15q0,12.9,0,25.81c0,4.89-3,6.91-7.46,5L31.14,118.34c-2.83-1.22-4.08-3.12-3.65-5.47s2.19-3.61,5.09-3.91q29.51-3,59-6c9-.91,17.93-1.86,26.91-2.63,1.81-.15,2.1-.82,2.06-2.38-.09-3.65,0-7.29,0-10.94,0-4.26,1.43-5.77,5.64-6.1q32.61-2.53,65.23-5.1c17.69-1.36,35.38-2.65,53.06-4.08,2.93-.23,5.1.52,6.54,3.12Z\" />\n                <rect fill='transparent' strokeMiterlimit='10' strokeWidth='20px' x=\"10\" y=\"10\" width=\"378\" height=\"236\" rx=\"30\" />\n            </svg>,\n        color: '#fbd34e',\n\n    },\n\n    cart_position: {\n        svgPath:\n            <>\n                <rect fill='transparent' x=\"100\" y=\"40\" width=\"200\" height=\"320\" rx=\"30\" transform=\"translate(400 0) rotate(90)\" strokeMiterlimit=\"10\" strokeWidth=\"20\" />\n                <path d=\"M315.5,200.87l-64,36.95A1,1,0,0,1,250,237v-73.9a1,1,0,0,1,1.5-.87l64,36.95A1,1,0,0,1,315.5,200.87Z\" strokeMiterlimit=\"10\" strokeWidth=\"10\" />\n                <circle cx=\"200\" cy=\"200\" r=\"15\" />\n                <circle cx=\"150\" cy=\"200\" r=\"10\" />\n                <circle cx=\"102.5\" cy=\"200\" r=\"7.5\" />\n            </>,\n        attributes:\n        {\n            schema: 'position',\n            type: 'cart_position',\n            parent: null,\n            new: true,\n        },\n        color: positionColor,\n    },\n\n    temporary_cart_position: {\n        svgPath:\n            <>\n                <rect fill='transparent' x=\"100\" y=\"40\" width=\"200\" height=\"320\" rx=\"30\" transform=\"translate(400 0) rotate(90)\" strokeMiterlimit=\"10\" strokeWidth=\"20\" />\n                <path d=\"M315.5,200.87l-64,36.95A1,1,0,0,1,250,237v-73.9a1,1,0,0,1,1.5-.87l64,36.95A1,1,0,0,1,315.5,200.87Z\" strokeMiterlimit=\"10\" strokeWidth=\"10\" />\n                <circle cx=\"200\" cy=\"200\" r=\"15\" />\n                <circle cx=\"150\" cy=\"200\" r=\"10\" />\n                <circle cx=\"102.5\" cy=\"200\" r=\"7.5\" />\n            </>,\n        attributes:\n        {\n            schema: 'temporary_position',\n            type: 'cart_position',\n            parent: null,\n            new: true,\n        },\n        color: '#6283f0',\n    },\n\n    // human_position: {\n    //     svgPath:\n    //         // <svg y=\"70\">\n    //         //     <rect fill='transparent' strokeMiterlimit='10' strokeWidth='20px' x=\"10\" y=\"10\" width=\"378\" height=\"236\" rx=\"30\" />\n    //         //     <path d=\"M194,123a49.63,49.63,0,1,0-49.62-49.63A49.62,49.62,0,0,0,194,123Zm34.74,12.41h-6.48a67.51,67.51,0,0,1-56.52,0h-6.48a52.12,52.12,0,0,0-52.1,52.1v16.13a18.61,18.61,0,0,0,18.61,18.61H262.23a18.61,18.61,0,0,0,18.61-18.61V187.51A52.12,52.12,0,0,0,228.74,135.41Z\" />\n    //         // </svg>,\n    //         <svg y=\"50\" x='50'>\n    //             <rect width=\"300\" height=\"300\" rx=\"30\" />\n    //             <path fill='#3B3C43' d=\"M150,150A56.07,56.07,0,1,0,93.94,93.94,56.05,56.05,0,0,0,150,150Zm39.24,14h-7.31a76.32,76.32,0,0,1-63.86,0h-7.31a58.88,58.88,0,0,0-58.87,58.86V241.1a21,21,0,0,0,21,21H227.09a21,21,0,0,0,21-21V222.88A58.88,58.88,0,0,0,189.24,164Z\" />\n    //         </svg>,\n    //     attributes:\n    //     {\n    //         schema: 'station',\n    //         type: 'human',\n    //         parent: null,\n    //         new: true,\n    //     },\n    //     color: '#5eec33',\n    // },\n\n}\n\nexport const newPositionTemplate = (name, type, parent, map_id) => {\n\n    return {\n        name: name,\n        schema: 'position',\n        type: type,\n        temp: true,\n        new: true,\n        pos_x: 0,\n        pos_y: 0,\n        rotation: 0,\n        x: 0,\n        y: 0,\n        parent: parent,\n        _id: uuid.v4(),\n        map_id: map_id,\n    }\n}\n","import React from 'react'\n\nimport theme from '../theme';\n\nexport const stationColor = theme.main.schema.locations.solid\n\nexport const StationTypes = {\n\n    /**\n     * Heads up, currently there are 2 different svg rectangles being used\n     * One thats width is 200 and height is 320\n     * One thats width is 378 and height 236\n     *\n     * Need to unify this and make all of them standard\n     * Probably use the 200 by 320 since you don't need to add a 'y' offset to the svg\n     *\n     *  */\n\n    warehouse: {\n        svgPath:\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n                viewBox=\"0 0 400 400\">\n            <path style={{fill:'transparent',strokeWidth:15,strokeMiterlimit:10}} d=\"M334.6,357.6h-260c-16.5,0-30-13.5-30-30v-260c0-16.5,13.5-30,30-30h260c16.5,0,30,13.5,30,30v260\n                C364.6,344.1,351.1,357.6,334.6,357.6z\"/>\n            <g>\n                <path d=\"M224,127c5.1-2.2,9.2-3.9,9.2-3.9s4.1,1.8,9.1,4.1l24.9,11.1c5,2.2,13.3,2.5,18.5,0.6l24.6-9.2\n                    c5.1-1.9,5.2-5.1,0-7l-96.5-36.2c-5.1-1.9-13.6-1.9-18.7,0l-96.5,36.2c-5.1,1.9-5.1,5.1,0,7l96.5,36.2c5.1,1.9,13.6,1.9,18.7,0\n                    l24.4-9.2c5.1-1.9,5.2-5.2,0.1-7.3l-24.6-10.2c-5.1-2.1-9.2-3.8-9.2-3.8c0,0,4.1-1.8,9.2-3.9L224,127z\"/>\n            </g>\n            <g>\n                <path d=\"M98.5,144c-5.1-1.9-9.4,1-9.4,6.5v109.7c0,5.5,4.2,11.6,9.4,13.5l89.3,33.5c5.1,1.9,9.4-1,9.4-6.5V191\n                    c0-5.5-4.2-11.6-9.4-13.5L98.5,144z M146.8,263c0,4.2-4.2,6.1-9.4,4.2l-10.1-3.8c-5.1-1.9-9.4-7-9.4-11.2s4.2-6.1,9.4-4.2\n                    l10.1,3.8C142.5,253.7,146.8,258.7,146.8,263z\"/>\n            </g>\n            <g>\n                <path d=\"M285.8,153.2c-5.1,1.9-9.4,8-9.4,13.5v16.1c0,5.5-4.2,11.6-9.4,13.5l-10.1,3.8c-5.1,1.9-9.4-1-9.4-6.5\n                    v-16.1c0-5.5-4.2-8.4-9.4-6.5l-17.3,6.5c-5.1,1.9-9.4,8-9.4,13.5v109.7c0,5.5,4.2,8.4,9.4,6.5l89.3-33.5c5.1-1.9,9.4-8,9.4-13.5\n                    V150.5c0-5.5-4.2-8.4-9.4-6.5L285.8,153.2z\"/>\n            </g>\n        </svg>,\n\n        attributes:\n        {\n            schema: 'station',\n            type: 'warehouse',\n            children: [],\n            dashboards: [],\n            new: true,\n        },\n        color: stationColor\n    },\n\n    human: {\n        svgPath:\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n                viewBox=\"0 0 400 400\">\n            <path style={{fill:'transparent',strokeWidth:15,strokeMiterlimit:10}} d=\"M334.6,357.6h-260c-16.5,0-30-13.5-30-30v-260c0-16.5,13.5-30,30-30h260c16.5,0,30,13.5,30,30v260\n            C364.6,344.1,351.1,357.6,334.6,357.6z\"/>\n            <path d=\"M205.9,200.2c32.7,0,59.3-26.3,59.3-58.7s-26.5-58.7-59.3-58.7s-59.3,26.3-59.3,58.7S173.1,200.2,205.9,200.2z\n                M247.4,214.9h-7.7c-10.3,4.7-21.7,7.3-33.8,7.3c-12,0-23.4-2.7-33.8-7.3h-7.7c-34.4,0-62.3,27.6-62.3,61.7v19.1\n                c0,12.2,10,22,22.2,22h163c12.3,0,22.2-9.9,22.2-22v-19.1C309.6,242.5,281.7,214.9,247.4,214.9z\"/>\n        </svg>,\n        attributes:\n        {\n            schema: 'station',\n            type: 'human',\n            children: [],\n            dashboards: [],\n            new: true,\n        },\n        color: stationColor,\n    },\n\n}\n","import {\n  WIDGET_PAGE_LOADED,\n  WIDGET_XY_COORDINATES,\n  WIDGET_LOADED,\n  HOVER_STATION_INFO,\n\n} from '../types/widget_types'\n\nexport const widgetPageLoaded = (state) => {\n    return { type: WIDGET_PAGE_LOADED, payload: state}\n}\n\nexport const widgetXYCoordinates = (state) => {\n    return { type: WIDGET_XY_COORDINATES, payload: state}\n}\n\nexport const widgetLoaded = (state) => {\n    return { type: WIDGET_LOADED, payload: state}\n}\n\nexport const hoverStationInfo = (info) => {\n    return { type: HOVER_STATION_INFO, payload: { info } }\n}\n"],"sourceRoot":""}