{"version":3,"sources":["components/widgets/widget_button/widget_button.style.js","components/widgets/widget_button/widget_button.js","constants/station_constants.js"],"names":["WidgetButtonButton","styled","button","props","theme","cardShadow","currentPage","LightenDarkenColor","bg","primary","switcher","active","WidgetButtonText","h4","font","stationColor","quaternary","widthBreakpoint","tablet","WidgetButtonIcon","i","WidgetButton","type","id","coordinateMove","label","history","toggle","useHistory","params","useParams","dispatch","widgetPage","useDispatch","dispatchHandlePostTaskQueue","handlePostTaskQueue","dispatchWidgetLoaded","bol","widgetLoaded","dispatchHoverStationInfo","info","hoverStationInfo","dispatchDashboardOpen","dashboardOpen","dispatchRemovePosition","removePosition","dispatchSetSelectedPosition","position","setSelectedPosition","dispatchSetConfirmDelete","show","callback","sidebarActions","selectedStation","useSelector","state","stationsReducer","selectedPosition","positionsReducer","pageInfoChanged","sidebarReducer","open","pageDataChanged","stations","selectedLocation","dashboardID","onDefaultClick","push","onCartButtonClick","Id","custom","coordinate","pos_x","pos_y","rotation","deviceType","_id","onCancelClick","onDashboardClick","a","stationID","dashboards","undefined","console","log","defaultDashboard","name","locked","buttons","station","dashboard","postDashboard","then","postedDashboard","$oid","ID","putStation","onClick","handleOnClick","pageID","className","style","fontSize","paddingTop","main","schema","locations","solid","StationTypes","warehouse","svgPath","version","xmlns","x","y","viewBox","fill","strokeWidth","strokeMiterlimit","d","attributes","children","new","color","human"],"mappings":"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","file":"static/js/40.31299281.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { stationColor } from '../../../constants/station_constants'\nimport {LightenDarkenColor} from '../../../methods/utils/color_utils';\n\nexport const WidgetButtonButton = styled.button`\n\n    display:flex;\n    flex-direction: column;\n    border: none;\n    outline:none;\n\n    align-items: center;\n    justify-content: center;\n\n\n    width: 4.2rem;\n    height: 4.2rem;\n    border-radius: 50%;\n    background: white;\n    box-shadow: ${props => props.theme.cardShadow};\n\n    transform: translate(-50%, -50%);\n\n    &:focus{\n        outline: 0 !important\n    }\n\n    &:active {\n        box-shadow: none;\n    }\n\n    &:hover{\n      background: ${props => !props.currentPage && LightenDarkenColor(props.theme.bg.primary, -10)};\n  }\n\n    ${props => props.switcher &&\n    `\n        height: 4rem;\n        width: 6rem;\n        border-radius: 0.4rem;\n        transform: none;\n        margin: 0 0.2rem;\n        padding-top: .6rem;\n    `\n    }\n\n    ${props => props.active &&\n    `\n    background: ${props.theme.bg.primary};\n    `\n    }\n`;\nexport const WidgetButtonText = styled.h4`\n    font-size: ${props => props.currentPage ? '.8rem': '0.6rem'};\n    font-family: ${props => props.theme.font.primary};\n    padding-top: ${props=>props.currentPage && '0.2rem'};\n\n    color: ${props=>props.active || !props.currentPage ? stationColor : props.theme.bg.quaternary};\n\n    @media (max-width: ${props => props.theme.widthBreakpoint.tablet}){\n\n    }\n`;\n\n\nexport const WidgetButtonIcon = styled.i`\n    font-size: ${props => props.currentPage ? '2rem': '1.8rem'};\n    color: ${props=>props.active || !props.currentPage ? stationColor : props.theme.bg.quaternary};\n\n    @media (max-width: ${props => props.theme.widthBreakpoint.tablet}){\n        font-size: 2rem;\n    }\n`\n","import React, { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as styled from './widget_button.style'\n\n// Import utils\nimport uuid from 'uuid'\n\n// Import Actions\nimport { postTaskQueue } from '../../../redux/actions/task_queue_actions'\nimport { putStation, setSelectedStationChildrenCopy } from '../../../redux/actions/stations_actions'\nimport { removePosition, setSelectedPosition } from '../../../redux/actions/positions_actions'\nimport { widgetLoaded, hoverStationInfo } from '../../../redux/actions/widget_actions'\nimport { postDashboard, dashboardOpen } from '../../../redux/actions/dashboards_actions'\n\nimport { deepCopy } from '../../../methods/utils/utils'\nimport { handlePostTaskQueue } from \"../../../redux/actions/task_queue_actions\";\nimport * as sidebarActions from \"../../../redux/actions/sidebar_actions\";\n\n\n\nconst WidgetButton = (props) => {\n\n    const {\n        type,\n        currentPage,\n        id,\n        coordinateMove,\n        label,\n        switcher,\n        toggle,\n    } = props\n\n    const history = useHistory()\n    const params = useParams()\n    const widgetPage = params.widgetPage\n\n    const dispatch = useDispatch()\n    const dispatchHandlePostTaskQueue = (props) => dispatch(handlePostTaskQueue(props))\n    const dispatchWidgetLoaded = (bol) => dispatch(widgetLoaded(bol))\n    const dispatchHoverStationInfo = (info) => dispatch(hoverStationInfo(info))\n    const dispatchDashboardOpen = (props) => dispatch(dashboardOpen(props))\n    const dispatchPostDashboard = (dashboard) => dispatch(postDashboard(dashboard))\n    const dispatchPutStation = (station, ID) => dispatch(putStation(station, ID))\n    const dispatchRemovePosition = (id) => dispatch(removePosition(id))\n    const dispatchSetSelectedPosition = (position) => dispatch(setSelectedPosition(position))\n    const dispatchSetConfirmDelete = (show, callback) => dispatch(sidebarActions.setConfirmDelete(show, callback))\n\n    const selectedStation = useSelector(state => state.stationsReducer.selectedStation)\n    const selectedPosition = useSelector(state => state.positionsReducer.selectedPosition)\n    const showSideBar = useSelector(state => state.sidebarReducer.open)\n    const pageInfoChanged = useSelector(state => state.sidebarReducer.pageDataChanged)\n    const stations = useSelector(state => state.stationsReducer.stations)\n    const dashboardID = params.dashboardID\n\n    const selectedLocation = !!selectedStation ? selectedStation : selectedPosition\n\n    const handleOnClick = () => {\n        switch (props.type) {\n            case 'cart':\n                onCartButtonClick()\n                break;\n\n            case 'cancel':\n                onCancelClick()\n                break;\n\n            case 'dashboards':\n                if(pageInfoChanged) {\n                    dispatchSetConfirmDelete(true, onDashboardClick)\n                }\n                else {\n                    onDashboardClick()\n                }\n                break;\n\n            default:\n                if(pageInfoChanged) {\n                    dispatchSetConfirmDelete(true, onDefaultClick)\n                }\n                else {\n                    onDefaultClick()\n                }\n\n                break;\n        }\n    }\n\n    const onDefaultClick = () => {\n        history.push('/locations/' + id + '/' + type)\n    }\n\n    // Handles  if the widget button clicked was a cart\n    const onCartButtonClick = () => {\n        // If the button is for cart, then see if its a coord move or a simple task move\n        // Coord move is for right click send cart to pos\n        if (!!coordinateMove) {\n            dispatchHandlePostTaskQueue({\n                Id: 'custom_task',\n                custom: {\n                    type: 'coordinate_move',\n                    coordinate: {\n                        pos_x: selectedLocation.pos_x,\n                        pos_y: selectedLocation.pos_y,\n                        rotation: selectedLocation.rotation,\n                    },\n                },\n                deviceType: 'MiR_100',\n            })\n            dispatchWidgetLoaded(false)\n            dispatchHoverStationInfo(null)\n            dispatchRemovePosition(selectedPosition._id)\n            dispatchSetSelectedPosition(null)\n        }\n        else {\n            dispatchHandlePostTaskQueue({\n                Id: 'custom_task',\n                custom: {\n                    type: 'position_move',\n                    position: id,\n\n                },\n                deviceType: 'MiR_100',\n            })\n        }\n    }\n\n    // Handles if the widget button clicked was cancel\n    const onCancelClick = () => {\n        dispatchWidgetLoaded(false)\n        dispatchHoverStationInfo(null)\n        dispatchRemovePosition(selectedPosition._id)\n        dispatchSetSelectedPosition(null)\n    }\n\n    // Handles if a dashboard is clicked\n    const onDashboardClick = async () => {\n        let dashboardID\n\n        // If there's no selected station, then see if theres a station in the url, if so, use that, else do nothing\n        if (!selectedLocation) {\n            if (!!params.stationID) {\n                dashboardID = stations[params.stationID].dashboards[0]\n            } else {\n                return null\n            }\n        } else {\n            dashboardID = selectedLocation.dashboards[0]\n        }\n\n        //let dashboardID = selectedLocation ? selectedLocation.dashboards[0] : null\n\n        // If the dashboard is undefined, that means the location must not have a dashboard yet, so add one\n        if (dashboardID === undefined) {\n            console.log('QQQQ No dashboard ADDING!')\n\n            // dashboardInfo\n            let defaultDashboard = {\n                name: selectedLocation.name + ' Dashboard',\n                locked: false,\n                buttons: [],\n                station: selectedLocation._id\n            }\n\n            //// Now post the dashboard, and on return tie that dashboard to location.dashboards and put the location\n            const postDashboardPromise = dispatchPostDashboard(defaultDashboard)\n\n            postDashboardPromise.then(async postedDashboard => {\n\n                selectedLocation.dashboards = [postedDashboard._id.$oid]\n\n                await dispatchPutStation(selectedLocation, selectedLocation._id)\n\n                history.push('/locations/' + id + '/' + type + '/' + dashboardID)\n\n            })\n        }\n        else {\n            history.push('/locations/' + id + '/' + type + '/' + dashboardID)\n        }\n\n        dispatchDashboardOpen(true)\n    }\n\n    return (\n        <styled.WidgetButtonButton\n            onClick={() => {\n\n                handleOnClick()\n\n            }}\n            switcher={switcher}\n            pageID={type}\n            currentPage={currentPage}\n            active={type === currentPage}\n        >\n            {type === 'view' ?\n                <styled.WidgetButtonIcon className=\"far fa-eye\" pageID={type} currentPage={currentPage} />\n                :\n                type === 'cancel' ?\n                    <>\n                    <styled.WidgetButtonIcon className=\"fas fa-times\" pageID={type} currentPage={currentPage} active={type === currentPage} />\n                    <styled.WidgetButtonText pageID={type} currentPage={currentPage}>{\"Cancel\"} active={type === currentPage}</styled.WidgetButtonText>\n                    </>\n                    :\n                    type === 'lots' ?\n                        <>\n                        <styled.WidgetButtonIcon className=\"far fa-clone\" pageID={type} currentPage={currentPage} active={type === currentPage} />\n                        <styled.WidgetButtonText pageID={type} currentPage={currentPage} active={type === currentPage}>{label}</styled.WidgetButtonText>\n                        </>\n                        :\n                        <>\n                        <styled.WidgetButtonIcon style={{ fontSize: type === 'cart' && '1.2rem', paddingTop: type === 'cart' && '.8rem' }} className={\"icon-\" + type} pageID={type} currentPage={currentPage} active={type === currentPage} />\n                        <styled.WidgetButtonText pageID={type} currentPage={currentPage} active={type === currentPage}>{label}</styled.WidgetButtonText>\n                        </>\n            }\n            {/* <styled.ButtonText>{props.type}</styled.ButtonText> */}\n\n        </styled.WidgetButtonButton>\n    )\n}\n\nexport default WidgetButton\n","import React from 'react'\n\nimport theme from '../theme';\n\nexport const stationColor = theme.main.schema.locations.solid\n\nexport const StationTypes = {\n\n    /**\n     * Heads up, currently there are 2 different svg rectangles being used\n     * One thats width is 200 and height is 320\n     * One thats width is 378 and height 236\n     *\n     * Need to unify this and make all of them standard\n     * Probably use the 200 by 320 since you don't need to add a 'y' offset to the svg\n     *\n     *  */\n\n    warehouse: {\n        svgPath:\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n                viewBox=\"0 0 400 400\">\n            <path style={{fill:'transparent',strokeWidth:15,strokeMiterlimit:10}} d=\"M334.6,357.6h-260c-16.5,0-30-13.5-30-30v-260c0-16.5,13.5-30,30-30h260c16.5,0,30,13.5,30,30v260\n                C364.6,344.1,351.1,357.6,334.6,357.6z\"/>\n            <g>\n                <path d=\"M224,127c5.1-2.2,9.2-3.9,9.2-3.9s4.1,1.8,9.1,4.1l24.9,11.1c5,2.2,13.3,2.5,18.5,0.6l24.6-9.2\n                    c5.1-1.9,5.2-5.1,0-7l-96.5-36.2c-5.1-1.9-13.6-1.9-18.7,0l-96.5,36.2c-5.1,1.9-5.1,5.1,0,7l96.5,36.2c5.1,1.9,13.6,1.9,18.7,0\n                    l24.4-9.2c5.1-1.9,5.2-5.2,0.1-7.3l-24.6-10.2c-5.1-2.1-9.2-3.8-9.2-3.8c0,0,4.1-1.8,9.2-3.9L224,127z\"/>\n            </g>\n            <g>\n                <path d=\"M98.5,144c-5.1-1.9-9.4,1-9.4,6.5v109.7c0,5.5,4.2,11.6,9.4,13.5l89.3,33.5c5.1,1.9,9.4-1,9.4-6.5V191\n                    c0-5.5-4.2-11.6-9.4-13.5L98.5,144z M146.8,263c0,4.2-4.2,6.1-9.4,4.2l-10.1-3.8c-5.1-1.9-9.4-7-9.4-11.2s4.2-6.1,9.4-4.2\n                    l10.1,3.8C142.5,253.7,146.8,258.7,146.8,263z\"/>\n            </g>\n            <g>\n                <path d=\"M285.8,153.2c-5.1,1.9-9.4,8-9.4,13.5v16.1c0,5.5-4.2,11.6-9.4,13.5l-10.1,3.8c-5.1,1.9-9.4-1-9.4-6.5\n                    v-16.1c0-5.5-4.2-8.4-9.4-6.5l-17.3,6.5c-5.1,1.9-9.4,8-9.4,13.5v109.7c0,5.5,4.2,8.4,9.4,6.5l89.3-33.5c5.1-1.9,9.4-8,9.4-13.5\n                    V150.5c0-5.5-4.2-8.4-9.4-6.5L285.8,153.2z\"/>\n            </g>\n        </svg>,\n\n        attributes:\n        {\n            schema: 'station',\n            type: 'warehouse',\n            children: [],\n            dashboards: [],\n            new: true,\n        },\n        color: stationColor\n    },\n\n    human: {\n        svgPath:\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n                viewBox=\"0 0 400 400\">\n            <path style={{fill:'transparent',strokeWidth:15,strokeMiterlimit:10}} d=\"M334.6,357.6h-260c-16.5,0-30-13.5-30-30v-260c0-16.5,13.5-30,30-30h260c16.5,0,30,13.5,30,30v260\n            C364.6,344.1,351.1,357.6,334.6,357.6z\"/>\n            <path d=\"M205.9,200.2c32.7,0,59.3-26.3,59.3-58.7s-26.5-58.7-59.3-58.7s-59.3,26.3-59.3,58.7S173.1,200.2,205.9,200.2z\n                M247.4,214.9h-7.7c-10.3,4.7-21.7,7.3-33.8,7.3c-12,0-23.4-2.7-33.8-7.3h-7.7c-34.4,0-62.3,27.6-62.3,61.7v19.1\n                c0,12.2,10,22,22.2,22h163c12.3,0,22.2-9.9,22.2-22v-19.1C309.6,242.5,281.7,214.9,247.4,214.9z\"/>\n        </svg>,\n        attributes:\n        {\n            schema: 'station',\n            type: 'human',\n            children: [],\n            dashboards: [],\n            new: true,\n        },\n        color: stationColor,\n    },\n\n}\n"],"sourceRoot":""}