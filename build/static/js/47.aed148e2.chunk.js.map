{"version":3,"sources":["components/side_bar/content/statistics/statistics.style.js","components/side_bar/content/statistics/statistics.js"],"names":["Container","styled","div","props","theme","bg","secondary","StationColumnsContainer","commonCss","StationColumns","lazy","Header","StatisticsHeader","Statistics","params","useParams","page","id","subpage","themeContext","useContext","ThemeContext","processes","useSelector","state","processesReducer","useState","dateIndex","setDateIndex","timeSpan","setTimeSpan","showReport","setShowReport","date","setDate","loading","setLoading","label","value","sortLevel","setSortLevel","onTimeSpan","newTimeSpan","newDateIndex","a","onSelectSort","sort","fallback","title","showBackButton","handleTimeSpan","index","handleSetShowReport","bool","handleSelectSort","processesToRender","push","Object","values","forEach","process","showStatistics","_id","map","processId","setDateTitle","dataLoading","renderStationColumns"],"mappings":"+NAKaA,G,OAAYC,IAAOC,IAAV,8IAIE,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,GAAGC,cAInCC,EAA0BN,IAAOC,IAAV,8IAIZ,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,GAAGC,a,GAIpBL,IAAOC,IAAV,kEACnBM,K,MCTAC,EAAiBC,gBAAK,kBAAM,8EAC5BC,EAASD,gBAAK,kBAAM,mCACpBE,EAAmBF,gBAAK,kBAAM,8EAgHrBG,UA9GI,WAEf,IAAIC,EAASC,cAETC,EAGAF,EAHAE,KAEAC,GACAH,EAFAI,QAEAJ,EADAG,IAEEE,EAAeC,qBAAWC,KAE1BC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAAiBH,aAVzC,EAYaI,mBAAS,GAZtB,mBAYdC,EAZc,KAYHC,EAZG,OAaWF,mBAAS,OAbpB,mBAadG,EAbc,KAaJC,EAbI,OAceJ,oBAAS,GAdxB,mBAcdK,EAdc,KAcFC,EAdE,OAeGN,mBAAS,IAfZ,mBAedO,EAfc,KAeRC,EAfQ,OAgBSR,oBAAS,GAhBlB,mBAgBdS,EAhBc,KAgBLC,EAhBK,OAiBaV,mBAAS,CAACW,MAAO,gBAAiBC,MAAO,qBAjBtD,mBAiBdC,EAjBc,KAiBHC,EAjBG,KA+BfC,EAAU,uCAAG,WAAOC,EAAaC,GAApB,SAAAC,EAAA,sDAEfd,EAAYY,GACZd,EAAae,GACbb,EAAYY,GAJG,2CAAH,wDAQVG,EAAY,uCAAG,WAAOC,GAAP,SAAAF,EAAA,sDACjBJ,EAAaM,GADI,2CAAH,sDAwClB,OACE,cAAC,WAAD,CAAUC,SAAY,6BAAtB,SACE,eAAC,EAAD,WACI,cAACpC,EAAD,CACIqC,MAAO,qBACPC,eAAyB,cAATjC,IAEpB,cAACJ,EAAD,CACIO,aAAcA,EACdgB,QAASA,EACTe,eAAgB,SAACrB,EAAUsB,GACvBV,EAAWZ,EAAUsB,IAEzBtB,SAAUA,EACVuB,oBAAqB,SAAAC,GAAI,OAAIrB,EAAcqB,IAC3CtB,WAAYA,EACZE,KAAMA,EACNN,UAAWA,EACX2B,iBAAkBT,EAClBN,UAAWA,IAEf,cAAC,EAAD,UAxDqB,WAEzB,IAAIgB,EAAoB,GAiBxB,MAda,cAATvC,EACAuC,EAAkBC,KAAKvC,GAIvBwC,OAAOC,OAAOpC,GACbqC,SAAQ,SAAAC,GACFA,EAAQC,gBACXN,EAAkBC,KAAKI,EAAQE,QAMhCP,EAAkBQ,KAAI,SAACC,GAC1B,OACI,cAACvD,EAAD,CAEIuD,UAAWA,EACXC,aAAc,SAACjB,GAAD,OAAWd,EAAQc,IACjCkB,YAAa,SAAA/B,GAAO,OAAIC,EAAWD,IACnCR,UAAWA,EACXE,SAAUA,EACVE,WAAYA,EACZQ,UAAWA,GAPNyB,MAmCRG","file":"static/js/47.aed148e2.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\nimport * as layoutCss from '../../../../common_css/layout';\nimport * as commonCss from '../../../../common_css/common_css'\nimport * as buttonCss from '../../../../common_css/button_css'\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    background-color: ${props => props.theme.bg.secondary};\n    overflow: hidden;\n`\n\nexport const StationColumnsContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    background-color: ${props => props.theme.bg.secondary};\n    overflow-y: auto;\n`\n\nexport const RowContainer = styled.div`\n    ${commonCss.rowContainer}\n    justify-content: center;\n`\n\n","import React, { useEffect, useState, useRef, useContext, memo, lazy, Suspense } from 'react';\nimport { useLocation, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// Import Styles\nimport * as styled from './statistics.style'\nimport { ThemeContext } from 'styled-components';\n\n// Import Components\n//import StationColumns from './station_columns/station_columns'\n//import Header from '../cards/summary_header/summary_header'\n//import StatisticsHeader from './statistics_header/statistics_header'\n\nconst StationColumns = lazy(() => import('./station_columns/station_columns'))\nconst Header = lazy(() => import('../cards/summary_header/summary_header'))\nconst StatisticsHeader = lazy(() => import('./statistics_header/statistics_header'))\n\nconst Statistics = () => {\n\n    let params = useParams()\n    const {\n        page,\n        subpage,\n        id\n    } = params\n    const themeContext = useContext(ThemeContext);\n\n    const processes = useSelector(state => state.processesReducer.processes)\n\n    const [dateIndex, setDateIndex] = useState(0)\n    const [timeSpan, setTimeSpan] = useState('day')\n    const [showReport, setShowReport] = useState(false)\n    const [date, setDate] = useState('')\n    const [loading, setLoading] = useState(false)\n    const [sortLevel, setSortLevel] = useState({label: \"Product Group\", value: \"product_group_id\"})\n\n    /**\n     * Gets the new data based on the selected time span and dateIndex\n     *\n     * TimeSpan:\n     * Can be either Day, Week, Month or Year\n     *\n     * DateIndex:\n     * The current date (today) index is 0, if you want to go back to the past date, the index would be 1\n     *\n     * @param {*} newTimeSpan\n     * @param {*} newDateIndex\n     */\n    const onTimeSpan = async (newTimeSpan, newDateIndex) => {\n\n        setTimeSpan(newTimeSpan)\n        setDateIndex(newDateIndex)\n        setTimeSpan(newTimeSpan)\n\n    }\n\n    const onSelectSort = async (sort) => {\n        setSortLevel(sort)\n    }\n\n    // Renders stations in a process\n    const renderStationColumns = () => {\n\n        let processesToRender = []\n\n        // If just in process page, push the current process\n        if (page === 'processes') {\n            processesToRender.push(id)\n        }\n        // Else push all processes\n        else {\n            Object.values(processes)\n            .forEach(process => {\n              if(!!process.showStatistics){\n                processesToRender.push(process._id)\n              }\n            });\n\n        }\n\n        return processesToRender.map((processId) => {\n            return (\n                <StationColumns\n                    key={processId}\n                    processId={processId}\n                    setDateTitle={(title) => setDate(title)}\n                    dataLoading={loading => setLoading(loading)}\n                    dateIndex={dateIndex}\n                    timeSpan={timeSpan}\n                    showReport={showReport}\n                    sortLevel={sortLevel}\n                />\n            )\n        })\n    }\n\n    return (\n      <Suspense fallback = {<></>}>\n        <styled.Container>\n            <Header\n                title={'Statistics Summary'}\n                showBackButton={page === 'processes'}\n            />\n            <StatisticsHeader\n                themeContext={themeContext}\n                loading={loading}\n                handleTimeSpan={(timeSpan, index) => {\n                    onTimeSpan(timeSpan, index)\n                }}\n                timeSpan={timeSpan}\n                handleSetShowReport={bool => setShowReport(bool)}\n                showReport={showReport}\n                date={date}\n                dateIndex={dateIndex}\n                handleSelectSort={onSelectSort}\n                sortLevel={sortLevel}\n            />\n            <styled.StationColumnsContainer>\n                {renderStationColumns()}\n            </styled.StationColumnsContainer>\n        </styled.Container>\n        </Suspense>\n    )\n\n\n}\n\nexport default Statistics\n"],"sourceRoot":""}