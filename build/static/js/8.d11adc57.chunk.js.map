{"version":3,"sources":["components/side_bar/content/cards/columns/station_column/station_column.style.js","higher_order_components/react-window-size.js","components/side_bar/content/cards/columns/column/column.style.js","components/side_bar/content/cards/columns/column/column.js","components/side_bar/content/cards/columns/station_column/station_column.js","components/side_bar/content/cards/columns/lot_queue/lot_queue.style.js","components/side_bar/content/cards/columns/lot_queue/lot_queue.js","components/side_bar/content/cards/columns/finish_column/finish_column.style.js","components/side_bar/content/cards/columns/finish_column/finish_column.js","components/side_bar/content/cards/card_zone/card_zone.style.js","components/side_bar/content/cards/card_zone/card_zone.js","methods/utils/time_utils.js"],"names":["minHeight","StationContainerCss","styled","span","css","props","isCollapsed","theme","bg","octonary","StationHeader","div","secondary","HeaderRow","QuantityText","textColor","LabelContainer","StationTitle","fontSize","sz4","senary","sz3","HeaderSection","button","quaternary","dragEnter","HeaderSectionTitle","h5","septenary","font","primary","RowContainer","divider","hr","getWindowDimensions","window","width","innerWidth","height","innerHeight","RotationWrapperOuter","RotationWrapperInner","LotDiv","DragToDiv","tertiary","RotatedRouteName","StationContainer","maxWidth","maxHeight","BodyContainer","schema","lots","solid","Column","station_id","stationName","onCardClick","selectedCards","processId","HeaderContent","sortMode","sortDirection","containerStyle","setSelectedCards","reduxCards","useSelector","state","objectsReducer","objects","cardsReducer","processCards","hoveringLotId","cardPageReducer","draggingLotId","draggingStationId","dragFromBin","routes","tasksReducer","tasks","stations","stationsReducer","processes","processesReducer","showCardEditor","dashboardsReducer","kickOffEnabledDashboards","showEditor","dispatch","useHistory","location","pathname","includes","useDispatch","dispatchPutCard","card","ID","a","putCard","dispatchSetDroppingLotId","lotId","binId","setDroppingLotId","dispatchSetLotHovering","setLotHovering","dispatchSetDraggingLotId","setDraggingLotId","dispatchSetDraggingStationId","stationId","setDraggingStationId","dispatchSetDragFromBin","setDragFromBin","useState","lotQuantitySummation","setLotQuantitySummation","numberOfLots","setNumberOfLots","cards","setCards","enableFlags","highlightStation","setHighlightStation","lastStationTraversed","setLastStationTraversed","acceptDrop","setAcceptDrop","inDropZone","setInDropZone","useEffect","tempLotQuantitySummation","tempNumberOfLots","forEach","currLot","count","parseInt","isSelectedCardsNotEmpty","setIsSelectedCardsNotEmpty","isNonEmptyArray","tempCards","sortBy","accDrop","shouldAcceptDrop","cardId","oldProcessId","process_id","processRoutes","map","routeId","startNodes","findProcessStartNodes","endNode","findProcessEndNode","forwardsTraverseCheck","currentStationID","startDivergeType","length","ind","nextRoutes","filter","route","load","divergeType","unload","backwardsTraverseCheck","mergingRoutes","dispersingRoutes","onMouseLeave","event","getLastSelected","lastSelectedIndex","addedIndex","i","getLastSelectedIndex","handleDrop","console","log","droppedCard","oldBins","bins","movedBin","stationBeforeMerge","updatedLot","handleNextStationBins","handleCurrentStationBins","Object","values","_id","style","padding","whiteSpace","overflow","textOverflow","className","onDragOver","e","preventDefault","onDragLeave","target","index","leadTime","name","object_id","flags","lotNum","totalQuantity","isLastSelected","processName","lotTemplateId","selectable","partBins","keys","part","isPartial","id","class","draggable","onMouseEnter","onDragStart","opacity","onDragEnd","background","borderRadius","onDeleteDisabledLot","partId","currBin","submitLot","handleDeleteDisabledLot","onRightClickDeleteLot","handleRightClickDeleteLot","glow","enableFlagSelector","lotNumber","onClick","payload","lastSelectedLotId","selectedIndex","findIndex","currLotId","currBinId","existingIndex","slice","reverse","getBetweenSelected","border","margin","StationsColumn","autoCycleTime","dispatchPutStation","station","putStation","useTheme","setCollapsed","cycleTimeDisplayTime","useMemo","time","cycle_time_mode","cycle_time","convertSecondsToHHMMSS","manual_cycle_time","splitVal","split","moment","set","renderCycleTime","marginTop","marginRight","display","alignItems","onColor","transform","checked","onChange","switched","isManual","deepCopy","handleToggleManualCycleTime","marginLeft","pointerEvents","showHours","showMinutes","value","val","handleSaveCycleTime","format","allowEmpty","aria-hidden","cursor","marginBottom","LotQueue","onAddLotClick","setShowCardEditor","justifyContent","defaultProps","FinishColumn","Container","CardZone","handleCardClick","lotFilters","lotFilterValue","selectedFilterOption","handleAddLotClick","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","currentProcess","undefined","showFinish","showQueue","allCards","draggedLotInfo","droppedLotInfo","multipleFilters","settingsReducer","settings","shiftDetails","enableMultipleLotFilters","draggingBinId","cardsSorted","setCardsSorted","setBins","queue","setQueue","finished","setFinished","deleteStationCycleTime","doesProcessEndInWarehouse","loadStations","unloadStations","unloadStationA","find","loadStation","unloadStationB","type","tempBins","currRouteId","currRoute","loadStationId","getLoadStationId","unloadStationId","getUnloadStationId","tempQueue","tempFinished","tempCardsSorted","cardBins","rest","getLotTotalQuantity","matchesFilter","reduce","matchesAll","checkCardMatchesFilter","getMatchesFilter","entries","binEntry","lotItem","currentObj","isObject","existingCards","isArray","push","renderStationColumns","columns","flattened_stations","stationNode","idx","stationID","depth","position","LOT_FILTER_OPTIONS","SORT_DIRECTIONS","ASCENDING","memo","getMinutesFromMoment","m","minutes","hours","convert12hto24h","time12h","numericTime","modifier","convert24htoEpoch","time24h","date","Date","parse","convertDateto12h","settingState","store","getState","timezone","label","toLocaleString","timeZone","convertDateToLocaleTimeZone","convert24hto12h","getHours","getMinutes","seconds","toISOString","substr"],"mappings":"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","file":"static/js/8.d11adc57.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\nimport { Container } from \"react-smooth-dnd\";\n\n// export const RouteContainer = styled.div`\n//     display: flex;\n//     flex: 1;\n//     flex-direction: column;\n//     background: yellow;\n// `\n\nconst minHeight = \"10rem\"\nexport const RotatedRouteName = styled.span`\n// background: red;\n\ttransform: rotate(-90deg);\n\t// transform: translateY(50%);\n`\n\n\nexport const StationContainerCss = css`\n\tdisplay: flex;\n    flex-direction: column;\n    min-height: ${minHeight};\n\n    width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    max-width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    min-width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    margin-right: 1rem;\n\n    border-radius: 1rem;\n    overflow: hidden;\n\n    color: ${props => props.theme.bg.octonary};\n`\n\nexport const StationContainer = styled.div`\n    ${StationContainerCss};\n`\n\nexport const StationHeader = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    background: ${props => props.theme.bg.secondary};\n    padding: .5rem 1rem;\n`\n\nexport const HeaderRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    align-self: stretch;\n`\n\nexport const QuantityText = styled.span`\n    font-size: 1rem;\n    color: ${props => props.theme.textColor};\n`\n\nexport const HeaderContent = styled.div`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    justify-content: space-between;\n    align-items: center;\n`\n\n\nexport const TitleContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\n\n\nexport const RouteContainer = styled.div`\n\tdisplay: flex;\n\tborder-bottom: 1px solid black;\n\twidth: 100%;\n`\n\nexport const LabelContainer = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\twhite-space: nowrap;\n\toverflow: hidden;\n\t// justify-content: space-between;\n`\n\nexport const StationLabel = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz4};\n    border-bottom: 1px solid black;\n    width: 100%;\n    padding: .25rem;\n    background: ${props => props.theme.bg.senary};\n`\n\nexport const StationTitle = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz3};\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 2; /* number of lines to show */\n    -webkit-box-orient: vertical;\n    color: ${props => props.theme.textColor};\n`\n\n\n\nexport const StationButton = styled.button`\n\n`\n\nexport const BodyContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\t// flex: 1;\n\tmin-height: ${minHeight};\n\toverflow: hidden;\n\tbackground: ${props => props.theme.bg.quaternary};\n\topacity: ${props => props.dragEnter ? 0.75 : 1};\n\tborder-bottom-right-radius: 1rem;\n\tborder-bottom-left-radius: 1rem;\n\tjustify-content: center;\n`\n\nexport const HeaderSection = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    width:100%;\n    justify-content: space-between;\n    overflow: hidden;\n    align-content: center;\n    margin: 0.2rem 0;\n    /* position: absolute; */\n    /* right: 1rem; */\n\n`\n\nexport const HeaderSectionTitle = styled.h5`\n    text-align: center;\n    color: ${props => props.theme.bg.septenary};\n    font-family: ${props => props.theme.font.primary};\n`\n\nexport const RowContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n`\n\nexport const divider = styled.hr`\n    border-top: .05rem solid;\n    border-color: ${props => props.theme.bg.quaternary};\n    border-radius: .25rem;\n    width: 100%;\n    margin: 0;\n`\n","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import styled, { css } from \"styled-components\";\n\nconst minHeight = \"10rem\"\n\nexport const RotationWrapperOuter = styled.div`\n  display: table;\n`\n\nexport const RotationWrapperInner = styled.div`\n  padding: 50% 0;\n`\nexport const LotDiv = styled.div`\n\n`\n\nexport const DragToDiv = styled.div`\n  width: 97%;\n  margin-top: .5rem;\n  margin-bottom: .5rem;\n  margin-left: 0.5rem;\n  min-height: 10rem;\n  background: ${props => props.theme.bg.tertiary};\n\n  border: 0.2rem solid #dedfe3;\n  border-radius: 0.5rem;\n`\n\n\nexport const RotatedRouteName = styled.span`\n  display: block;\n  transform-origin: top left;\n  transform: rotate(90deg) translate(0, -110%);\n  margin-top: -50%;\n  max-width: 20rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nexport const StationContainerCss = css`\n\n`\n\nexport const StationContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    min-height: ${minHeight};\n\n    width: ${props => props.isCollapsed ? \"2rem\" : props.maxWidth};\n    max-width: ${props => props.isCollapsed ? \"2rem\" : props.maxWidth};\n    min-width: ${props => props.isCollapsed ? \"2rem\" : props.maxWidth};\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n    max-height: ${props => props.maxHeight && props.maxHeight};\n\n    border-radius: 0.5rem;\n    overflow: hidden;\n\n    color: ${props => props.theme.bg.octonary};\n`\n\nexport const StationHeader = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    background: ${props => props.theme.bg.secondary};\n`\n\nexport const TitleContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const RouteContainer = styled.div`\n\tdisplay: flex;\n\tborder-bottom: 1px solid black;\n\twidth: 100%;\n`\n\nexport const StationLabel = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz4};\n`\n\nexport const BodyContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n  height: 100%;\n\tmin-height: 10rem;\n  background: ${props => props.theme.bg.secondary};\n\tborder-bottom-right-radius: 0.5rem;\n\tborder-bottom-left-radius: 0.5rem;\n\n  // border-left: 0.2rem solid ${props => props.theme.schema.lots.solid};\n  // border-bottom: 0.2rem solid ${props => props.theme.schema.lots.solid};\n  // border-right: 0.2rem solid ${props => props.theme.schema.lots.solid};\n\n\tjustify-content: start;\n`\n","import React, { useEffect, useRef, useMemo, useState} from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport VisibilitySensor from 'react-visibility-sensor'\n\n// actions\nimport { putCard } from \"../../../../../../redux/actions/card_actions\";\nimport {\n\tsetDroppingLotId,\n\tsetLotHovering,\n\tsetDraggingLotId,\n\tsetDraggingStationId,\n\tsetDragFromBin\n} from \"../../../../../../redux/actions/card_page_actions\";\n\n// components external\nimport { Draggable, Container } from 'react-smooth-dnd';\n\n// components internal\nimport Lot from \"../../lot/lot\";\n\n// functions external\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// styles\nimport * as styled from \"./column.style\";\n\n/// utils\nimport { sortBy } from \"../../../../../../methods/utils/card_utils\";\nimport { immutableDelete, immutableReplace, isArray, isNonEmptyArray } from \"../../../../../../methods/utils/array_utils\";\nimport { getCustomFields, handleNextStationBins, handleCurrentStationBins, handleMergeParts } from \"../../../../../../methods/utils/lot_utils\";\nimport {findProcessStartNodes, findProcessEndNode} from '../../../../../../methods/utils/processes_utils'\nimport LotContainer from \"../../lot/lot_container\";\n\nconst Column = ((props) => {\n\n\tconst {\n\t\tstation_id,\n\t\tstationName = \"Unnamed\",\n\t\tonCardClick,\n\t\tselectedCards,\n\t\tprocessId,\n\t\tHeaderContent,\n\t\tisCollapsed,\n\t\tmaxWidth,\n\t\tmaxHeight,\n\t\tsortMode,\n\t\tsortDirection,\n\t\tsetSelectedCards,\n\t\tcontainerStyle\n\t} = props\n\n\t// redux state\n\tconst objects = useSelector(state => { return state.objectsReducer.objects })\n\tconst reduxCards = useSelector(state => { return state.cardsReducer.processCards[processId] }) || {}\n\tconst hoveringLotId = useSelector(state => { return state.cardPageReducer.hoveringLotId }) || null\n\tconst draggingLotId = useSelector(state => { return state.cardPageReducer.draggingLotId }) || null\n\tconst draggingStationId = useSelector(state => state.cardPageReducer.draggingStationId) || null\n\tconst dragFromBin = useSelector(state => state.cardPageReducer.dragFromBin) || null\n\tconst routes = useSelector(state => state.tasksReducer.tasks)\n\tconst stations = useSelector(state => state.stationsReducer.stations)\n\tconst processes = useSelector(state => state.processesReducer.processes)\n\tconst kickoffDashboards = useSelector(state => { return state.dashboardsReducer.kickOffEnabledDashboards})\n\tconst showCardEditor = useSelector(state => { return state.cardsReducer.showEditor })\n\tconst history = useHistory();\n  const pageName = history.location.pathname;\n  const isDashboard = !!pageName.includes(\"/locations\");\n\n\t// actions\n\tconst dispatch = useDispatch()\n\tconst dispatchPutCard = async (card, ID) => await dispatch(putCard(card, ID))\n\tconst dispatchSetDroppingLotId = async (lotId, binId) => await dispatch(setDroppingLotId(lotId, binId))\n\tconst dispatchSetLotHovering = async (lotId) => await dispatch(setLotHovering(lotId))\n\tconst dispatchSetDraggingLotId = async (lotId) => await dispatch(setDraggingLotId(lotId))\n\tconst dispatchSetDraggingStationId = async (stationId) => await dispatch(setDraggingStationId(stationId))\n\tconst dispatchSetDragFromBin = async (stationId) => await dispatch(setDragFromBin(stationId))\n\n\n\t// component state\n\tconst [dragEnter, setDragEnter] = useState(false)\n\tconst [lotQuantitySummation, setLotQuantitySummation] = useState(0)\n\tconst [numberOfLots, setNumberOfLots] = useState(0)\n\tconst [cards, setCards] = useState([])\n\tconst [enableFlags, setEnableFlags] = useState(true)\n\tconst [isSourcee, setIsSource] = useState(false)\n\tconst [highlightStation, setHighlightStation] = useState(false)\n\tconst [lastStationTraversed, setLastStationTraversed] = useState(null)\n\tconst [acceptDrop, setAcceptDrop] = useState(false)//checks if the station should accept the drop when hovering over it\n\tconst [inDropZone, setInDropZone] = useState(false)\n\n\tuseEffect(() => {\n\t\tlet tempLotQuantitySummation = 0\n\t\tlet tempNumberOfLots = 0\n\t\tcards.forEach((currLot) => {\n\t\t\tconst {\n\t\t\t\tcount = 0\n\t\t\t} = currLot || {}\n\n\t\t\ttempNumberOfLots = parseInt(tempNumberOfLots) + 1\n\t\t\ttempLotQuantitySummation = parseInt(tempLotQuantitySummation) + parseInt(count)\n\t\t})\n\n\t\tsetNumberOfLots(tempNumberOfLots)\n\t\tsetLotQuantitySummation(tempLotQuantitySummation)\n\t}, [cards])\n\n\n\tconst [isSelectedCardsNotEmpty, setIsSelectedCardsNotEmpty] = useState(false)\n\n\tuseEffect(() => {\n\t\tsetIsSelectedCardsNotEmpty(isNonEmptyArray(selectedCards))\n\t}, [selectedCards])\n\n\tuseEffect(() => {\n\t\tif (sortMode) {\n\t\t\tlet tempCards = [...props.cards] // *** MAKE MODIFIABLE COPY OF CARDS TO ALLOW SORTING ***\n\t\t\tsortBy(tempCards, sortMode, sortDirection)\n\t\t\tsetCards(tempCards)\n\n\t\t}\n\t\telse {\n\t\t\tsetCards(props.cards)\n\t\t}\n\t}, [props.cards, sortMode, sortDirection])\n\n\tuseEffect(() => {\n\t\tif(!!draggingLotId && !!dragFromBin && !!reduxCards[draggingLotId]){\n\t\t\tlet accDrop = shouldAcceptDrop(draggingLotId, dragFromBin, station_id)\n\t\t\tsetAcceptDrop(accDrop)\n\t\t}\n\t\tif(!draggingLotId) setHighlightStation(null)\n\n\t}, [draggingLotId])\n\n\t//This function is now more limiting with split/merge\n\t// -dont allow moving lot to next stations(s) if current station disperses a lot\n\t//-dont allow movinga lot backwards if the previous node has routes merging into it or if it disperses a lot\n\t//-dont allow moving lot back if current node has routes merging into it\n\t//-These limitations ensure dragging lots around in cardZone dont mess merge/split functionality\n\t//-We should make it more flexible in the future with functions that handle the above cases...\n\t//-There is some functionality that i added where you can drag lots forward into their merging station and it will properly merge them\n\tconst shouldAcceptDrop = (cardId, binId, station_id) => {\n\n\t\t\tlet oldProcessId = reduxCards[cardId].process_id\n\t\t\tconst processRoutes = processes[oldProcessId]?.routes?.map(routeId => routes[routeId])\n\n\t\t\tlet startNodes = findProcessStartNodes(processRoutes, stations)\n\t\t\tlet endNode = findProcessEndNode(processRoutes)\n\t\t\tif (oldProcessId !== processId) return false\n\t\t\tif(!!showCardEditor) return false\n\t\t\t//if (process[oldProcessId] === undefined) return false\n\n\t\t \tif(binId === station_id) {\n\t\t\t\t//setHighlightStation(true)\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tconst forwardsTraverseCheck = (currentStationID) => {\n\t\t\t\tif(endNode === currentStationID && station_id =='FINISH'){//If you can traverse to the end node, also allow finish column\n\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\telse if(currentStationID === 'QUEUE' && (processes[oldProcessId].startDivergeType!=='split' || startNodes.length ===1)){\n\t\t\t\t\t//if lot is in queue and station is one of the the start nodes and start disperse isnt split then allow move\n\t\t\t\t\tif(startNodes.includes(station_id)){\n\t\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t\telse{//If the station is not one of the start nodes still traverse forwards from all the start nodes to see if you can get to station\n\t\t\t\t\t\tfor(const ind in startNodes){\n\t\t\t\t\t\t\tconst canMove = forwardsTraverseCheck(startNodes[ind])\n\t\t\t\t\t\t\tif(!!canMove) return true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst nextRoutes = processRoutes.filter(route => route.load === currentStationID)\n\t\t\t\tif(!!nextRoutes[0] && (!nextRoutes[0].divergeType || nextRoutes[0].divergeType!=='split')){//can't drag forward if station disperses lots\n\t\t\t\t\tfor(const ind in nextRoutes){\n\t\t\t\t\t\tif(nextRoutes[ind].unload === station_id){\n\t\t\t\t\t\t\t//If you are skipping over nodes and drag to a merge station we need to keep track of the station right before\n\t\t\t\t\t\t\t//the merge station as merge functions need this to find routeTravelled\n\t\t\t\t\t\t\tsetLastStationTraversed(nextRoutes[ind].load)\n\t\t\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tconst mergingRoutes = processRoutes.filter((route) => route.unload === nextRoutes[ind].unload);\n\t\t\t\t\t\t\tif(mergingRoutes.length === 1){\n\t\t\t\t\t\t\t\tconst canMove = forwardsTraverseCheck(nextRoutes[ind].unload)\n\t\t\t\t\t\t\t\tif(!!canMove) return true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst backwardsTraverseCheck = (currentStationID) => {//dragging into Queue, make sure kickoff isnt dispersed\n\t\t\t\tif(startNodes.includes(currentStationID) && station_id === 'QUEUE' && (processes[oldProcessId].startDivergeType!=='split' || startNodes.length ===1)) {//can traverse back to queue\n\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\treturn true\n\t\t\t\t}\n\n\t\t\t\telse if(currentStationID === 'FINISH'){//dragging from Finish. Can drag into traversed stations provided theyre not a merge station\n\t\t\t\t\tif(endNode === station_id){\n\t\t\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tconst canMove = backwardsTraverseCheck(endNode)\n\t\t\t\t\t\tif(!!canMove) return true\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst mergingRoutes = processRoutes.filter((route) => route.unload === currentStationID);\n\t\t\t\tif(mergingRoutes.length===1){//Can't drag backwards from merge station\n\t\t\t\t\tfor(const ind in mergingRoutes){\n\t\t\t\t\t\tconst dispersingRoutes = processRoutes.filter((route) => route.load === mergingRoutes[ind].load);\n\t\t\t\t\t\tif(mergingRoutes[ind].load === station_id) {\n\t\t\t\t\t\t\tif(dispersingRoutes.length === 1 || dispersingRoutes[0].divergeType!=='split' || !dispersingRoutes[0].divergeType ){\n\t\t\t\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tif(dispersingRoutes.length === 1 || !dispersingRoutes[0].divergeType || dispersingRoutes[0].divergeType!=='split'){\n\t\t\t\t\t\t\t\t\tconst canMove = backwardsTraverseCheck(mergingRoutes[ind].load)\n\t\t\t\t\t\t\t\t\tif(!!canMove) return true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tlet atMergeStation = false\n\t\t\tconst forwardsFound = forwardsTraverseCheck(binId)\n\t\t\tif(!!forwardsFound) return true\n\t\t\tconst backwardsFound = backwardsTraverseCheck(binId)\n\t\t\tif(!!backwardsFound) return true\n\t}\n\n\n\tconst onMouseEnter = (event, lotId) => {\n\t\tdispatchSetLotHovering(lotId)\n\t}\n\n\n\tconst onMouseLeave = (event) => {\n\n\t\tdispatchSetLotHovering(null)\n\t}\n\n\tconst handleDeleteDisabledLot = (card, binId, partId) => {\n\t\t\tlet currLot = reduxCards[card.cardId]\n\t\t\tlet currBin = currLot.bins[binId]\n\n\t\t\tdelete currBin[partId]\n\n\t\t\tlet submitLot = {\n\t\t\t\t...currLot,\n\t\t\t\tbins: {\n\t\t\t\t\t...currLot.bins,\n\t\t\t\t\t[binId]: currBin\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(Object.values(currBin).length===1 && currBin['count'] === 0) delete submitLot.bins[binId]\n\t\t\tdispatchPutCard(submitLot, submitLot._id)\n\t}\n\n\tconst handleRightClickDeleteLot = (card, binId) => {\n\t\t\tlet currLot = reduxCards[card.cardId]\n\t\t\tlet currBin = currLot.bins[binId]\n\n\t\t\tcurrBin['count'] = 0\n\n\t\t\tlet submitLot = {\n\t\t\t\t...currLot,\n\t\t\t\tbins: {\n\t\t\t\t\t...currLot.bins,\n\t\t\t\t\t[binId]: currBin\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(Object.values(currBin).length===1) delete submitLot.bins[binId]\n\t\t\tdispatchPutCard(submitLot, submitLot._id)\n\t}\n\n\tconst getSelectedIndex = (lotId, binId) => {\n\t\treturn selectedCards.findIndex((currLot) => {\n\t\t\tconst {\n\t\t\t\tcardId: currLotId,\n\t\t\t\tbinId: currBinId\n\t\t\t} = currLot\n\n\t\t\treturn (lotId === currLotId) && (binId === currBinId)\n\t\t})\n\t}\n\n\tconst getIsSelected = (lotId, binId) => {\n\t\tconst existingIndex = getSelectedIndex(lotId, binId)\n\t\treturn (existingIndex !== -1)\n\t}\n\n\tconst getLastSelectedIndex = () => {\n\t\tlet addedIndex = -1\n\n\t\tfor (var i = selectedCards.length - 1; i >= 0; i--) {\n\t\t\tconst currLot = selectedCards[i]\n\t\t\tconst {\n\t\t\t\tbinId: currBinId\n\t\t\t} = currLot || {}\n\n\t\t\tif ((currBinId === station_id) && (i > addedIndex)) {\n\t\t\t\taddedIndex = i\n\t\t\t}\n\t\t}\n\n\t\treturn addedIndex\n\t}\n\n\tconst getLastSelected = () => {\n\t\tconst lastSelectedIndex = getLastSelectedIndex()\n\t\treturn selectedCards[lastSelectedIndex]\n\t}\n\n\tconst getIsLastSelected = (lotId) => {\n\t\tconst lastSelected = getLastSelected() || {}\n\t\tconst {\n\t\t\tcardId: currLotId,\n\t\t} = lastSelected\n\n\t\treturn lotId === currLotId\n\t}\n\n\tconst getBetweenSelected = (lotId) => {\n\t\tconst lastSelected = getLastSelected() || {}\n\t\tconst {\n\t\t\tcardId: lastSelectedLotId,\n\t\t} = lastSelected\n\n\t\tconst selectedIndex = cards.findIndex((currLot) => {\n\t\t\tconst {\n\t\t\t\tcardId: currLotId,\n\t\t\t\tbinId: currBinId\n\t\t\t} = currLot\n\n\t\t\treturn (lastSelectedLotId === currLotId) && (station_id === currBinId)\n\t\t})\n\n\t\tconst existingIndex = cards.findIndex((currLot) => {\n\t\t\tconst {\n\t\t\t\tcardId: currLotId,\n\t\t\t\tbinId: currBinId\n\t\t\t} = currLot\n\n\t\t\treturn (lotId === currLotId) && (station_id === currBinId)\n\t\t})\n\n\t\tif (selectedIndex === -1) {\n\t\t\treturn [cards[existingIndex]]\n\t\t}\n\t\telse if (selectedIndex < existingIndex) {\n\t\t\treturn cards.slice(selectedIndex, existingIndex + 1)\n\t\t}\n\t\telse {\n\t\t\treturn cards.slice(existingIndex, selectedIndex + 1).reverse()\n\t\t}\n\t}\n\n\tconst handleDrop = async () => {\n\t\tlet inDropZne = shouldAcceptDrop(draggingLotId, dragFromBin, draggingStationId)\n\t\tif(!!inDropZne && draggingStationId!==dragFromBin){\n\t\t\tconsole.log('here')\n\t\t\t\tconst binId = dragFromBin\n\t\t\t\tconst droppedCard = reduxCards[draggingLotId] ? reduxCards[draggingLotId] : {}\n\t\t\t\tconst oldBins = droppedCard.bins ? droppedCard.bins : {}\n\t\t\t\tconst {\n\t\t\t\t\t[binId]: movedBin,\n\t\t\t\t\t...remainingOldBins\n\t\t\t\t} = oldBins || {}\n\n\t\t\t\tif (movedBin) {\n\t\t\t\t\tlet updatedLot = droppedCard\n\t\t\t\t\tlet stationBeforeMerge = !!lastStationTraversed ? lastStationTraversed : binId\n\t\t\t\t\tupdatedLot.bins = handleNextStationBins(updatedLot.bins, updatedLot.bins[binId]?.count, stationBeforeMerge, draggingStationId, processes[updatedLot.process_id], routes, stations)\n\t\t\t\t\tupdatedLot.bins = handleCurrentStationBins(updatedLot.bins, updatedLot.bins[binId]?.count, binId, processes[updatedLot.process_id], routes)\n\t\t\t\t\tif(!!updatedLot.bins[binId] && !updatedLot.bins[binId]['count']){\n\t\t\t\t\t\tupdatedLot.bins[binId] = {\n\t\t\t\t\t\t\t...updatedLot.bins[binId],\n\t\t\t\t\t\t\tcount: 0\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//Bin exists but nothing in it. Delete the bin as this messes various things up.\n\t\t\t\t\tif(!!updatedLot.bins[binId] && updatedLot.bins[binId]['count'] === 0 && Object.values(updatedLot.bins[binId]).length === 1){\n\t\t\t\t\t\tdelete updatedLot.bins[binId]\n\t\t\t\t\t}\n\t\t\t\t\t//console.log(JSON.parse(JSON.stringify(updatedLot)))\n\t\t\t\t\tdispatchPutCard(updatedLot, updatedLot._id)\n\t\t\t\t\tawait dispatchSetDroppingLotId(null, null)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst renderCards = () => {\n\t\treturn (\n\t\t\t\t<styled.BodyContainer\n\t\t\t\t\tclassName = 'container'\n\t\t\t\t\tstyle={{ overflow: \"auto\", height: \"100%\", padding: \"1rem\",\n\n\t\t\t\t }}\n\n\t\t\t\t onDragOver = {(e)=>{\n\t\t\t\t\t dispatchSetDraggingStationId(station_id)\n\t\t\t\t\t if(!!acceptDrop){\n\t\t\t\t\t\t setInDropZone(true)\n\t\t\t\t\t }\n\t\t\t\t\t e.preventDefault()\n\t\t\t\t }}\n\t\t\t\t onDragLeave={(e) => {\n\t\t\t\t\t\t setInDropZone(false)\n\t\t\t\t\t\t dispatchSetDraggingStationId(null)\n\t\t\t\t }}\n\t\t\t\t\t>\n\t\t\t\t\t{!!highlightStation &&\n\t\t\t\t\t\t<styled.DragToDiv\n\n\t\t\t\t\t\tclassName = 'dragToDiv'\n\t\t\t\t\t\tonDragOver={(e) => {\n\t\t\t\t\t\t\tif(e.target.className.includes('dragToDiv')){\n\t\t\t\t\t\t\t\te.target.style.minHeight = '18rem'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragLeave={(e) => {\n\t\t\t\t\t\t\t\tif(!!inDropZone){\n\t\t\t\t\t\t\t\t\t\te.target.style.minHeight = '10rem'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\t\t{cards.map((card, index) => {\n\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t_id,\n\t\t\t\t\t\t\t\tcount = 0,\n\t\t\t\t\t\t\t\tleadTime,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tobject_id,\n\t\t\t\t\t\t\t\tcardId,\n\t\t\t\t\t\t\t\tflags,\n\t\t\t\t\t\t\t\tlotNum,\n\t\t\t\t\t\t\t\ttotalQuantity,\n\t\t\t\t\t\t\t\tprocessName,\n\t\t\t\t\t\t\t\tlotTemplateId,\n\t\t\t\t\t\t\t\t...rest\n\t\t\t\t\t\t\t} = card\n\n\t\t\t\t\t\t\tconst isLastSelected = getIsLastSelected(cardId)\n\n\t\t\t\t\t\t\t// const isSelected = (draggingLotId !== null) ? () : ()\n\t\t\t\t\t\t\tconst selectable = (hoveringLotId !== null) || (draggingLotId !== null) || isSelectedCardsNotEmpty\n\t\t\t\t\t\t\tif(!!reduxCards[card.cardId]?.bins[card.binId]){\n\t\t\t\t\t\t\t\tlet partBins = reduxCards[card.cardId].bins[card.binId]\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tObject.keys(partBins).map((part) => {\n\n\t\t\t\t\t\t\t\t\t\tconst isPartial = part !== 'count' ? true : false\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{(partBins[part]>0 || (part === 'count' && partBins['count']>0)) &&\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<styled.LotDiv\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid = 'item'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass = 'item'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdraggable = {true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(event) => onMouseEnter(event, cardId)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseLeave={onMouseLeave}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonDragStart = {(e)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.target.style.opacity = '.001'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetDraggingLotId(cardId)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetDragFromBin(station_id)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonDragEnd = {(e)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleDrop()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.target.style.opacity = '1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetDraggingLotId(null)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetDragFromBin(null)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackground: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tborderRadius: '1rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LotContainer\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisPartial = {isPartial}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonDeleteDisabledLot = {() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleDeleteDisabledLot(card, card.binId, part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonRightClickDeleteLot = {()=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleRightClickDeleteLot(card, card.binId)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tglow={isLastSelected}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableFlagSelector={enableFlags}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectable={selectable}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={cardId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// processName={processName}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalQuantity={totalQuantity}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlotNumber={lotNum}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={isPartial ? name + ` (${routes[part]?.part})` : name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount={isPartial ? partBins[part] : partBins['count']}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleadTime={leadTime}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={cardId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tflags={flags || []}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlotId={cardId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbinId={station_id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst payload = getBetweenSelected(cardId)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonCardClick(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlotId: cardId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprocessId: processId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbinId: station_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontainerStyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tborder: draggingLotId === cardId && station_id === dragFromBin && '.2rem solid #7e7e7e',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmargin: draggingLotId === cardId && station_id === dragFromBin ? '0rem' : '.4rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpadding: '.1rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</styled.LotDiv>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})}\n\t\t\t\t</styled.BodyContainer>\n\t\t)\n\t}\n\n\tif (isCollapsed) {\n\t\treturn (\n\t\t\t<styled.StationContainer\n\t\t\t\tmaxHeight={maxHeight}\n\t\t\t\tisCollapsed={isCollapsed}\n\t\t\t\tmaxWidth={maxWidth}\n\t\t\t>\n\t\t\t\t{HeaderContent(numberOfLots, lotQuantitySummation)}\n\n\t\t\t\t<styled.BodyContainer style={{\n\t\t\t\t\tpadding: \"1rem 0\",\n\t\t\t\t\twhiteSpace: \"nowrap\",\n\t\t\t\t\toverflow: \"hidden\",\n\t\t\t\t\ttextOverflow: \"ellipsis\",\n\n\t\t\t\t}}>\n\t\t\t\t\t<styled.RotationWrapperOuter>\n\t\t\t\t\t\t<styled.RotationWrapperInner>\n\t\t\t\t\t\t\t<styled.RotatedRouteName>{stationName}</styled.RotatedRouteName>\n\t\t\t\t\t\t</styled.RotationWrapperInner>\n\t\t\t\t\t</styled.RotationWrapperOuter>\n\t\t\t\t</styled.BodyContainer>\n\t\t\t</styled.StationContainer>\n\t\t)\n\t}\n\n\telse {\n\t\treturn (\n\t\t\t<styled.StationContainer\n\t\t\t\tisCollapsed={isCollapsed}\n\t\t\t\tmaxWidth={maxWidth}\n\t\t\t\tmaxHeight={maxHeight}\n\t\t\t\tstyle={containerStyle}\n\t\t\t>\n\t\t\t\t{HeaderContent(numberOfLots, lotQuantitySummation)}\n\n\t\t\t\t{!showCardEditor &&\n\t\t\t\t\trenderCards()\n\t\t\t\t}\n\t\t\t</styled.StationContainer>\n\t\t)\n\t}\n\n})\n\nexport default Column\n","import React, { useState, useMemo } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment';\nimport Switch from 'react-ios-switch';\n\nimport { useTheme } from \"styled-components\";\nimport * as styled from \"./station_column.style\";\n\n// Import Components\nimport TimePicker from \"rc-time-picker\";\nimport Button from '../../../../../basic/button/button'\nimport Column from \"../column/column\"\n\n// Import Actions\nimport { putStation } from '../../../../../../redux/actions/stations_actions'\n\n// Import Utils\nimport { deepCopy } from '../../../../../../methods/utils/utils'\nimport { convertSecondsToHHMMSS } from '../../../../../../methods/utils/time_utils'\n\nconst StationsColumn = ((props) => {\n    const {\n        id,\n        station_id,\n        stationName = \"Unnamed\",\n        onCardClick,\n        cards = [],\n        processId,\n        maxHeight,\n        sortMode,\n        sortDirection,\n        selectedCards,\n        setSelectedCards,\n        autoCycleTime,\n        containerStyle\n    } = props\n\n    const dispatch = useDispatch()\n    const dispatchPutStation = async (station) => await dispatch(putStation(station))\n\n    const stations = useSelector(state => state.stationsReducer.stations)\n    const theme = useTheme()\n\n    const [isCollapsed, setCollapsed] = useState(false)\n\n    const cycleTimeDisplayTime = useMemo(() => {\n\n        let time = '00:00:00'\n\n        // If there is a manual time and its enable then use that time\n        if (stations[station_id].cycle_time_mode === 'auto' && !!stations[station_id]?.cycle_time) {\n            time = convertSecondsToHHMMSS(stations[station_id].cycle_time);\n        } else if (stations[station_id].cycle_time_mode === 'manual' && !!stations[station_id]?.manual_cycle_time) {\n            time = stations[station_id]?.manual_cycle_time;\n        }\n\n        // Split the time up\n        const splitVal = time.split(':')\n\n        // Set it to a moment for the time picker\n        return moment().set({ 'hour': splitVal[0], 'minute': splitVal[1], 'second': splitVal[2] })\n    }, [stations[station_id]])\n\n\n    const handleSaveCycleTime = (time) => {\n        let station = deepCopy(stations[station_id])\n        station.manual_cycle_time = time\n        dispatchPutStation(station)\n    }\n\n    const handleToggleManualCycleTime = (isManual) => {\n        let station = deepCopy(stations[station_id])\n        station.cycle_time_mode = isManual ? 'manual' : 'auto'\n        dispatchPutStation(station)\n    }\n\n    const renderCycleTime = () => {\n        \n        return (\n            <>\n                <styled.divider />\n                <styled.HeaderSection style={{ marginTop: '.5rem' }}>\n                    <styled.HeaderSectionTitle>\n                        Cycle Time\n                    </styled.HeaderSectionTitle>\n                    <styled.RowContainer>\n                        <styled.QuantityText style={{ marginRight: '.25rem', display: 'flex', alignItems: 'center' }}>Auto</styled.QuantityText>\n                        <Switch\n                            onColor={theme.schema.lots.solid}\n                            style={{ transform: 'scale(0.8)' }}\n                            checked={stations[station_id]?.cycle_time_mode === 'manual'}\n                            onChange={switched => {\n                                handleToggleManualCycleTime(switched)\n                            }}\n                        />\n                        <styled.QuantityText style={{ marginLeft: '.25rem', display: 'flex', alignItems: 'center' }}>Manual</styled.QuantityText>\n                    </styled.RowContainer>\n\n\n                </styled.HeaderSection>\n\n                <styled.HeaderSection style={{ opacity: stations[station_id]?.cycle_time_mode === 'auto' && '70%', pointerEvents: stations[station_id]?.cycle_time_mode === 'auto' ? 'none' : 'auto', borderRadius: '0 3px 3px 0'}}>\n                    <styled.HeaderSectionTitle style={{ fontSize: '1rem' }}>\n                        (HH:MM:SS)\n                    </styled.HeaderSectionTitle>\n\n                    <TimePicker\n                        showHours={true}\n                        showMinutes={true}\n                        value={cycleTimeDisplayTime}\n                        onChange={(val) => {\n                            handleSaveCycleTime(val.format('HH:mm:ss'))\n                        }}\n                        style={{width: '5.5rem'}}\n                        allowEmpty={false}\n                        // disabled={stations[station_id]?.cycle_time_mode === 'auto'}\n                    />\n\n\n                </styled.HeaderSection>\n                <styled.divider />\n\n            </>\n        )\n    }\n\n    return (\n        <Column\n            setSelectedCards={setSelectedCards}\n            selectedCards={selectedCards}\n            sortDirection={sortDirection}\n            maxWidth={\"25rem\"}\n            sortMode={sortMode}\n            maxHeight={maxHeight}\n            id={id}\n            containerStyle={containerStyle}\n            HeaderContent={(numberOfLots = 0, lotQuantitySummation = 0) => {\n                if (isCollapsed) {\n                    return (\n                        <styled.StationHeader>\n                            <i className=\"fa fa-chevron-right\" aria-hidden=\"true\"\n                                onClick={() => setCollapsed(false)}\n                                style={{ cursor: 'pointer' }}\n                            />\n                        </styled.StationHeader>\n                    )\n                }\n                else {\n                    return (\n                        <styled.StationHeader>\n                            <styled.HeaderRow\n                                style={{\n                                    marginBottom: \"1rem\"\n                                }}\n                            >\n                                <i className=\"fa fa-chevron-down\" aria-hidden=\"true\"\n                                    onClick={() => setCollapsed(true)}\n                                    style={{ marginRight: \"1rem\", cursor: \"pointer\" }}\n                                />\n\n                                <styled.LabelContainer>\n                                    <styled.StationTitle>{stationName}</styled.StationTitle>\n                                </styled.LabelContainer>\n\n                                <i className=\"fas fa-ellipsis-h\" style={{ opacity: 0 }}></i>\n\n                            </styled.HeaderRow>\n\n                            <styled.HeaderRow>\n                                <div>\n                                    <styled.QuantityText>Lots: </styled.QuantityText>\n                                    <styled.QuantityText>{numberOfLots}</styled.QuantityText>\n                                </div>\n\n                                <div>\n                                    <styled.QuantityText>Total Quantity: </styled.QuantityText>\n                                    <styled.QuantityText>{lotQuantitySummation}</styled.QuantityText>\n                                </div>\n\n                            </styled.HeaderRow>\n                            {renderCycleTime()}\n                        </styled.StationHeader>\n                    )\n                }\n            }}\n            station_id={station_id}\n            stationName={stationName}\n            onCardClick={onCardClick}\n            cards={cards}\n            processId={processId}\n            isCollapsed={isCollapsed}\n        />\n    )\n})\n\nexport default StationsColumn\n","import styled, { css } from \"styled-components\";\nimport {Container} from \"react-smooth-dnd\";\n\n// export const RouteContainer = styled.div`\n//     display: flex;\n//     flex: 1;\n//     flex-direction: column;\n//     background: yellow;\n// `\n\nconst minHeight = \"10rem\"\nexport const RotatedRouteName = styled.span`\n// background: red;\n\ttransform: rotate(-90deg);\n\t// transform: translateY(50%);\n`\n\n\nexport const StationContainerCss = css`\n\tdisplay: flex;\n    flex-direction: column;\n    min-height: ${minHeight};\n    \n    width: ${props => props.isCollapsed ? \"2rem\" : \"fit-content\"};\n    max-width: ${props => props.isCollapsed ? \"2rem\" : \"fit-content\"};\n    min-width: ${props => props.isCollapsed ? \"2rem\" : \"fit-content\"};\n    margin-right: 1rem;\n    \n    border-radius: 1rem;\n    overflow: hidden;\n    \n    color: ${props => props.theme.bg.octonary};\n`\n\nexport const StationContainer = styled.div`\n    ${StationContainerCss};\n`\n\nexport const StationHeader = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    background: ${props => props.theme.bg.secondary};\n    padding: 0.5rem 1rem;\n`\n\nexport const HeaderRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    align-self: stretch;\n`\n\nexport const QuantityText = styled.span`\n    font-size: 1rem;\n    color: ${props => props.theme.textColor};\n\n`\n\n\nexport const TitleContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\n\n\nexport const RouteContainer = styled.div`\n\tdisplay: flex;\n\tborder-bottom: 1px solid black;\n\twidth: 100%;\n`\n\nexport const LabelContainer = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n    margin: 0 2rem;\n\t// justify-content: space-between;\n`\n\nexport const StationLabel = styled.span`\n    text-align: center;\n    margin-right: 1rem;\n    \n    font-size: ${props => props.theme.fontSize.sz3};\n`\n\nexport const StationTitle = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz3};\n    color: ${props => props.theme.textColor};\n`\n\n\n\nexport const StationButton = styled.button`\n\n`\n\nexport const BodyContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\t// flex: 1;\n\tmin-height: ${minHeight};\n\toverflow: hidden;\n\tbackground: ${props => props.theme.bg.quaternary};\n\topacity: ${props => props.dragEnter ? 0.75 : 1};\n\tborder-bottom-right-radius: 1rem;\n\tborder-bottom-left-radius: 1rem;\n\tjustify-content: center;\n`\n","import React, {useState} from \"react\";\n\n// functions external\nimport PropTypes from 'prop-types';\n\n// components internal\nimport Column from \"../column/column\";\nimport Button from \"../../../../../basic/button/button\";\n\nimport * as styled from \"./lot_queue.style\";\n\nconst LotQueue = ((props) => {\n\tconst {\n\t\tstation_id = \"QUEUE\",\n\t\tstationName = \"Unnamed\",\n\t\tonCardClick,\n\t\tcards,\n\t\tonAddLotClick,\n\t\tprocessId,\n\t\tsetShowCardEditor,\n\t\tshowCardEditor,\n\t\tmaxHeight,\n\t\tsortMode,\n\t\tsortDirection,\n\t\tselectedCards,\n\t\tsetSelectedCards\n\t} = props\n\n\tconst [isCollapsed, setCollapsed] = useState(false)\n\n\treturn(\n\t\t<Column\n\t\t\tsetSelectedCards={setSelectedCards}\n\t\t\tselectedCards={selectedCards}\n\t\t\tsortDirection={sortDirection}\n\t\t\tsortMode={sortMode}\n\t\t\tmaxHeight={maxHeight}\n\t\t\tmaxWidth={\"24rem\"}\n\t\t\tHeaderContent={(numberOfLots = 0, lotQuantitySummation = 0) => {\n\t\t\t\tif(isCollapsed) {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<styled.StationHeader>\n\t\t\t\t\t\t\t<i className=\"fa fa-chevron-right\" aria-hidden=\"true\"\n\t\t\t\t\t\t\t   onClick={() => setCollapsed(false)}\n\t\t\t\t\t\t\t\t style = {{cursor: \"pointer\"}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</styled.StationHeader>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<styled.StationHeader>\n\t\t\t\t\t\t\t<styled.HeaderRow\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tmarginBottom: \"1rem\"\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<i className=\"fa fa-chevron-down\" aria-hidden=\"true\"\n\t\t\t\t\t\t\t\t   onClick={() => setCollapsed(true)}\n\t\t\t\t\t\t\t\t\t style = {{cursor: \"pointer\"}}\n\n\t\t\t\t\t\t\t\t/>\n\n\n\t\t\t\t\t\t\t\t<styled.LabelContainer>\n\t\t\t\t\t\t\t\t\t<styled.StationTitle>{stationName}</styled.StationTitle>\n\t\t\t\t\t\t\t\t</styled.LabelContainer>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={onAddLotClick}\n\t\t\t\t\t\t\t\t\tschema={'lots'}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t+ Lot\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</styled.HeaderRow>\n\t\t\t\t\t\t\t<styled.HeaderRow\n\t\t\t\t\t\t\t\tstyle={{justifyContent: \"space-between\"}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>Lots: </styled.QuantityText>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>{numberOfLots}</styled.QuantityText>\n\t\t\t\t\t\t\t\t</div>\n\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>Total Quantity: </styled.QuantityText>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>{lotQuantitySummation}</styled.QuantityText>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</styled.HeaderRow>\n\n\t\t\t\t\t\t</styled.StationHeader>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}}\n\t\t\tstation_id={station_id}\n\t\t\tstationName = {stationName}\n\t\t\tonCardClick={onCardClick}\n\t\t\tcards = {cards}\n\t\t\tprocessId={processId}\n\t\t\tisCollapsed={isCollapsed}\n\t\t/>\n\t)\n\n\n})\n\n// Specifies propTypes\nLotQueue.propTypes = {\n\tstationName: PropTypes.string,\n\tonCardClick: PropTypes.func,\n\tonAddLotClick: PropTypes.func,\n\tsetShowCardEditor: PropTypes.func,\n\tshowCardEditor: PropTypes.bool\n};\n\n// Specifies the default values for props:\nLotQueue.defaultProps = {\n\tstationName: \"Unnamed\",\n\tonCardClick: ()=>{},\n\tonAddLotClick: ()=>{},\n\tcards: [],\n\tsetShowCardEditor: ()=>{},\n\tshowCardEditor: false\n};\n\nexport default LotQueue\n","import styled, { css } from \"styled-components\";\nimport {Container} from \"react-smooth-dnd\";\n\n// export const RouteContainer = styled.div`\n//     display: flex;\n//     flex: 1;\n//     flex-direction: column;\n//     background: yellow;\n// `\n\nconst minHeight = \"10rem\"\nexport const RotatedRouteName = styled.span`\n// background: red;\n\ttransform: rotate(-90deg);\n\t// transform: translateY(50%);\n`\n\n\nexport const StationContainerCss = css`\n\tdisplay: flex;\n    flex-direction: column;\n    min-height: ${minHeight};\n    \n    width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    max-width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    min-width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    margin-right: 1rem;\n    \n    border-radius: 1rem;\n    overflow: hidden;\n    \n    color: ${props => props.theme.bg.octonary};\n`\n\nexport const StationContainer = styled.div`\n    ${StationContainerCss};\n`\n\nexport const StationHeader = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    background: ${props => props.theme.bg.secondary};\n    padding: .5rem 1rem;\n`\n\nexport const HeaderRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    align-self: stretch;\n`\n\nexport const QuantityText = styled.span`\n    font-size: 1rem;\n    color: ${props => props.theme.textColor};\n`\n\nexport const HeaderContent = styled.div`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    justify-content: space-between;\n    align-items: center;\n    padding-left: 1rem;\n    padding-right: 1rem;\n \n \n`\n\n\nexport const TitleContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\n\n\nexport const RouteContainer = styled.div`\n\tdisplay: flex;\n\tborder-bottom: 1px solid black;\n\twidth: 100%;\n`\n\nexport const LabelContainer = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\t// justify-content: space-between;\n`\n\nexport const StationLabel = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz4};\n`\n\nexport const StationTitle = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz3};\n    color: ${props => props.theme.textColor};\n`\n\n\n\nexport const StationButton = styled.button`\n\n`\n\nexport const BodyContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\t// flex: 1;\n\tmin-height: ${minHeight};\n\toverflow: hidden;\n\tbackground: ${props => props.theme.bg.quaternary};\n\topacity: ${props => props.dragEnter ? 0.75 : 1};\n\tborder-bottom-right-radius: 1rem;\n\tborder-bottom-left-radius: 1rem;\n\tjustify-content: center;\n`\n","import {SortableContainer} from \"react-sortable-hoc\";\n\nimport * as styled from \"./finish_column.style\";\n\nimport React, {useState} from \"react\";\n\nimport Column from \"../column/column\"\n\nconst FinishColumn = ((props) => {\n\tconst {\n\t\tstation_id,\n\t\tstationName = \"Unnamed\",\n\t\tonCardClick,\n\t\tcards = [],\n\t\tprocessId,\n\t\tmaxHeight,\n\t\tsortMode,\n\t\tsortDirection,\n\t\tselectedCards,\n\t\tsetSelectedCards\n\t} = props\n\n\tconst [isCollapsed, setCollapsed] = useState(false)\n\n\treturn(\n\t\t<Column\n\t\t\tsetSelectedCards={setSelectedCards}\n\t\t\tselectedCards={selectedCards}\n\t\t\tsortDirection={sortDirection}\n\t\t\tmaxHeight={maxHeight}\n\t\t\tsortMode={sortMode}\n\t\t\tmaxWidth={\"24rem\"}\n\t\t\tHeaderContent={(numberOfLots = 0, lotQuantitySummation = 0)=>{\n\t\t\t\tif(isCollapsed) {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<styled.StationHeader>\n\t\t\t\t\t\t\t<i className=\"fa fa-chevron-right\" aria-hidden=\"true\"\n\t\t\t\t\t\t\t   onClick={() => setCollapsed(false)}\n\t\t\t\t\t\t\t\t style = {{cursor: \"pointer\"}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</styled.StationHeader>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<styled.StationHeader>\n\t\t\t\t\t\t\t<styled.HeaderRow style={{\n\t\t\t\t\t\t\t\tmarginBottom: \"1rem\"\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t<i className=\"fa fa-chevron-down\" aria-hidden=\"true\"\n\t\t\t\t\t\t\t\t   onClick={() => setCollapsed(true)}\n\t\t\t\t\t\t\t\t\t style = {{cursor: \"pointer\"}}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t<styled.LabelContainer>\n\n\t\t\t\t\t\t\t\t\t<styled.StationTitle>{stationName}</styled.StationTitle>\n\t\t\t\t\t\t\t\t</styled.LabelContainer>\n\n\t\t\t\t\t\t\t\t<i className=\"fas fa-ellipsis-h\" style={{opacity: 0}}></i>\n\t\t\t\t\t\t\t</styled.HeaderRow>\n\n\t\t\t\t\t\t\t<styled.HeaderRow>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>Lots: </styled.QuantityText>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>{numberOfLots}</styled.QuantityText>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>Total Quantity: </styled.QuantityText>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>{lotQuantitySummation}</styled.QuantityText>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</styled.HeaderRow>\n\t\t\t\t\t\t</styled.StationHeader>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}}\n\t\t\tstation_id={station_id}\n\t\t\tstationName = {stationName}\n\t\t\tonCardClick={onCardClick}\n\t\t\tcards = {cards}\n\t\t\tprocessId={processId}\n\t\t\tisCollapsed={isCollapsed}\n\t\t/>\n\t)\n\n\n})\n\nexport default FinishColumn\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  // max-height: ${props => props.maxHeight};\n  display: flex;\n  flex-direction: row;\n  padding: 1rem;\n  justify-content:  flex-start;\n`\n\nexport const ColumnGroup = styled.div`\ndisplay: flex;\nflex-direction: row;\npadding: 1rem 0rem;\nmargin: 0 1rem;\n// border: 1px solid lightgrey;\n`","import React, { useEffect, useState, memo, useMemo } from \"react\"\nimport useWindowDimensions from \"../../../../../higher_order_components/react-window-size\";\n\n// components internal\nimport StationsColumn from \"../columns/station_column/station_column\"\nimport LotQueue from \"../columns/lot_queue/lot_queue\"\nimport FinishColumn from \"../columns/finish_column/finish_column\"\n\n// functions external\nimport { useDispatch, useSelector } from \"react-redux\"\nimport PropTypes from \"prop-types\"\n\n// utils\nimport { getLotTotalQuantity, checkCardMatchesFilter, getMatchesFilter } from \"../../../../../methods/utils/lot_utils\";\nimport { getLoadStationId, getUnloadStationId } from \"../../../../../methods/utils/route_utils\";\n\n// styles\nimport * as styled from \"./card_zone.style\"\nimport { isObject } from \"../../../../../methods/utils/object_utils\";\nimport { isArray } from \"../../../../../methods/utils/array_utils\";\nimport { LOT_FILTER_OPTIONS, SORT_DIRECTIONS } from \"../../../../../constants/lot_contants\";\n\n\nconst CardZone = ((props) => {\n\n    // extract props\n    const {\n        handleCardClick,\n        processId,\n        setShowCardEditor,\n        showCardEditor,\n        maxHeight,\n        lotFilters,\n        lotFilterValue,\n        selectedFilterOption,\n        sortMode,\n        sortDirection,\n        selectedCards,\n        setSelectedCards,\n        handleAddLotClick,\n    } = props\n\n    const { height: windowHeight, width: windowWidth } = useWindowDimensions()\n\n    // redux state\n    const currentProcess = useSelector(state => { return state.processesReducer.processes[processId] }) || {}\n    const showFinish = currentProcess.showFinish === undefined ? true: currentProcess.showFinish\n    const showQueue = currentProcess.showQueue === undefined ? true: currentProcess.showQueue\n\n    const routes = useSelector(state => { return state.tasksReducer.tasks })\n    const allCards = useSelector(state => { return state.cardsReducer.processCards }) || {}\n    const stations = useSelector(state => { return state.stationsReducer.stations })\n    const draggedLotInfo = useSelector(state => { return state.cardPageReducer.droppedLotInfo })\n    const { shiftDetails } = useSelector(state => state.settingsReducer.settings)\n    const multipleFilters = useSelector(state => state.settingsReducer.settings.enableMultipleLotFilters)\n    const {\n        lotId: draggingLotId = \"\",\n        binId: draggingBinId = \"\"\n    } = draggedLotInfo || {}\n    // component state\n    const [cardsSorted, setCardsSorted] = useState({})\n    const [bins, setBins] = useState({})\n    const [queue, setQueue] = useState([])\n    const [finished, setFinished] = useState([])\n    const [deleteStationCycleTime, setDeleteStationCycleTime] = useState({})\n\n    const {\n        name: processName = \"\"\n    } = currentProcess || {}\n\n    const doesProcessEndInWarehouse = useMemo(() => {\n        const processRoutes = currentProcess.routes.map(routeId => routes[routeId]);\n\n        let loadStations = processRoutes.map(route => route.load);\n        let unloadStations = processRoutes.map(route => route.unload);\n\n        for (var i=0; i<unloadStations.length; i++) {\n            const unloadStationA = unloadStations[i];\n\n\n            if (loadStations.find(loadStation => loadStation === unloadStationA) === undefined) {\n                if (unloadStations.slice(0, i).find(unloadStationB => unloadStationB === unloadStationA) === undefined) {\n                    return stations[unloadStationA].type === 'warehouse'\n                }\n            }\n        }\n\n        return false;\n    }, [currentProcess.routes, stations])\n    // need to loop through the process's routes first and get all station ids involved in the process\n    // this must be done first in order to avoid showing lots that are in stations that are no longer a part of the process\n    useEffect(() => {\n        let prevLoadStationId\t\t// tracks previous load station id when looping through routes\n        let prevUnloadStationId\t\t// tracks previous unload station id when looping through routes\n        let tempBins = {}\t// temp var for storing sorted cards\n\n        // loop through routes, get load / unload station id and create entry in tempCardsSorted for each station\n        currentProcess.routes && currentProcess.routes.forEach((currRouteId, index) => {\n\n            // get current route and load / unload station ids\n            const currRoute = routes[currRouteId]\n            const loadStationId = getLoadStationId(currRoute)\n            const unloadStationId = getUnloadStationId(currRoute)\n\n            tempBins[loadStationId] = {\n                station_id: loadStationId,\n                cards: []\n            }\n\n            // add entry in tempCardsSorted\n            tempBins[unloadStationId] = {\n                station_id: unloadStationId,\n                cards: []\n            }\n\n            // update prevLoadStationId and prevUnloadStationId\n            prevLoadStationId = loadStationId\n            prevUnloadStationId = unloadStationId\n        })\n\n        setBins(tempBins)\n\n    }, [currentProcess, routes])\n\n\n    // now that the object keys have been made, loop through the process's cards and add them to the correct bins\n    useEffect(() => {\n        let tempQueue = []\t\t// temp var for storing queue lots\n        let tempFinished = []\t// temp var for storing finished lots\n        let tempCardsSorted = { ...bins }\n\n        const processCards = allCards[processId] || {}\n\n        Object.values(processCards).forEach((card) => {\n            // extract lot attributes\n            const {\n                bins: cardBins,\n                _id,\n                ...rest\n            } = card\n\n            const totalQuantity = getLotTotalQuantity(card)\n            // const matchesFilter = lotFilters.reduce((filter, matchesAll) => matchesAll && checkCardMatchesFilter(card, filter), true)\n            var matchesFilter = false\n            if(!!multipleFilters){\n              matchesFilter = lotFilters.reduce((matchesAll, filter) => matchesAll && checkCardMatchesFilter(card, filter), true)\n            }\n            else{\n              matchesFilter = getMatchesFilter(card, lotFilterValue, selectedFilterOption)\n            }\n\n            if (cardBins && matchesFilter) {\n\n                // loop through this lot's bins\n                Object.entries(cardBins).forEach((binEntry) => {\n\n                    // get bin attributes\n                    const binId = binEntry[0]\n                    const binValue = binEntry[1]\n                    const {\n                        count\n                    } = binValue\n\n                    if (!(count > -1)) return\n\n                    // don't render lot being dragged - prevents flicker bug after drop\n                    //if ((binId === draggingBinId) && (_id === draggingLotId)) return\n\n                    const lotItem = {\n                        ...rest,\n                        totalQuantity,\n                        binId,\n                        count,\n                        cardId: _id,\n                        processName\n                    }\n\n\n                    // if there is an entry in tempCardsSorted with key matching {binId}, add the lot to this bin\n                    if (bins[binId]) {\n                        // tempCardsSorted[binId].cards.push(lotItem)\n                        const currentObj = isObject(tempCardsSorted[binId]) ? tempCardsSorted[binId] : {}\n                        const existingCards = (isArray(currentObj.cards)) ? currentObj.cards : []\n\n                        tempCardsSorted = {\n                            ...tempCardsSorted,\n                            [binId]: {\n                                ...currentObj,\n                                cards: [...existingCards, lotItem]\n                            }\n                        }\n                    }\n\n                    // if {binId} is queue, add the lot to the queue\n                    else if (binId === \"QUEUE\") {\n                        tempQueue.push(lotItem)\n                    }\n\n                    // if the {binId} is finish, add the lot to the finished column\n                    else if (binId === \"FINISH\") {\n                        tempFinished.push(lotItem)\n                    }\n\n                })\n            }\n        })\n\n        setCardsSorted(tempCardsSorted)\n        setQueue(tempQueue)\n        setFinished(tempFinished)\n    }, [bins, allCards, processId, lotFilters, draggingBinId, draggingLotId, lotFilterValue, selectedFilterOption])\n\n    const renderStationColumns = useMemo(() => {\n\n        const columns = currentProcess.flattened_stations.map((stationNode, idx) => (\n\n            <div id={`column-${stationNode.stationID}`}>\n                <StationsColumn\n                    containerStyle={{marginTop: `${stationNode.depth*2}rem`, position: 'relative'}}\n                    setSelectedCards={setSelectedCards}\n                    selectedCards={selectedCards}\n                    sortMode={sortMode}\n                    sortDirection={sortDirection}\n                    maxHeight={maxHeight}\n                    id={processId + \"+\" + stationNode.stationID}\n                    station_id={stationNode.stationID}\n                    stationName={stations[stationNode.stationID].name}\n                    processId={processId}\n                    cards={cardsSorted[stationNode.stationID]?.cards || []}\n                    onCardClick={handleCardClick}\n                    autoCycleTime={deleteStationCycleTime[stationNode.stationID]}\n                />\n            </div>\n\n        ))\n\n        // const pathsBoxWidth = 26*(currentProcess.flattened_stations.length + 2)\n        // const pathsBoxHeight = 2*Math.max(...currentProcess.flattened_stations.map(node => node.depth))\n        // const paths = (\n        //     <div style={{zIndex: 1000, background: 'red', width: '400rem', top: 0, left: 0}}>\n        //     {/* <svg style={{background: 'rgba(0,0,0.3,0.3)', position: 'absolute'}} fill='yellow' viewBox={`0 0 ${100*pathsBoxWidth} ${100*pathsBoxHeight}`} width={`${pathsBoxWidth}rem`} height={`${pathsBoxHeight}rem`} > \n        //         {currentProcess.routes.map(routeId => {\n        //             const route = routes[routeId];\n        //             const loadIdx = currentProcess.flattened_stations.findIndex(node => node.stationID === route.load)\n        //             const unloadIdx = currentProcess.flattened_stations.findIndex(node => node.stationID === route.unload)\n\n        //             return <line x1={`${26*100*loadIdx}`} y1={200*currentProcess.flattened_stations[loadIdx].depth} x2={`${26*100*unloadIdx}`} y2={200*currentProcess.flattened_stations[unloadIdx].depth} stroke=\"black\" strokeWidth=\"10\"/>\n        //         })}\n        //     </svg> */}\n        //     </div>\n        // )\n\n        return (\n            <>\n                {columns}\n                {/* {paths} */}\n            </>\n        )\n\n    }, [cardsSorted, currentProcess])\n\n    return (\n        <styled.Container style={{ background: 'white' }}>\n            \n            <LotQueue\n                setSelectedCards={setSelectedCards}\n                selectedCards={selectedCards}\n                key={\"QUEUE\"}\n                sortMode={sortMode}\n                sortDirection={sortDirection}\n                maxHeight={maxHeight}\n                station_id={\"QUEUE\"}\n                setShowCardEditor={setShowCardEditor}\n                showCardEditor={showCardEditor}\n                stationName={\"Queue\"}\n                processId={processId}\n                cards={queue}\n                onCardClick={handleCardClick}\n                onAddLotClick={() => handleAddLotClick(processId)}\n            />\n\n            {renderStationColumns}\n\n            {!doesProcessEndInWarehouse &&\n                <FinishColumn\n                    setSelectedCards={setSelectedCards}\n                    selectedCards={selectedCards}\n                    key={\"FINISH\"}\n                    sortMode={sortMode}\n                    sortDirection={sortDirection}\n                    maxHeight={maxHeight}\n                    station_id={\"FINISH\"}\n                    setShowCardEditor={setShowCardEditor}\n                    showCardEditor={showCardEditor}\n                    stationName={\"Finished\"}\n                    processId={processId}\n                    cards={finished}\n                    onCardClick={handleCardClick}\n                />\n            }\n        </styled.Container>\n    )\n})\n\n// Specifies propTypes\nCardZone.propTypes = {\n    handleCardClick: PropTypes.func,\n    setShowCardEditor: PropTypes.func,\n    processId: PropTypes.string,\n    lotFilters: PropTypes.array,\n    lotFilterValue: PropTypes.any,\n    showCardEditor: PropTypes.bool,\n    maxHeight: PropTypes.any\n}\n\n// Specifies the default values for props:\nCardZone.defaultProps = {\n    handleCardClick: () => { },\n    processId: null,\n    setShowCardEditor: () => { },\n    showCardEditor: false,\n    maxHeight: null,\n    lotFilterValue: \"\",\n    selectedFilterOption: LOT_FILTER_OPTIONS.name,\n    lotFilters: [],\n    sortMode: LOT_FILTER_OPTIONS.name,\n    sortDirection: SORT_DIRECTIONS.ASCENDING,\n}\n\nexport default memo(CardZone)\n","// Import Store\nimport store from '../../redux/store/index'\nimport moment from 'moment';\n\nexport const getMinutesFromMoment = (m) => {\n    return m.minutes() + m.hours() * 60;\n}\n\n/**\n * Takes in time12h which is a string: 1:30 pm\n * Converts that string into a 24h string: 13:30\n * @param {*} time12h \n */\nexport const convert12hto24h = (time12h) => {\n    const [numericTime, modifier] = time12h.split(' ');\n\n    let [hours, minutes] = numericTime.split(':');\n\n    if (hours === '12' && (modifier === 'AM' || modifier === 'am')) {\n        hours = '00';\n    } else if (hours === '12' && (modifier === 'PM' || modifier === 'pm')) {\n        hours = '12';\n    }\n\n    if ((modifier === 'PM' || modifier === 'pm') && hours !== '12') {\n        hours = parseInt(hours, 10) + 12;\n    }\n    return `${hours}:${minutes}`\n}\n\n/**\n * Takes in a string time24h: 13:30\n * Converts that string into a 12h string: 1:30 pm\n * @param {*} time24h \n */\nexport const convert24hto12h = (time24h) => {\n    let modifier = 'am'\n\n    let [hours, minutes] = time24h.split(':');\n\n    hours = parseInt(hours)\n\n    if (hours >= 12) {\n        if (hours > 12) {\n            hours = hours - 12\n        }\n        modifier = 'pm'\n    }\n\n    if (minutes.length === 1) {\n        minutes = `0${minutes}`\n    }\n\n    return `${hours}:${minutes} ${modifier}`\n\n}\n\n/**\n * Takes in a string: 1 pm\n * Converts that string to 24 hours: 13:000\n * @param {*} string \n */\nexport const convertTimeStringto24h = (string) => {\n    let [hour, modifier] = string.split(' ');\n    hour = parseInt(hour)\n\n    // If pm and not 12pm then add 12\n    if (modifier === 'pm' && hour !== 12) {\n        hour = hour + 12\n    }\n\n    // If hour is 12pmm, then set to 0\n    if (hour === 12 && modifier === 'pm') {\n        hour = 0\n    }\n\n    // Convert back to string\n    // Add 0 to front if need be\n    if (hour < 10) {\n        hour = hour.toString()\n        hour = `0${hour}`\n    }\n    else {\n        hour = hour.toString()\n    }\n\n    return `${hour}:00`\n\n}\n\nexport const convertEpochTo12h = (epoch) => {\n\n    let convertedTime = new Date(epoch * 1000)\n    let hour = convertedTime.getHours()\n    let minute = convertedTime.getMinutes()\n\n    hour = parseInt(hour)\n    minute = parseInt(minute)\n\n    if (hour < 10) {\n        hour = hour.toString()\n        hour = `0${hour}`\n    }\n    else {\n        hour = hour.toString()\n    }\n\n    if (minute < 10) {\n        minute = minute.toString()\n        minute = `0${minute}`\n    }\n    else {\n        minute = minute.toString()\n    }\n\n    return `${hour}:${minute}`\n}\n\n/**\n * Converts 24h string to int\n * '13:00' is converted to 1300\n * @param {*} time24h \n */\nexport const convert24htoInt = (time24h) => {\n    const [hour, minute] = time24h.split(':')\n    return parseInt(`${hour}${minute}`)\n}\n\n/**\n * Converts into to 24h\n * 1300 is converted to '13:00'\n * @param {*} int \n */\nexport const convertIntto24h = (int) => {\n    let hour\n    let minute\n\n    // If the string length is 3, then the hour must start with a 0\n    if (int.toString().length === 3) {\n        hour = `0${int.toString()[0]}`\n        minute = `${int.toString()[1]}${int.toString()[2]}`\n    }\n    else {\n        hour = `${int.toString()[0]}${int.toString()[1]}`\n        minute = `${int.toString()[2]}${int.toString()[3]}`\n    }\n    return `${hour}:${minute}`\n}\n\n/**\n * Converts strings into time\n * time24h string format: 13:00\n * date string format: May 13, 1993\n * @param {*} time24h \n * @param {*} date \n */\nexport const convert24htoEpoch = (time24h, date) => {\n    const epochTime = Date.parse(`${date} ${time24h}`)\n\n    return epochTime\n}\n\nexport const convertDateToLocaleTimeZone = (date, timezone) => {\n    return new Date(date.toLocaleString(\"en-US\", { timeZone: timezone }))\n}\n\nexport const convertDateto12h = (date) => {\n    const settingState = store.getState().settingsReducer\n\n    if (!!settingState?.settings?.timezone?.label) {\n        date = convertDateToLocaleTimeZone(date, settingState?.settings?.timezone?.label)\n    }\n\n    return convert24hto12h(`${date.getHours()}:${date.getMinutes()}`)\n\n}\n\n\nexport const isDateToday = (date) => {\n    const today = new Date()\n    const incomingDate = new Date(date)\n    // call setHours to take the time out of the comparison\n    if (incomingDate.setHours(0, 0, 0, 0) === today.setHours(0, 0, 0, 0)) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n// Takes shift details and returns total work time in seconds\nexport const convertShiftDetailsToWorkingTime = (shiftDetails) => {\n    let totalBreakTime = 0\n\n    Object.values(shiftDetails.breaks)\n        .sort((a, b) => a.startOfBreak - b.startOfBreak)\n        .forEach(br => {\n            if (br.enabled) {\n\n                const start = moment.duration(br.startOfBreak).asSeconds()\n                const end = moment.duration(br.endOfBreak).asSeconds()\n\n                const breakLength = end - start\n                totalBreakTime += breakLength\n\n            }\n        })\n\n\n    const startOfShift = moment.duration(shiftDetails.startOfShift).asSeconds()\n    const endOfShift = moment.duration(shiftDetails.endOfShift).asSeconds()\n\n    const workingTime = endOfShift - startOfShift - totalBreakTime\n    return workingTime\n\n}\n\n// Converts time string to \nexport const convertHHMMSSStringToSeconds = (timeStr) => {\n    let [hour, minute, second] = timeStr.split(':')\n\n    hour = parseInt(hour)\n    minute = parseInt(minute)\n    second = parseInt(second)\n\n    const totalSeconds = hour * 60 * 60 + minute * 60 + second\n    return totalSeconds\n}\n\n// Convert Seconds to HHMMSS\nexport const convertSecondsToHHMMSS = (seconds) => {\n    const date = new Date(seconds * 1000).toISOString().substr(11, 8)\n    return date\n}"],"sourceRoot":""}