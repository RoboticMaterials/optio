{"version":3,"sources":["constants/location_constants.js","components/map/right_click_menu/right_click_menu.style.js","components/map/right_click_menu/right_click_menu.js"],"names":["LocationDefaultAttributes","name","schema","type","pos_x","pos_y","rotation","x","y","_id","map_id","cycle_time","manual_cycle_time","cycle_time_mode","temp","MenuContainer","styled","div","MenuButton","button","props","theme","bg","tertiary","RightClickMenu","coords","buttonClicked","d3","dispatch","useDispatch","dispatchSetSelectedStation","station","setSelectedStation","dispatchShowSideBar","bool","setOpen","currentMapId","useSelector","state","localReducer","localSettings","editingStation","stationsReducer","selectedStation","positionsReducer","selectedPosition","editingProcess","processesReducer","history","useHistory","onAddStation","a","pos","convertD3ToReal","defaultAttributes","deepCopy","uuid","v4","attributes","StationTypes","tempSelectedStation","setEditingStation","children","setSelectedStationChildrenCopy","addStation","push","style","top","left","onClick"],"mappings":"sHAAA,kCAAO,IAAMA,EAA4B,CACrCC,KAAM,KACNC,OAAQ,KACRC,KAAM,KACNC,MAAO,EACPC,MAAO,EACPC,SAAU,EACVC,EAAG,EACHC,EAAG,EACHC,IAAK,GACLC,OAAQ,KACRC,WAAY,EACZC,kBAAmB,EACnBC,gBAAiB,OACjBC,MAAM,I,8LCXGC,EAAgBC,IAAOC,IAAV,gZAoBbC,EAAaF,IAAOG,OAAV,wUAWK,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,GAAGC,Y,wBCqHrCC,UAjHQ,SAACJ,GAEpB,IACIK,EAGAL,EAHAK,OACAC,EAEAN,EAFAM,cACAC,EACAP,EADAO,GAGEC,EAAWC,cAMXC,EAA6B,SAACC,GAAD,OAAaH,EAASI,YAAmBD,KAItEE,EAAsB,SAACC,GAAD,OAAUN,EAASO,YAAQD,KAEjDE,EAAeC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAaC,cAAcJ,gBAIrEK,GAFkBJ,aAAY,SAAAC,GAAK,OAAIA,EAAMI,gBAAgBC,mBAC1CN,aAAY,SAAAC,GAAK,OAAIA,EAAMM,iBAAiBC,oBAC9CR,aAAY,SAAAC,GAAK,OAAIA,EAAMI,gBAAgBD,mBAC5DK,EAAiBT,aAAY,SAAAC,GAAK,OAAIA,EAAMS,iBAAiBD,kBAC7DE,EAAUC,cA4BVC,EAAY,uCAAG,kCAAAC,EAAA,sDAEXC,EAAMC,YAAgB,CAAC5B,EAAOlB,EAAGkB,EAAOjB,GAAImB,IAE5C2B,EAAoBC,YAASvD,MAElB,OAAaoC,EAC9BkB,EAAiB,IAAUE,IAAKC,KAChCH,EAAiB,MAAYF,EAAI,GACjCE,EAAiB,MAAYF,EAAI,GACjCE,EAAiB,EAAQ7B,EAAOlB,EAChC+C,EAAiB,EAAQ7B,EAAOjB,EAChC8C,EAAiB,MAAW,EAGtBI,EAAaH,YAASI,IAAY,MAAUD,YAE5CE,EAjBW,uCAkBVN,GACAI,GAnBU,IAoBbzD,KAAM,KA3DkBiC,GA8DL,EA9DcN,EAASiC,YAAkB3B,IACpB4B,EA8DL,GA9DkBlC,EAASmC,YAA+BD,IAHzE/B,EAkEL6B,EAlEiBhC,EAASoC,YAAWjC,IAmExDD,EAA2B8B,GAE3BZ,EAAQiB,KAAK,cAEbhC,GAAoB,GAGpBP,IAjCiB,kCAzCM,IAACK,EAGoB+B,EADhB5B,IAuCX,OAAH,qDAoClB,OACE,mCACIY,GAAmBL,EAcnB,6BAbA,cAAC,EAAD,CAAsByB,MAAO,CAAEC,IAAK1C,EAAOjB,EAAG4D,KAAM3C,EAAOlB,GAA3D,SAOQ,cAAC,EAAD,CAAmB8D,QAASnB,EAA5B","file":"static/js/36.30791db4.chunk.js","sourcesContent":["export const LocationDefaultAttributes = {\n    name: null,\n    schema: null,\n    type: null,\n    pos_x: 0,\n    pos_y: 0,\n    rotation: 0,\n    x: 0,\n    y: 0,\n    _id: '',\n    map_id: null,\n    cycle_time: 0,\n    manual_cycle_time: 0,\n    cycle_time_mode: 'auto',\n    temp: true\n}","import styled from 'styled-components'\n\n\nexport const MenuContainer = styled.div`\n    position: absolute;\n    width: 12rem;\n    height: auto;\n    z-index: 10000;\n\n    background: white;\n\n    box-shadow: 0 0.1rem 0.2rem 0rem #303030;\n    border-radius: 0.3rem;\n\n    backdrop-filter: blur(10px);\n    background-color: rgba(255, 255, 255, 0.6);\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow: hidden;\n`\n\nexport const MenuButton = styled.button`\n    border: none;\n    text-align: center;\n    width: 100%;\n    height: 2rem;\n    outline:none;\n\n\n    background-color: transparent;\n\n    &:hover{\n        background-color: ${props => props.theme.bg.tertiary};\n    }\n\n    &:focus{\n        outline: 0 !important\n    }\n\n    &:active{\n        box-shadow: none;\n    }\n`;","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\n\nimport { useSelector, useDispatch } from 'react-redux'\n\n// Import actions\nimport { addStation, setSelectedStation, setEditingStation } from '../../../redux/actions/stations_actions'\nimport { addPosition, setSelectedPosition, setEditingPosition, setSelectedStationChildrenCopy } from '../../../redux/actions/positions_actions'\nimport { setOpen } from \"../../../redux/actions/sidebar_actions\"\n\n// Import utils\nimport { convertD3ToReal } from '../../../methods/utils/map_utils'\nimport { deepCopy } from '../../../methods/utils/utils'\n\n// Import Constants\nimport { PositionTypes } from '../../../constants/position_constants'\nimport { LocationDefaultAttributes } from '../../../constants/location_constants'\nimport { StationTypes } from '../../../constants/station_constants'\n\n\n// import styling\nimport * as styled from './right_click_menu.style'\n\nimport uuid from 'uuid'\n\n/**\n * This is the menu that opens on right click\n * It does some funky things that will be explained here\n *\n * Send cart to location\n * Makes a temp position with a schema of 'temporary_position'\n * That schema is used in locations, widgets, map view and positions to tell if its a right click menu\n * If it is a right click menu position then the widgets should always be displayed for send or cancel, and not disappear on mouse leave. (see map_view and widgets)\n *\n * The widget buttons have custom actions, and those actions can be found inside of widget_button is widgets\n * @param {*} props\n */\nconst RightClickMenu = (props) => {\n\n    const {\n        coords,\n        buttonClicked,\n        d3,\n    } = props\n\n    const dispatch = useDispatch()\n\n    const dispatchAddPositions = (position) => dispatch(addPosition(position))\n    const dispatchSetSelectedPosition = (position) => dispatch(setSelectedPosition(position))\n\n    const dispatchAddStation = (station) => dispatch(addStation(station))\n    const dispatchSetSelectedStation = (station) => dispatch(setSelectedStation(station))\n    const dispatchEditingStation = (bool) => dispatch(setEditingStation(bool))\n    const dispatchSetSelectedStationChildrenCopy = (children) => dispatch(setSelectedStationChildrenCopy(children))\n\n    const dispatchShowSideBar = (bool) => dispatch(setOpen(bool))\n\n    const currentMapId = useSelector(state => state.localReducer.localSettings.currentMapId)\n    const deviceEnabled = false\n    const selectedStation = useSelector(state => state.stationsReducer.selectedStation)\n    const selectedPosition = useSelector(state => state.positionsReducer.selectedPosition)\n    const editingStation = useSelector(state => state.stationsReducer.editingStation)\n    const editingProcess = useSelector(state => state.processesReducer.editingProcess)\n    const history = useHistory()\n\n\n    const disbaleStation = !!selectedStation ? true : !!selectedPosition ? true : false\n\n    const onSendCartToPosition = async () => {\n        const pos = convertD3ToReal([coords.x, coords.y], d3)\n\n        const tempSelectedPosition = {\n            name: '',\n            schema: 'temporary_position',\n            type: 'cart_position',\n            map_id: currentMapId,\n            pos_x: pos[0],\n            pos_y: pos[1],\n            rotation: 0,\n            x: coords.x,\n            y: coords.y,\n            _id: uuid.v4()\n        }\n\n        await Object.assign(tempSelectedPosition, { ...PositionTypes['temporary_cart_position'].attributes, temp: true })\n        await dispatchAddPositions(tempSelectedPosition)\n        await dispatchSetSelectedPosition(tempSelectedPosition)\n\n        buttonClicked()\n    }\n\n    const onAddStation = async () => {\n\n        const pos = convertD3ToReal([coords.x, coords.y], d3)\n\n        const defaultAttributes = deepCopy(LocationDefaultAttributes)\n\n        defaultAttributes['map_id'] = currentMapId\n        defaultAttributes['_id'] = uuid.v4()\n        defaultAttributes['pos_x'] = pos[0]\n        defaultAttributes['pos_y'] = pos[1]\n        defaultAttributes['x'] = coords.x\n        defaultAttributes['y'] = coords.y\n        defaultAttributes['temp'] = false\n\n\n        const attributes = deepCopy(StationTypes['human'].attributes)\n\n        const tempSelectedStation = {\n            ...defaultAttributes,\n            ...attributes,\n            name: \"\"\n        }\n\n        dispatchEditingStation(true)\n        dispatchSetSelectedStationChildrenCopy({})\n        dispatchAddStation(tempSelectedStation)\n        dispatchSetSelectedStation(tempSelectedStation)\n\n        history.push('/locations')\n\n        dispatchShowSideBar(true)\n\n\n        buttonClicked()\n    }\n\n    return (\n      <>\n        {!editingProcess && !editingStation ?\n          <styled.MenuContainer style={{ top: coords.y, left: coords.x }}>\n              {deviceEnabled ?\n                  <>\n                      <styled.MenuButton disabled={disbaleStation} onClick={() => !disbaleStation && onAddStation()}>Add Station</styled.MenuButton>\n                      <styled.MenuButton disabled={disbaleStation} onClick={onSendCartToPosition}>Send Cart to Position</styled.MenuButton>\n                  </>\n                  :\n                  <styled.MenuButton onClick={onAddStation}>Add Station</styled.MenuButton>\n\n              }\n\n          </styled.MenuContainer>\n          :\n          <></>\n        }\n      </>\n\n    )\n}\n\nexport default RightClickMenu\n"],"sourceRoot":""}