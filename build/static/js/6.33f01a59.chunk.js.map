{"version":3,"sources":["higher_order_components/react-window-size.js","components/side_bar/content/cards/columns/station_column/station_column.style.js","components/side_bar/content/cards/columns/column/column.style.js","components/side_bar/content/cards/columns/column/column.js","components/side_bar/content/cards/columns/station_column/station_column.js","components/side_bar/content/cards/columns/lot_queue/lot_queue.style.js","components/side_bar/content/cards/columns/lot_queue/lot_queue.js","components/side_bar/content/cards/columns/finish_column/finish_column.style.js","components/side_bar/content/cards/columns/finish_column/finish_column.js","components/side_bar/content/cards/card_zone/card_zone.style.js","components/side_bar/content/cards/card_zone/card_zone.js","methods/utils/time_utils.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","minHeight","StationContainerCss","styled","span","css","props","isCollapsed","theme","bg","octonary","StationHeader","div","secondary","HeaderRow","QuantityText","textColor","LabelContainer","StationTitle","fontSize","sz4","senary","sz3","HeaderSection","button","quaternary","dragEnter","HeaderSectionTitle","h5","septenary","font","primary","RowContainer","divider","hr","RotationWrapperOuter","RotationWrapperInner","LotDiv","DragToDiv","dragDivHeight","tertiary","RotatedRouteName","StationContainer","maxWidth","maxHeight","BodyContainer","schema","lots","solid","Column","station_id","stationName","onCardClick","selectedCards","processId","HeaderContent","sortMode","sortDirection","containerStyle","setSelectedCards","reduxCards","useSelector","state","cardsReducer","processCards","hoveringLotId","cardPageReducer","draggingLotId","draggingStationId","lotDivHeight","dragFromBin","routes","tasksReducer","tasks","stations","stationsReducer","processes","processesReducer","showCardEditor","dashboardsReducer","kickOffEnabledDashboards","showEditor","hideCard","lotRef","useHistory","location","pathname","includes","useRef","dragContainerRef","dispatch","useDispatch","dispatchPutCard","card","ID","a","putCard","dispatchSetLotHovering","lotId","setLotHovering","dispatchSetDraggingLotId","setDraggingLotId","dispatchSetDraggingStationId","stationId","setDraggingStationId","dispatchSetDragFromBin","setDragFromBin","dispatchSetHideCard","setHideCard","useState","lotQuantitySummation","setLotQuantitySummation","numberOfLots","setNumberOfLots","cards","setCards","enableFlags","highlightStation","setHighlightStation","acceptDrop","setAcceptDrop","setInDropZone","useEffect","tempLotQuantitySummation","tempNumberOfLots","forEach","currLot","count","parseInt","isSelectedCardsNotEmpty","tempCards","sortBy","accDrop","shouldAcceptDrop","process_id","deepCopy","ind","findIndex","cardId","splice","push","binId","lastStationTraversed","oldProcessId","process","processRoutes","map","routeId","startNodes","findProcessStartNodes","endNode","findProcessEndNodes","forwardsTraverseCheck","currentStationID","startDivergeType","length","nextRoutes","filter","route","load","divergeType","unload","backwardsTraverseCheck","mergingRoutes","dispersingRoutes","onMouseLeave","event","getLastSelected","lastSelectedIndex","addedIndex","i","getLastSelectedIndex","handleDrop","inDropZne","lastStn","droppedCard","oldBins","bins","movedBin","stationBeforeMerge","updatedLot","handleNextStationBins","handleCurrentStationBins","Object","values","_id","then","res","style","padding","whiteSpace","overflow","textOverflow","onDragOver","e","current","preventDefault","onDragLeave","pointerEvents","class","ref","index","leadTime","name","object_id","flags","lotNum","totalQuantity","selectable","processName","lotTemplateId","partBins","keys","part","isPartial","partialVisibility","offset","bottom","top","isVisible","id","onMouseEnter","onDragStart","offsetHeight","setLotDivHeight","target","opacity","onDragEnd","background","borderRadius","onDeleteDisabledLot","partId","currBin","submitLot","handleDeleteDisabledLot","onRightClickDeleteLot","handleRightClickDeleteLot","enableFlagSelector","lotNumber","onClick","payload","lastSelectedLotId","selectedIndex","currLotId","currBinId","existingIndex","slice","reverse","getBetweenSelected","borderBottom","borderRight","borderLeft","borderTop","boxShadow","margin","StationsColumn","autoCycleTime","dispatchPutStation","station","putStation","useTheme","setCollapsed","cycleTimeDisplayTime","useMemo","time","cycle_time_mode","cycle_time","convertSecondsToHHMMSS","manual_cycle_time","splitVal","split","moment","set","renderCycleTime","marginTop","marginRight","display","alignItems","onColor","transform","checked","onChange","switched","isManual","handleToggleManualCycleTime","marginLeft","showHours","showMinutes","value","val","convertHHMMSSStringToSeconds","handleSaveCycleTime","format","allowEmpty","className","aria-hidden","cursor","marginBottom","justifyContent","LotQueue","onAddLotClick","setShowCardEditor","defaultProps","FinishColumn","Container","CardZone","handleCardClick","lotFilters","lotFilterValue","selectedFilterOption","handleAddLotClick","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","currentProcess","undefined","showFinish","showQueue","allCards","lotTemplatesReducer","lotTemplates","draggedLotInfo","droppedLotInfo","multipleFilters","settingsReducer","settings","shiftDetails","enableMultipleLotFilters","draggingBinId","cardsSorted","setCardsSorted","setBins","queue","setQueue","finished","setFinished","deleteStationCycleTime","doesProcessEndInAllWarehouses","nodeId","type","every","tempBins","currRouteId","currRoute","loadStationId","getLoadStationId","unloadStationId","getUnloadStationId","tempQueue","tempFinished","tempCardsSorted","cardBins","rest","getLotTotalQuantity","matchesFilter","reduce","matchesAll","checkCardMatchesFilter","getMatchesFilter","entries","binEntry","lotItem","currentObj","isObject","existingCards","isArray","renderStationColumns","columns","flattened_stations","stationNode","idx","stationID","depth","position","LOT_FILTER_OPTIONS","SORT_DIRECTIONS","ASCENDING","memo","convert12hto24h","time12h","numericTime","modifier","hours","minutes","timeStr","hour","minute","second","seconds","Date","toISOString","substr","secondsToReadable","short","days","Math","floor","remainingSeconds","round","readable"],"mappings":"6KAEA,SAASA,IAAuB,IAAD,EACsBC,OACnD,MAAO,CACLC,MAH2B,EACrBC,WAGNC,OAJ2B,EACFC,a,wLCOvBC,I,OAAY,SAQLC,IAPmBC,KAAOC,KAAV,kHAOMC,aAAH,6PAGdJ,IAEL,SAAAK,GAAK,OAAIA,EAAMC,YAAc,OAAS,WAClC,SAAAD,GAAK,OAAIA,EAAMC,YAAc,OAAS,WACtC,SAAAD,GAAK,OAAIA,EAAMC,YAAc,OAAS,WAM1C,SAAAD,GAAK,OAAIA,EAAME,MAAMC,GAAGC,aAOxBC,IAJmBR,KAAOS,IAAV,sCACvBV,IAGuBC,KAAOS,IAAV,wMAMR,SAAAN,GAAK,OAAIA,EAAME,MAAMC,GAAGI,cAI7BC,GAAYX,KAAOS,IAAV,0IAOTG,GAAeZ,KAAOC,KAAV,oEAEZ,SAAAE,GAAK,OAAIA,EAAME,MAAMQ,aAyBrBC,IAtBgBd,KAAOS,IAAV,4JASIT,KAAOS,IAAV,0EAOGT,KAAOS,IAAV,kGAMGT,KAAOS,IAAV,2JAiBdM,IATef,KAAOC,KAAV,8KAER,SAAAE,GAAK,OAAIA,EAAME,MAAMW,SAASC,OAI7B,SAAAd,GAAK,OAAIA,EAAME,MAAMC,GAAGY,UAGdlB,KAAOC,KAAV,yQAER,SAAAE,GAAK,OAAIA,EAAME,MAAMW,SAASG,OAMlC,SAAAhB,GAAK,OAAIA,EAAME,MAAMQ,cAsBrBO,IAjBgBpB,KAAOqB,OAAV,+BAIGrB,KAAOS,IAAV,2QAIXX,IAEA,SAAAK,GAAK,OAAIA,EAAME,MAAMC,GAAGgB,cAC3B,SAAAnB,GAAK,OAAIA,EAAMoB,UAAY,IAAO,KAMjBvB,KAAOS,IAAV,+RAcbe,GAAqBxB,KAAOyB,GAAV,8FAElB,SAAAtB,GAAK,OAAIA,EAAME,MAAMC,GAAGoB,aAClB,SAAAvB,GAAK,OAAIA,EAAME,MAAMsB,KAAKC,WAGhCC,GAAe7B,KAAOS,IAAV,2EAKZqB,GAAU9B,KAAO+B,GAAV,kJAEA,SAAA5B,GAAK,OAAIA,EAAME,MAAMC,GAAGgB,c,iGCxJ/BU,GAAuBhC,KAAOS,IAAV,gDAIpBwB,GAAuBjC,KAAOS,IAAV,gDAGpByB,GAASlC,KAAOS,IAAV,+BAIN0B,GAAYnC,KAAOS,IAAV,wNAKN,SAAAN,GAAK,OAAKA,EAAMiC,cAA0BjC,EAAMiC,cAAhB,WAChC,SAAAjC,GAAK,OAAIA,EAAME,MAAMC,GAAG+B,YAO3BC,GAAmBtC,KAAOC,KAAV,mPAehBsC,IAJsBrC,aAAH,+BAIAF,KAAOS,IAAV,mTAzCX,SA8CL,SAAAN,GAAK,OAAIA,EAAMC,YAAc,OAASD,EAAMqC,YACxC,SAAArC,GAAK,OAAIA,EAAMC,YAAc,OAASD,EAAMqC,YAC5C,SAAArC,GAAK,OAAIA,EAAMC,YAAc,OAASD,EAAMqC,YAG3C,SAAArC,GAAK,OAAIA,EAAMsC,WAAatC,EAAMsC,aAKvC,SAAAtC,GAAK,OAAIA,EAAME,MAAMC,GAAGC,aA4BxBmC,IAzBgB1C,KAAOS,IAAV,8KAMR,SAAAN,GAAK,OAAIA,EAAME,MAAMC,GAAGI,aAGZV,KAAOS,IAAV,0EAKGT,KAAOS,IAAV,kGAMCT,KAAOC,KAAV,2EAER,SAAAE,GAAK,OAAIA,EAAME,MAAMW,SAASC,OAGlBjB,KAAOS,IAAV,mWAKV,SAAAN,GAAK,OAAIA,EAAME,MAAMC,GAAGI,aAIP,SAAAP,GAAK,OAAIA,EAAME,MAAMsC,OAAOC,KAAKC,SAC/B,SAAA1C,GAAK,OAAIA,EAAME,MAAMsC,OAAOC,KAAKC,SAClC,SAAA1C,GAAK,OAAIA,EAAME,MAAMsC,OAAOC,KAAKC,U,wDC0hBpDC,GAvlBC,SAAC3C,GAAW,IAG1B4C,EAaG5C,EAbH4C,WAHyB,EAgBtB5C,EAZH6C,mBAJyB,MAIX,UAJW,EAKzBC,EAWG9C,EAXH8C,YACAC,EAUG/C,EAVH+C,cACAC,EASGhD,EATHgD,UACAC,EAQGjD,EARHiD,cACAhD,EAOGD,EAPHC,YACAoC,EAMGrC,EANHqC,SACAC,EAKGtC,EALHsC,UACAY,EAIGlD,EAJHkD,SACAC,EAGGnD,EAHHmD,cAEAC,GACGpD,EAFHqD,iBAEGrD,EADHoD,gBAIKE,EAAaC,cAAY,SAAAC,GAAW,OAAOA,EAAMC,aAAaC,aAAaV,OAAiB,GAC5FW,EAAgBJ,cAAY,SAAAC,GAAW,OAAOA,EAAMI,gBAAgBD,kBAAoB,KACxFE,EAAgBN,cAAY,SAAAC,GAAW,OAAOA,EAAMI,gBAAgBC,kBAAoB,KACxFC,EAAoBP,cAAY,SAAAC,GAAK,OAAIA,EAAMI,gBAAgBE,sBAAsB,KACrFC,EAAeR,cAAY,SAAAC,GAAK,OAAIA,EAAMI,gBAAgBG,iBAAiB,KAC3EC,EAAcT,cAAY,SAAAC,GAAK,OAAIA,EAAMI,gBAAgBI,gBAAgB,KACzEC,EAASV,cAAY,SAAAC,GAAK,OAAIA,EAAMU,aAAaC,SACjDC,EAAWb,cAAY,SAAAC,GAAK,OAAIA,EAAMa,gBAAgBD,YACtDE,EAAYf,cAAY,SAAAC,GAAK,OAAIA,EAAMe,iBAAiBD,aAExDE,GADoBjB,cAAY,SAAAC,GAAW,OAAOA,EAAMiB,kBAAkBC,4BACzDnB,cAAY,SAAAC,GAAW,OAAOA,EAAMC,aAAakB,eAClEC,EAAWrB,cAAY,SAAAC,GAAK,OAAIA,EAAMI,gBAAgBgB,YAKtDC,GAJUC,eACUC,SAASC,SACHC,SAAS,cAE1BC,iBAAO,OAChBC,EAAmBD,iBAAO,MAC1BE,EAAWC,eACXC,EAAe,yCAAG,WAAOC,EAAMC,GAAb,UAAAC,EAAA,sEAA0BL,EAASM,aAAQH,EAAMC,IAAjD,mFAAH,wDAGfG,EAAsB,yCAAG,WAAOC,GAAP,UAAAH,EAAA,sEAAuBL,EAASS,aAAeD,IAA/C,mFAAH,sDACtBE,EAAwB,yCAAG,WAAOF,GAAP,UAAAH,EAAA,sEAAuBL,EAASW,aAAiBH,IAAjD,mFAAH,sDACxBI,EAA4B,yCAAG,WAAOC,GAAP,UAAAR,EAAA,sEAA2BL,EAASc,aAAqBD,IAAzD,mFAAH,sDAC5BE,EAAsB,yCAAG,WAAOF,GAAP,UAAAR,EAAA,sEAA2BL,EAASgB,aAAeH,IAAnD,mFAAH,sDACtBI,EAAmB,yCAAG,WAAOd,GAAP,UAAAE,EAAA,sEAAsBL,EAASkB,aAAYf,IAA3C,mFAAH,sDA7CC,EAgDQgB,oBAAS,GAhDjB,gCAiD8BA,mBAAS,IAjDvC,mBAiDnBC,EAjDmB,KAiDGC,EAjDH,OAkDcF,mBAAS,GAlDvB,mBAkDnBG,EAlDmB,KAkDLC,EAlDK,OAmDAJ,mBAAS,IAnDT,mBAmDnBK,EAnDmB,KAmDZC,EAnDY,QAoDYN,oBAAS,GApDrB,qBAoDnBO,GApDmB,gBAqDOP,oBAAS,IArDhB,qCAsDsBA,oBAAS,IAtD/B,qBAsDnBQ,GAtDmB,MAsDDC,GAtDC,SAuDUT,oBAAS,GAvDnB,qBAuDnBU,GAvDmB,MAuDPC,GAvDO,SAwDUX,oBAAS,GAxDnB,qBAwDPY,IAxDO,aA0D1BC,qBAAU,WACT,IAAIC,EAA2B,EAC3BC,EAAmB,EACvBV,EAAMW,SAAQ,SAACC,GAAa,IAAD,GAGtBA,GAAW,IADdC,aAFyB,MAEjB,EAFiB,EAK1BH,EAAmBI,SAASJ,GAAoB,EAChDD,EAA2BK,SAASL,GAA4BK,SAASD,MAG1Ed,EAAgBW,GAChBb,EAAwBY,KACtB,CAAC/D,IAxEsB,OA0EoCiD,oBAAS,GA1E7C,qBA0EnBoB,GA1EmB,YA4E1BP,qBAAU,WACT,IAAIxC,EACJ,GAAI1B,EAAU,CACb,IAAI0E,EAAS,YAAO5H,EAAM4G,OAC1BiB,aAAOD,EAAW1E,EAAUC,GAC5B0D,EAASe,QAGTf,EAAS7G,EAAM4G,SAGf,CAACtD,EAAYJ,EAAUC,IAGzBiE,qBAAU,WACT,GAAKvD,GAAmBG,GAAiBV,EAAWO,GAAe,CAClE,IAAIiE,EAAUC,GAAiBlE,EAAeG,EAAapB,GAC3DsE,GAAcY,GAEXjE,GAAemD,GAAoB,QAErC,CAACnD,IAEJuD,qBAAU,WACT,GAAqB,OAAlBvD,GAA4Be,GAAYhC,IAAeoB,GAAehB,IAAc4B,EAASoD,WAAW,CAC1G,IAAIJ,EAAYK,aAASrB,GACrBsB,EAAMN,EAAUO,WAAU,SAAA5C,GAAI,OAAIA,EAAK6C,SAAWxD,EAASwD,UAC/DR,EAAUS,OAAOH,EAAI,GACrBrB,EAASe,MAER,CAAC/D,IAEJuD,qBAAU,WACT,GAAqB,OAAlBvD,GAA4Be,GAAYhC,IAAekB,GAAqBd,IAAc4B,EAASoD,WAAW,CAChH,IAAIJ,EAAYK,aAASrB,GACzBgB,EAAUU,KAAK1D,GACfiC,EAASe,MAER,CAAC/D,IAUJ,IAAMkE,GAAmB,SAACK,EAAQG,EAAO3F,GACxC,IAAI4F,GAAuB,EACvBC,EAAenF,EAAW8E,GAAQJ,WAEhCU,EAAUpE,EAAUhB,EAAW8E,GAAQJ,YACvCW,EAAgBD,EAAQzE,OAAO2E,KAAI,SAAAC,GAAO,OAAI5E,EAAO4E,MAE3D,GAAIvF,EAAW8E,GAAQJ,aAAehF,EAAW,OAAO,EACxD,GAAMwB,EAAgB,OAAO,EAE5B,IAAIsE,EAAaC,aAAsBJ,EAAevE,GAClD4E,EAAUC,aAAoBN,GAElC,GAAIF,IAAiBzF,EAAW,MAAO,EAAC,EAAOwF,GAC/C,GAAKhE,EAAgB,MAAO,EAAC,EAAOgE,GAGnC,GAAGD,IAAU3F,EAEb,MAAO,EAAC,EAAM4F,GAmFf,OAhF8B,SAAxBU,EAAyBC,GAC9B,GAAGH,EAAQ/D,SAASkE,IAAkC,UAAbvG,EAExC,OADAoE,IAAoB,IACb,EAEH,GAAwB,UAArBmC,IAA4D,UAA3BT,EAAQU,kBAAmD,IAArBN,EAAWO,QAAa,CAEtG,GAAGP,EAAW7D,SAASrC,GAEtB,OADAoE,IAAoB,IACb,EAGP,IAAI,IAAMkB,KAAOY,EAAW,CAE3B,GADgBI,EAAsBJ,EAAWZ,IACnC,OAAO,GAIxB,IAAMoB,EAAaX,EAAcY,QAAO,SAAAC,GAAK,OAAIA,EAAMC,OAASN,KAChE,GAAKG,EAAW,MAAQA,EAAW,GAAGI,aAA2C,UAA5BJ,EAAW,GAAGI,aAAuB,CAAC,IAAD,WAC/ExB,GACT,OAAGoB,EAAWpB,GAAKyB,SAAW/G,GAG7B4F,EAAuBc,EAAWpB,GAAKuB,KACvCzC,IAAoB,GACd,CAAN,GAAO,IAIqB,IADN2B,EAAcY,QAAO,SAACC,GAAD,OAAWA,EAAMG,SAAWL,EAAWpB,GAAKyB,UACtEN,QACAH,EAAsBI,EAAWpB,GAAKyB,QAClC,CAAN,GAAO,QAFtB,GAVF,IAAI,IAAMzB,KAAOoB,EAAW,CAAC,IAAD,IAAlBpB,GAAkB,oCA2DRgB,CAAsBX,IAxCb,SAAzBqB,EAA0BT,GAC/B,GAAGL,EAAW7D,SAASkE,IAAoC,UAAfvG,IAAsD,UAA3B8F,EAAQU,kBAAmD,IAArBN,EAAWO,QAEvH,OADArC,IAAoB,IACb,EAIH,GAAwB,WAArBmC,EAA8B,CACrC,GAAGH,EAAQ/D,SAASrC,GAElB,OADAoE,IAAoB,IACb,EAIR,GADgB4C,EAAuBZ,GACzB,OAAO,EAKvB,IAAMa,EAAgBlB,EAAcY,QAAO,SAACC,GAAD,OAAWA,EAAMG,SAAWR,KACvE,GAA0B,IAAvBU,EAAcR,OAAW,CAAC,IAAD,WACjBnB,GACT,IAAM4B,EAAmBnB,EAAcY,QAAO,SAACC,GAAD,OAAWA,EAAMC,OAASI,EAAc3B,GAAKuB,QAC3F,GAAGI,EAAc3B,GAAKuB,OAAS7G,GAC9B,GAA+B,IAA5BkH,EAAiBT,QAAkD,UAAlCS,EAAiB,GAAGJ,cAA0BI,EAAiB,GAAGJ,YAErG,OADA1C,IAAoB,GACd,CAAN,GAAO,QAIP,IAA+B,IAA5B8C,EAAiBT,SAAiBS,EAAiB,GAAGJ,aAAiD,UAAlCI,EAAiB,GAAGJ,cAC3EE,EAAuBC,EAAc3B,GAAKuB,MAC5C,MAAM,CAAN,GAAO,IAXzB,IAAI,IAAMvB,KAAO2B,EAAc,CAAC,IAAD,IAArB3B,GAAqB,oCAsBV0B,CAAuBrB,GAFnB,EAAC,EAAMC,GAK3B,EAAC,EAAOA,IAUXuB,GAAe,SAACC,GAErBrE,EAAuB,OAuDlBsE,GAAkB,WACvB,IAAMC,EAlBsB,WAG5B,IAFA,IAAIC,GAAc,EAETC,EAAIrH,EAAcsG,OAAS,EAAGe,GAAK,EAAGA,KAC9BrH,EAAcqH,IAGf,IADd7B,QAGkB3F,GAAgBwH,EAAID,IACtCA,EAAaC,GAIf,OAAOD,EAImBE,GAC1B,OAAOtH,EAAcmH,IAsChBI,GAAU,yCAAG,qDAAA7E,EAAA,wDACUsC,GAAiBlE,EAAeG,EAAaF,GADvD,mBACZyG,EADY,KACDC,EADC,KAEA3G,EACZ0G,GACGhC,EAAQvE,EACRyG,EAAcnH,EAAWO,GAAiBP,EAAWO,GAAiB,GACtE6G,EAAUD,EAAYE,KAAOF,EAAYE,KAAO,GAE5CC,GALG,EAOTF,GAAW,IAFbnC,GALW,eAKXA,GALW,WASbzC,EAAyB,MAErB8E,IAECC,EAAuBL,GAAoBjC,GAD3CuC,EAAaL,GAENE,KAAOI,aAAsBD,EAAWH,KAAZ,UAAkBG,EAAWH,KAAKpC,UAAlC,aAAkB,EAAwBd,MAAOoD,EAAoB/G,EAAmBQ,EAAUwG,EAAW9C,YAAa/D,EAAQG,GACzK0G,EAAWH,KAAOK,aAAyBF,EAAWH,KAAZ,UAAkBG,EAAWH,KAAKpC,UAAlC,aAAkB,EAAwBd,MAAOc,EAAOjE,EAAUwG,EAAW9C,YAAa/D,GAC/H6G,EAAWH,KAAKpC,KAAWuC,EAAWH,KAAKpC,GAAhB,QAC/BuC,EAAWH,KAAKpC,GAAhB,2BACIuC,EAAWH,KAAKpC,IADpB,IAECd,MAAO,KAKJqD,EAAWH,KAAKpC,IAA8C,IAApCuC,EAAWH,KAAKpC,GAAhB,OAA0F,IAAjD0C,OAAOC,OAAOJ,EAAWH,KAAKpC,IAAQc,eACtGyB,EAAWH,KAAKpC,GAEXjD,EAAgBwF,EAAYA,EAAWK,KAE7CC,MAAK,SAACC,GACZhF,EAAoB,MACpBF,EAAuB,MACvBH,EAA6B,YAKhCF,EAAyB,MACzBK,EAAuB,MACvBH,EAA6B,MAC7BK,EAAoB,OA3CJ,2CAAH,qDAuMhB,OAAIpG,EAEF,gBAAC,GAAD,CACCqC,UAAWA,EACXrC,YAAaA,EACboC,SAAUA,EAHX,UAKEY,EAAcyD,EAAcF,GAE7B,eAAC,GAAD,CAAsB8E,MAAO,CAC5BC,QAAS,SACTC,WAAY,SACZC,SAAU,SACVC,aAAc,YAJf,SAOC,eAAC,GAAD,UACC,eAAC,GAAD,UACC,eAAC,GAAD,UAA0B7I,aAW9B,gBAAC,GAAD,CACC8I,WAAc,SAACC,GACTzG,GAAsBA,EAAiB0G,UAAS1G,EAAiB0G,QAAQP,MAAM3L,UAAaoE,EAAe,EAAK,OACrHiC,EAA6BpD,GACxBqE,IACJE,IAAc,GAEfyE,EAAEE,kBAEHC,YAAa,SAACH,GACZzE,IAAc,GACdnB,EAA6B,MACxBb,GAAsBA,EAAiB0G,UAAS1G,EAAiB0G,QAAQP,MAAM3L,UAAaoE,EAAc,EAAK,QAEtH9D,YAAaA,EACboC,SAAUA,EACVC,UAAWA,EACXgJ,MAAK,eACDlI,GAlBL,UAqBC,sBAAKkI,MAAS,CAACU,gBAAiBnI,GAAiB,QAAjD,SACEZ,EAAcyD,EAAcF,MAE5BhC,GA3MF,gBAAC,GAAD,CACCyH,MAAQ,YACRX,MAAO,CAAEG,SAAU,OAAQhM,OAAQ,OAAQ8L,QAAS,OACnDS,gBAAiBnI,GAAiB,QAHpC,YAOKkD,MAAsBlD,GAAiBjB,IAAaoB,GACvD,eAAC,GAAD,CACAkI,IAAO/G,EACPlD,cAAmB8B,EAAgBA,EAAa,EAAK,MAAQ,QAC7DkI,MAAQ,cAGPrF,EAAMgC,KAAI,SAACrD,EAAM4G,GAcb5G,EAZH4F,IAYG5F,EAXHkC,MAH2B,IAAD,EAI1B2E,EAUG7G,EAVH6G,SACAC,EASG9G,EATH8G,KAEAjE,GAOG7C,EARH+G,UAQG/G,EAPH6C,QACAmE,EAMGhH,EANHgH,MACAC,EAKGjH,EALHiH,OACAC,EAIGlH,EAJHkH,cAOKC,GAHFnH,EAHHoH,YAGGpH,EAFHqH,cAZ0B,YAcvBrH,EAduB,uHAiBW,OAAlB5B,GAA8C,OAAlBE,GAA2B8D,IAC3E,GAAI,UAACrE,EAAWiC,EAAK6C,eAAjB,aAAC,EAAyBuC,KAAKpF,EAAKgD,OAAO,CAC9C,IAAIsE,EAAWvJ,EAAWiC,EAAK6C,QAAQuC,KAAKpF,EAAKgD,OAEjD,OACC0C,OAAO6B,KAAKD,GAAUjE,KAAI,SAACmE,GAE1B,IAAMC,EAAqB,UAATD,EAClB,OACC,eAAC,KAAD,CAAkBE,mBAAqB,EAAMC,OAAU,CAACC,OAAQ,GAAIC,IAAK,IAAzE,SACE,kBAAEC,EAAF,EAAEA,UAAF,OACA,qCACIA,EACH,sCACIR,EAASE,GAAM,GAAe,UAATA,GAAoBF,EAAQ,MAAU,IAE5D,eAAC,GAAD,CACCS,GAAM,OACNpB,IAAOrH,EACPoH,MAAQ,OACRsB,aAAc,SAACvD,GAzM/BrE,EAyM6DyC,IAC7C2B,aAAcA,GACdyD,YAAe,SAAC5B,GAjZD,IAACnM,EAkZf4G,EAAoBd,GAEfV,GAAYA,EAAOgH,SAAahH,EAAOgH,QAAQ4B,eApZrChO,EAqZUoF,EAAOgH,QAAQ4B,aAAa,GArZ3BrI,EAASsI,aAAgBjO,KAuZnDmM,EAAE+B,OAAOrC,MAAMsC,QAAU,OACzB9H,EAAyBsC,GACzBjC,EAAuBvD,IAGxBiL,UAAa,SAACjC,GACR5H,GAAiBF,GAAqBE,IAAcF,EAAmBwG,MAE3ExE,EAAyB,MACzBK,EAAuB,MACvBH,EAA6B,MAC7BK,EAAoB,OAErBuF,EAAE+B,OAAOrC,MAAMsC,QAAU,KAG1BtC,MAAO,CACNwC,WAAY,cACZC,aAAc,OACd/B,cAAe,QA/BjB,SAkCA,eAAC,KAAD,CACCgB,UAAaA,EACbgB,oBAAuB,YAhOR,SAACzI,EAAMgD,EAAO0F,GAC5C,IAAIzG,EAAUlE,EAAWiC,EAAK6C,QAC1B8F,EAAU1G,EAAQmD,KAAKpC,UAEpB2F,EAAQD,GAEf,IAAIE,EAAS,2BACT3G,GADS,IAEZmD,KAAK,2BACDnD,EAAQmD,MADR,kBAEFpC,EAAQ2F,MAGwB,IAAhCjD,OAAOC,OAAOgD,GAAS7E,QAAmC,IAArB6E,EAAO,cAAwBC,EAAUxD,KAAKpC,GACtFjD,EAAgB6I,EAAWA,EAAUhD,KAmNrBiD,CAAwB7I,EAAMA,EAAKgD,MAAOwE,IAE3CsB,sBAAyB,YAlNR,SAAC9I,EAAMgD,GACvC,IAAIf,EAAUlE,EAAWiC,EAAK6C,QAC1B8F,EAAU1G,EAAQmD,KAAKpC,GAE3B2F,EAAO,MAAY,EAEnB,IAAIC,EAAS,2BACT3G,GADS,IAEZmD,KAAK,2BACDnD,EAAQmD,MADR,kBAEFpC,EAAQ2F,MAIwB,IAAhCjD,OAAOC,OAAOgD,GAAS7E,eAAmB8E,EAAUxD,KAAKpC,GAC5DjD,EAAgB6I,EAAWA,EAAUhD,KAoMrBmD,CAA0B/I,EAAMA,EAAKgD,QAEtCgG,mBAAoBzH,GACpB4F,WAAYA,EAGZD,cAAeA,EACf+B,UAAWhC,EACXH,KAAMW,EAAYX,EAAI,sBAAQpI,EAAO8I,UAAf,aAAQ,EAAcA,KAAtB,KAAgCV,EACtD5E,MAAOuF,EAAYH,EAASE,GAAQF,EAAQ,MAC5CT,SAAUA,EACVkB,GAAIlF,EACJmE,MAAOA,GAAS,GAChBJ,MAAOA,EACPvG,MAAOwC,EACPG,MAAO3F,EACP6L,QAAS,SAAC7C,GACT,IAAM8C,EA5LG,SAAC9I,GAC3B,IAES+I,GAFY1E,MAAqB,IAEzC7B,OAGKwG,EAAgBhI,EAAMuB,WAAU,SAACX,GAAa,IAE1CqH,EAELrH,EAFHY,OACO0G,EACJtH,EADHe,MAGD,OAAQoG,IAAsBE,GAAejM,IAAekM,KAGvDC,EAAgBnI,EAAMuB,WAAU,SAACX,GAAa,IAE1CqH,EAELrH,EAFHY,OACO0G,EACJtH,EADHe,MAGD,OAAQ3C,IAAUiJ,GAAejM,IAAekM,KAGjD,OAAuB,IAAnBF,EACI,CAAChI,EAAMmI,IAENH,EAAgBG,EACjBnI,EAAMoI,MAAMJ,EAAeG,EAAgB,GAG3CnI,EAAMoI,MAAMD,EAAeH,EAAgB,GAAGK,UA6JrBC,CAAmB9G,GAEnCtF,EACC8I,EACA,CACChG,MAAOwC,EACPpF,UAAWA,EACXuF,MAAO3F,GAER8L,IAGFtL,eAAgB,CACf+L,aAActL,IAAkBuE,GAAUxF,IAAeoB,GAAe,uBACxEoL,YAAavL,IAAkBuE,GAAUxF,IAAeoB,GAAe,sBACvEqL,WAAYxL,IAAkBuE,GAAUxF,IAAeoB,GAAe,sBACtEsL,UAAWzL,IAAkBuE,GAAUxF,IAAeoB,GAAe,uBACrEuL,UAAW1L,IAAkBuE,GAAUxF,IAAeoB,GAAe,kCACrE+J,aAAc,SACdxC,QAAS,SACTiE,OAAQ,QACRjQ,MAAO,MACPyM,gBAAiBnI,GAAiBA,IAAkBuE,GAAU,SAnC1DA,OA2CV,sBAAKkD,MAAS,CAAC3L,UAAU,QAASJ,MAAO,OAAzC,2C,mBC9WEkQ,GA3KS,SAACzP,GAAW,IAE5BsN,EAaAtN,EAbAsN,GACA1K,EAYA5C,EAZA4C,WAH2B,EAe3B5C,EAXA6C,mBAJ2B,MAIb,UAJa,EAK3BC,EAUA9C,EAVA8C,YAL2B,EAe3B9C,EATA4G,aAN2B,MAMnB,GANmB,EAO3B5D,EAQAhD,EARAgD,UACAV,EAOAtC,EAPAsC,UACAY,EAMAlD,EANAkD,SACAC,EAKAnD,EALAmD,cACAJ,EAIA/C,EAJA+C,cACAM,EAGArD,EAHAqD,iBAEAD,GACApD,EAFA0P,cAEA1P,EADAoD,gBAGEgC,EAAWC,eACXsK,EAAkB,yCAAG,WAAOC,GAAP,UAAAnK,EAAA,sEAAyBL,EAASyK,aAAWD,IAA7C,mFAAH,sDAElBxL,EAAWb,cAAY,SAAAC,GAAK,OAAIA,EAAMa,gBAAgBD,YACtDlE,EAAQ4P,eArBiB,EAuBKvJ,oBAAS,GAvBd,mBAuBxBtG,EAvBwB,KAuBX8P,EAvBW,KAyBzBC,EAAuBC,mBAAQ,WAAO,IAAD,IAEnCC,EAAO,WAGX,GAA6C,SAAzC9L,EAASxB,GAAYuN,kBAA+B,UAAC/L,EAASxB,UAAV,aAAC,EAAsBwN,YAC3EF,EAAOG,aAAuBjM,EAASxB,GAAYwN,iBAChD,GAA6C,WAAzChM,EAASxB,GAAYuN,kBAAiC,UAAC/L,EAASxB,UAAV,aAAC,EAAsB0N,mBAAmB,CAAC,IAAD,EACvGJ,EAAOG,aAAsB,UAACjM,EAASxB,UAAV,aAAC,EAAsB0N,mBAIxD,IAAMC,EAAWL,EAAKM,MAAM,KAG5B,OAAOC,OAASC,IAAI,CAAE,KAAQH,EAAS,GAAI,OAAUA,EAAS,GAAI,OAAUA,EAAS,OACtF,CAACnM,EAASxB,KAeP+N,EAAkB,WAAO,IAAD,MAE1B,OACI,uCACI,eAAC,GAAD,IACA,gBAAC,GAAD,CAAsBrF,MAAO,CAAEsF,UAAW,SAA1C,UACI,eAAC,GAAD,yBAGA,gBAAC,GAAD,WACI,eAAC,GAAD,CAAqBtF,MAAO,CAAEuF,YAAa,SAAUC,QAAS,OAAQC,WAAY,UAAlF,kBACA,eAAC,KAAD,CACIC,QAAS9Q,EAAMsC,OAAOC,KAAKC,MAC3B4I,MAAO,CAAE2F,UAAW,cACpBC,QAAmD,YAA1C,UAAA9M,EAASxB,UAAT,eAAsBuN,iBAC/BgB,SAAU,SAAAC,IArBE,SAACC,GACjC,IAAIzB,EAAU3H,aAAS7D,EAASxB,IAChCgN,EAAQO,gBAAkBkB,EAAW,SAAW,OAChD1B,EAAmBC,GAmBK0B,CAA4BF,MAGpC,eAAC,GAAD,CAAqB9F,MAAO,CAAEiG,WAAY,SAAUT,QAAS,OAAQC,WAAY,UAAjF,0BAMR,gBAAC,GAAD,CAAsBzF,MAAO,CAAEsC,QAAmD,UAA1C,UAAAxJ,EAASxB,UAAT,eAAsBuN,kBAA8B,MAAOnE,cAAyD,UAA1C,UAAA5H,EAASxB,UAAT,eAAsBuN,iBAA6B,OAAS,OAAQpC,aAAc,eAApM,UACI,eAAC,GAAD,CAA2BzC,MAAO,CAAEzK,SAAU,QAA9C,wBAIA,eAAC,KAAD,CACI2Q,WAAW,EACXC,aAAa,EACbC,MAAO1B,EACPmB,SAAU,SAACQ,IA9CH,SAACzB,GACzB,IAAIN,EAAU3H,aAAS7D,EAASxB,IAChCgN,EAAQU,kBAAoBsB,aAA6B1B,GACzDP,EAAmBC,GA4CCiC,CAAoBF,EAAIG,OAAO,cAEnCxG,MAAO,CAAC/L,MAAO,UACfwS,YAAY,OAMpB,eAAC,GAAD,QAMZ,OACI,eAAC,GAAD,CACI1O,iBAAkBA,EAClBN,cAAeA,EACfI,cAAeA,EACfd,SAAU,QACVa,SAAUA,EACVZ,UAAWA,EACXgL,GAAIA,EACJlK,eAAgBA,EAChBH,cAAe,WAAiD,IAAhDyD,EAA+C,uDAAhC,EAAGF,EAA6B,uDAAN,EACrD,OAAIvG,EAEI,eAAC,GAAD,UACI,oBAAG+R,UAAU,sBAAsBC,cAAY,OAC3CxD,QAAS,kBAAMsB,GAAa,IAC5BzE,MAAO,CAAE4G,OAAQ,eAOzB,gBAAC,GAAD,WACI,gBAAC,GAAD,CACI5G,MAAO,CACH6G,aAAc,OACdC,eAAgB,UAHxB,UAMI,eAAC,GAAD,UACI,eAAC,GAAD,UAAsBvP,MAG1B,oBAAGmP,UAAU,oBAAoB1G,MAAO,CAAEsC,QAAS,QAIvD,gBAAC,GAAD,WACI,iCACI,eAAC,GAAD,qBACA,eAAC,GAAD,UAAsBlH,OAG1B,iCACI,eAAC,GAAD,+BACA,eAAC,GAAD,UAAsBF,UAI7BmK,QAKjB/N,WAAYA,EACZC,YAAaA,EACbC,YAAaA,EACb8D,MAAOA,EACP5D,UAAWA,EACX/C,YAAaA,KChLnBN,GAAY,QAQLC,IAPmBC,KAAOC,KAAV,kHAOMC,aAAH,yQAGdJ,IAEL,SAAAK,GAAK,OAAIA,EAAMC,YAAc,OAAS,iBAClC,SAAAD,GAAK,OAAIA,EAAMC,YAAc,OAAS,iBACtC,SAAAD,GAAK,OAAIA,EAAMC,YAAc,OAAS,iBAM1C,SAAAD,GAAK,OAAIA,EAAME,MAAMC,GAAGC,aAOxBC,IAJmBR,KAAOS,IAAV,sCACvBV,IAGuBC,KAAOS,IAAV,yMAMR,SAAAN,GAAK,OAAIA,EAAME,MAAMC,GAAGI,cAI7BC,GAAYX,KAAOS,IAAV,0IAOTG,GAAeZ,KAAOC,KAAV,sEAEZ,SAAAE,GAAK,OAAIA,EAAME,MAAMQ,aAkBrBC,IAbiBd,KAAOS,IAAV,0EAOGT,KAAOS,IAAV,kGAMGT,KAAOS,IAAV,mIAcdM,IAPef,KAAOC,KAAV,0GAIR,SAAAE,GAAK,OAAIA,EAAME,MAAMW,SAASG,OAGnBnB,KAAOC,KAAV,4FAER,SAAAE,GAAK,OAAIA,EAAME,MAAMW,SAASG,OAClC,SAAAhB,GAAK,OAAIA,EAAME,MAAMQ,cCjF5B2R,IDsFuBxS,KAAOqB,OAAV,+BAIGrB,KAAOS,IAAV,2QAIXX,IAEA,SAAAK,GAAK,OAAIA,EAAME,MAAMC,GAAGgB,cAC3B,SAAAnB,GAAK,OAAIA,EAAMoB,UAAY,IAAO,KCjG5B,SAACpB,GAAW,IAAD,EAexBA,EAbH4C,kBAF2B,MAEd,QAFc,IAexB5C,EAZH6C,mBAH2B,MAGb,UAHa,EAI3BC,EAWG9C,EAXH8C,YACA8D,EAUG5G,EAVH4G,MACA0L,EASGtS,EATHsS,cACAtP,EAQGhD,EARHgD,UAGAV,GAKGtC,EAPHuS,kBAOGvS,EANHwE,eAMGxE,EALHsC,WACAY,EAIGlD,EAJHkD,SACAC,EAGGnD,EAHHmD,cACAJ,EAEG/C,EAFH+C,cACAM,EACGrD,EADHqD,iBAd2B,EAiBQkD,oBAAS,GAjBjB,mBAiBrBtG,EAjBqB,KAiBR8P,EAjBQ,KAmB5B,OACC,eAAC,GAAD,CACC1M,iBAAkBA,EAClBN,cAAeA,EACfI,cAAeA,EACfD,SAAUA,EACVZ,UAAWA,EACXD,SAAU,QACVY,cAAe,WAAiD,IAAhDyD,EAA+C,uDAAhC,EAAGF,EAA6B,uDAAN,EACxD,OAAGvG,EAED,eAAC,GAAD,UACC,oBAAG+R,UAAU,sBAAsBC,cAAY,OAC5CxD,QAAS,kBAAMsB,GAAa,IAC7BzE,MAAS,CAAC4G,OAAQ,eAOrB,gBAAC,GAAD,WACC,gBAAC,GAAD,CACC5G,MAAO,CACN6G,aAAc,QAFhB,UAKC,oBAAGH,UAAU,qBAAqBC,cAAY,OAC3CxD,QAAS,kBAAMsB,GAAa,IAC7BzE,MAAS,CAAC4G,OAAQ,aAKpB,eAAC,GAAD,UACC,eAAC,GAAD,UAAsBrP,MAGvB,eAAC,KAAD,CACC4L,QAAS6D,EACT9P,OAAQ,OAFT,sBAOD,gBAAC,GAAD,CACC8I,MAAO,CAAC8G,eAAgB,iBADzB,UAGC,iCACC,eAAC,GAAD,qBACA,eAAC,GAAD,UAAsB1L,OAIvB,iCACC,eAAC,GAAD,+BACA,eAAC,GAAD,UAAsBF,cAQ5B5D,WAAYA,EACZC,YAAeA,EACfC,YAAaA,EACb8D,MAASA,EACT5D,UAAWA,EACX/C,YAAaA,MAiBhBoS,GAASG,aAAe,CACvB3P,YAAa,UACbC,YAAa,aACbwP,cAAe,aACf1L,MAAO,GACP2L,kBAAmB,aACnB/N,gBAAgB,GAGF6N,I,gDAAAA,MCnHT1S,I,QAAY,SAQLC,IAPmBC,KAAOC,KAAV,oHAOMC,aAAH,2QAGdJ,IAEL,SAAAK,GAAK,OAAIA,EAAMC,YAAc,OAAS,WAClC,SAAAD,GAAK,OAAIA,EAAMC,YAAc,OAAS,WACtC,SAAAD,GAAK,OAAIA,EAAMC,YAAc,OAAS,WAM1C,SAAAD,GAAK,OAAIA,EAAME,MAAMC,GAAGC,aAOxBC,IAJmBR,KAAOS,IAAV,wCACvBV,IAGuBC,KAAOS,IAAV,0MAMR,SAAAN,GAAK,OAAIA,EAAME,MAAMC,GAAGI,cAI7BC,GAAYX,KAAOS,IAAV,4IAOTG,GAAeZ,KAAOC,KAAV,sEAEZ,SAAAE,GAAK,OAAIA,EAAME,MAAMQ,aA6BrBC,IA1BgBd,KAAOS,IAAV,uNAaIT,KAAOS,IAAV,4EAOGT,KAAOS,IAAV,oGAMGT,KAAOS,IAAV,gHAWdM,IALef,KAAOC,KAAV,6EAER,SAAAE,GAAK,OAAIA,EAAME,MAAMW,SAASC,OAGnBjB,KAAOC,KAAV,8FAER,SAAAE,GAAK,OAAIA,EAAME,MAAMW,SAASG,OAClC,SAAAhB,GAAK,OAAIA,EAAME,MAAMQ,cCdnB+R,IDmBc5S,KAAOqB,OAAV,iCAIGrB,KAAOS,IAAV,6QAIXX,IAEA,SAAAK,GAAK,OAAIA,EAAME,MAAMC,GAAGgB,cAC3B,SAAAnB,GAAK,OAAIA,EAAMoB,UAAY,IAAO,KC5GxB,SAACpB,GAAW,IAEhC4C,EAUG5C,EAVH4C,WAF+B,EAY5B5C,EATH6C,mBAH+B,MAGjB,UAHiB,EAI/BC,EAQG9C,EARH8C,YAJ+B,EAY5B9C,EAPH4G,aAL+B,MAKvB,GALuB,EAM/B5D,EAMGhD,EANHgD,UACAV,EAKGtC,EALHsC,UACAY,EAIGlD,EAJHkD,SACAC,EAGGnD,EAHHmD,cACAJ,EAEG/C,EAFH+C,cACAM,EACGrD,EADHqD,iBAX+B,EAcIkD,oBAAS,GAdb,mBAczBtG,EAdyB,KAcZ8P,EAdY,KAgBhC,OACC,eAAC,GAAD,CACC1M,iBAAkBA,EAClBN,cAAeA,EACfI,cAAeA,EACfb,UAAWA,EACXY,SAAUA,EACVb,SAAU,QACVY,cAAe,WAA+C,IAA9CyD,EAA6C,uDAA9B,EAAGF,EAA2B,uDAAJ,EACxD,OAAGvG,EAED,eAAC,GAAD,UACC,oBAAG+R,UAAU,sBAAsBC,cAAY,OAC5CxD,QAAS,kBAAMsB,GAAa,IAC7BzE,MAAS,CAAC4G,OAAQ,eAOrB,gBAAC,GAAD,WACC,gBAAC,GAAD,CAAkB5G,MAAO,CACxB6G,aAAc,OACdC,eAAgB,UAFjB,UAKC,eAAC,GAAD,UAEC,eAAC,GAAD,UAAsBvP,MAGvB,oBAAGmP,UAAU,oBAAoB1G,MAAO,CAACsC,QAAS,QAGnD,gBAAC,GAAD,WACC,iCACC,eAAC,GAAD,qBACA,eAAC,GAAD,UAAsBlH,OAGvB,iCACC,eAAC,GAAD,+BACA,eAAC,GAAD,UAAsBF,cAO5B5D,WAAYA,EACZC,YAAeA,EACfC,YAAaA,EACb8D,MAASA,EACT5D,UAAWA,EACX/C,YAAaA,M,SC7EHyS,GAAY7S,KAAOS,IAAV,mJACH,SAAAN,GAAK,OAAIA,EAAMsC,a,IAOPzC,KAAOS,IAAV,4I,gBCiBlBqS,GAAY,SAAC3S,GAAU,IAIrB4S,EAaA5S,EAbA4S,gBACA5P,EAYAhD,EAZAgD,UACAuP,EAWAvS,EAXAuS,kBACA/N,EAUAxE,EAVAwE,eACAlC,EASAtC,EATAsC,UACAuQ,EAQA7S,EARA6S,WACAC,EAOA9S,EAPA8S,eACAC,EAMA/S,EANA+S,qBACA7P,EAKAlD,EALAkD,SACAC,EAIAnD,EAJAmD,cACAJ,EAGA/C,EAHA+C,cACAM,EAEArD,EAFAqD,iBACA2P,EACAhT,EADAgT,kBAhBqB,EVjBd,WAAgC,IAAD,EACIzM,mBAASlH,KADb,mBACrC4T,EADqC,KACnBC,EADmB,KAY5C,OATA9L,qBAAU,WACR,SAAS+L,IACPD,EAAoB7T,KAItB,OADAC,OAAO8T,iBAAiB,SAAUD,GAC3B,kBAAM7T,OAAO+T,oBAAoB,SAAUF,MACjD,IAEIF,EUwBgDK,GAI/CC,GAvBmB,EAmBjB9T,OAnBiB,EAmBKF,MACb8F,eAGM9B,cAAY,SAAAC,GAAW,OAAOA,EAAMe,iBAAiBD,UAAUtB,OAAiB,IAKjGiB,QAJ2CuP,IAA9BD,EAAeE,YAAiCF,EAAeE,gBACnCD,IAA7BD,EAAeG,WAAgCH,EAAeG,UAGjEnQ,cAAY,SAAAC,GAAW,OAAOA,EAAMU,aAAaC,UAE1DwP,GADepQ,cAAY,SAAAC,GAAK,OAAIA,EAAMoQ,oBAAoBC,gBACnDtQ,cAAY,SAAAC,GAAW,OAAOA,EAAMC,aAAaC,iBAAmB,IAC/EU,EAAWb,cAAY,SAAAC,GAAW,OAAOA,EAAMa,gBAAgBD,YAC/D0P,EAAiBvQ,cAAY,SAAAC,GAAW,OAAOA,EAAMI,gBAAgBmQ,kBAErEC,GADmBzQ,cAAY,SAAAC,GAAK,OAAIA,EAAMyQ,gBAAgBC,YAA5DC,aACgB5Q,cAAY,SAAAC,GAAK,OAAIA,EAAMyQ,gBAAgBC,SAASE,6BAlCnD,EAsCrBN,GAAkB,GAtCG,IAoCrBlO,MAAO/B,OApCc,MAoCE,GApCF,MAqCrB0E,MAAO8L,OArCc,MAqCE,GArCF,IAwCa9N,mBAAS,IAxCtB,mBAwClB+N,EAxCkB,KAwCLC,EAxCK,OAyCDhO,mBAAS,IAzCR,mBAyClBoE,EAzCkB,KAyCZ6J,EAzCY,OA0CCjO,mBAAS,IA1CV,mBA0ClBkO,EA1CkB,KA0CXC,EA1CW,OA2COnO,mBAAS,IA3ChB,mBA2ClBoO,EA3CkB,KA2CRC,EA3CQ,OA4CmCrO,mBAAS,IA5C5C,mBA4ClBsO,EA5CkB,cAgDrBtB,GAAkB,IADlBlH,MAAMM,OA/Ce,MA+CD,GA/CC,EAkDnBmI,GAAgC7E,mBAAQ,WAC1C,IAAMtH,EAAgB4K,EAAetP,OAAO2E,KAAI,SAAAC,GAAO,OAAI5E,EAAO4E,MAGlE,OAFwBI,aAAoBN,GAErBC,KAAI,SAAAmM,GAAM,uBAAI3Q,EAAS2Q,UAAb,aAAI,EAAkBC,QAAMC,OAAM,SAAAD,GAAI,MAAa,cAATA,OAC5E,CAACzB,EAAetP,OAAQG,IAG3BgD,qBAAU,WACN,IAEI8N,EAAW,GAGf3B,EAAetP,QAAUsP,EAAetP,OAAOsD,SAAQ,SAAC4N,EAAahJ,GAGjE,IAAMiJ,EAAYnR,EAAOkR,GACnBE,EAAgBC,aAAiBF,GACjCG,EAAkBC,aAAmBJ,GAE3CF,EAASG,GAAiB,CACtBzS,WAAYyS,EACZzO,MAAO,IAIXsO,EAASK,GAAmB,CACxB3S,WAAY2S,EACZ3O,MAAO,IAISyO,EACEE,KAG1Bf,EAAQU,KAET,CAAC3B,EAAgBtP,IAIpBmD,qBAAU,WACN,IAAIqO,EAAY,GACZC,EAAe,GACfC,EAAe,eAAQhL,GAErBjH,EAAeiQ,EAAS3Q,IAAc,GAE5CiI,OAAOC,OAAOxH,GAAc6D,SAAQ,SAAChC,GAAS,IAGhCqQ,EAGNrQ,EAHAoF,KACAQ,EAEA5F,EAFA4F,IACG0K,EALmC,YAMtCtQ,EANsC,gBAQpCkH,EAAgBqJ,aAAoBvQ,GAEtCwQ,GAAgB,EAElBA,EADG/B,EACanB,EAAWmD,QAAO,SAACC,EAAY1M,GAAb,OAAwB0M,GAAcC,aAAuB3Q,EAAMgE,MAAS,GAG9F4M,aAAiB5Q,EAAMuN,EAAgBC,GAGrD6C,GAAYG,GAGZ9K,OAAOmL,QAAQR,GAAUrO,SAAQ,SAAC8O,GAG9B,IAAM9N,EAAQ8N,EAAS,GAGnB5O,EAFa4O,EAAS,GAEtB5O,MAGJ,GAAMA,GAAS,EAAf,CAKA,IAAM6O,EAAO,2BACNT,GADM,IAETpJ,gBACAlE,QACAd,QACAW,OAAQ+C,EACRwB,gBAKJ,GAAIhC,EAAKpC,GAAQ,CAEb,IAAMgO,EAAaC,aAASb,EAAgBpN,IAAUoN,EAAgBpN,GAAS,GACzEkO,EAAiBC,aAAQH,EAAW3P,OAAU2P,EAAW3P,MAAQ,GAEvE+O,EAAe,2BACRA,GADQ,kBAEVpN,EAFU,2BAGJgO,GAHI,IAIP3P,MAAM,GAAD,mBAAM6P,GAAN,CAAqBH,YAMnB,UAAV/N,EACLkN,EAAUnN,KAAKgO,GAIA,WAAV/N,GACLmN,EAAapN,KAAKgO,UAOlC/B,EAAeoB,GACfjB,EAASe,GACTb,EAAYc,KACb,CAAC/K,EAAMgJ,EAAU3Q,EAAW6P,EAAYwB,EAAexQ,EAAeiP,EAAgBC,IAEzF,IAAM4D,GAAuB1G,mBAAQ,WAEjC,IAAM2G,EAAUrD,EAAesD,mBAAmBjO,KAAI,SAACkO,EAAaC,GAAd,aAElD,sBAAKzJ,GAAE,iBAAYwJ,EAAYE,WAA/B,SACI,eAAC,GAAD,CACI5T,eAAgB,CAACwN,UAAU,GAAD,OAAuB,EAAlBkG,EAAYG,MAAjB,OAA+BC,SAAU,YACnE7T,iBAAkBA,EAClBN,cAAeA,EACfG,SAAUA,EACVC,cAAeA,EACfb,UAAWA,EACXgL,GAAItK,EAAY,IAAM8T,EAAYE,UAClCpU,WAAYkU,EAAYE,UACxBnU,YAAauB,EAAS0S,EAAYE,WAAW3K,KAC7CrJ,UAAWA,EACX4D,OAAO,UAAA0N,EAAYwC,EAAYE,kBAAxB,eAAoCpQ,QAAS,GACpD9D,YAAa8P,EACblD,cAAemF,EAAuBiC,EAAYE,kBAsB9D,OACI,qCACKJ,MAKV,CAACtC,EAAaf,IAEjB,OACI,gBAAC,GAAD,CAAkBjI,MAAO,CAAEwC,WAAY,SAAvC,UAEI,eAAC,GAAD,CACIzK,iBAAkBA,EAClBN,cAAeA,EAEfG,SAAUA,EACVC,cAAeA,EACfb,UAAWA,EACXM,WAAY,QACZ2P,kBAAmBA,EACnB/N,eAAgBA,EAChB3B,YAAa,QACbG,UAAWA,EACX4D,MAAO6N,EACP3R,YAAa8P,EACbN,cAAe,kBAAMU,EAAkBhQ,KAXlC,SAcR2T,IAEC7B,IACE,eAAC,GAAD,CACIzR,iBAAkBA,EAClBN,cAAeA,EAEfG,SAAUA,EACVC,cAAeA,EACfb,UAAWA,EACXM,WAAY,SACZ2P,kBAAmBA,EACnB/N,eAAgBA,EAChB3B,YAAa,WACbG,UAAWA,EACX4D,MAAO+N,EACP7R,YAAa8P,GAVR,cA6BzBD,GAASH,aAAe,CACpBI,gBAAiB,aACjB5P,UAAW,KACXuP,kBAAmB,aACnB/N,gBAAgB,EAChBlC,UAAW,KACXwQ,eAAgB,GAChBC,qBAAsBoE,KAAmB9K,KACzCwG,WAAY,GACZ3P,SAAUiU,KAAmB9K,KAC7BlJ,cAAeiU,KAAgBC,WAGpBC,yBAAK3E,K,qLCtTP4E,G,YAAkB,SAACC,GAAa,IAAD,EACRA,EAAQhH,MAAM,KADN,mBACjCiH,EADiC,KACpBC,EADoB,OAGjBD,EAAYjH,MAAM,KAHD,mBAGnCmH,EAHmC,KAG5BC,EAH4B,KAcxC,MATc,OAAVD,GAAgC,OAAbD,GAAkC,OAAbA,EAEvB,OAAVC,GAAgC,OAAbD,GAAkC,OAAbA,IAC/CC,EAAQ,MAFRA,EAAQ,KAKM,OAAbD,GAAkC,OAAbA,GAAgC,OAAVC,IAC5CA,EAAQjQ,SAASiQ,EAAO,IAAM,IAE5B,GAAN,OAAUA,EAAV,YAAmBC,KA+LVhG,EAA+B,SAACiG,GAAa,IAAD,EACxBA,EAAQrH,MAAM,KADU,mBAChDsH,EADgD,KAC1CC,EAD0C,KAClCC,EADkC,KAQrD,OAD4B,IAJ5BF,EAAOpQ,SAASoQ,IAIiB,GAAc,IAH/CC,EAASrQ,SAASqQ,KAClBC,EAAStQ,SAASsQ,KAOT3H,EAAyB,SAAC4H,GAEnC,OADa,IAAIC,KAAe,IAAVD,GAAgBE,cAAcC,OAAO,GAAI,IAItDC,EAAoB,SAACJ,GAA0B,IAAjBK,EAAgB,wDAEjDC,EAAOC,KAAKC,MAAMR,EAAU,OAC5BN,EAAQa,KAAKC,MAAOR,EAAU,MAAS,MACvCL,EAAUY,KAAKC,MAAOR,EAAU,KAAQ,IACxCS,EAAmBF,KAAKG,MAAMV,EAAU,IAE1CW,EAAW,GAaf,OAZIN,GACIC,IAAMK,GAAQ,UAAOL,EAAP,OACdZ,IAAOiB,GAAQ,UAAOjB,EAAP,OACdY,IAAMK,GAAQ,UAAOhB,EAAP,MACdW,GAASZ,IAAOiB,GAAQ,WAAQF,EAAR,QAEzBH,IAAMK,GAAQ,UAAOL,EAAP,WACdZ,IAAOiB,GAAQ,UAAOjB,EAAP,UACdY,IAAMK,GAAQ,UAAOhB,EAAP,SACdW,GAASZ,IAAOiB,GAAQ,WAAQF,EAAR,UAG1BE","file":"static/js/6.33f01a59.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import styled, { css } from \"styled-components\";\nimport { Container } from \"react-smooth-dnd\";\n\n// export const RouteContainer = styled.div`\n//     display: flex;\n//     flex: 1;\n//     flex-direction: column;\n//     background: yellow;\n// `\n\nconst minHeight = \"10rem\"\nexport const RotatedRouteName = styled.span`\n// background: red;\n\ttransform: rotate(-90deg);\n\t// transform: translateY(50%);\n`\n\n\nexport const StationContainerCss = css`\n\tdisplay: flex;\n    flex-direction: column;\n    min-height: ${minHeight};\n\n    width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    max-width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    min-width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    margin-right: 1rem;\n\n    border-radius: 1rem;\n    overflow: hidden;\n\n    color: ${props => props.theme.bg.octonary};\n`\n\nexport const StationContainer = styled.div`\n    ${StationContainerCss};\n`\n\nexport const StationHeader = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    background: ${props => props.theme.bg.secondary};\n    padding: .5rem 1rem;\n`\n\nexport const HeaderRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    align-self: stretch;\n`\n\nexport const QuantityText = styled.span`\n    font-size: 1rem;\n    color: ${props => props.theme.textColor};\n`\n\nexport const HeaderContent = styled.div`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    justify-content: space-between;\n    align-items: center;\n`\n\n\nexport const TitleContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\n\n\nexport const RouteContainer = styled.div`\n\tdisplay: flex;\n\tborder-bottom: 1px solid black;\n\twidth: 100%;\n`\n\nexport const LabelContainer = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\twhite-space: nowrap;\n\toverflow: hidden;\n\t// justify-content: space-between;\n`\n\nexport const StationLabel = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz4};\n    border-bottom: 1px solid black;\n    width: 100%;\n    padding: .25rem;\n    background: ${props => props.theme.bg.senary};\n`\n\nexport const StationTitle = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz3};\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 2; /* number of lines to show */\n    -webkit-box-orient: vertical;\n    color: ${props => props.theme.textColor};\n`\n\n\n\nexport const StationButton = styled.button`\n\n`\n\nexport const BodyContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\t// flex: 1;\n\tmin-height: ${minHeight};\n\toverflow: hidden;\n\tbackground: ${props => props.theme.bg.quaternary};\n\topacity: ${props => props.dragEnter ? 0.75 : 1};\n\tborder-bottom-right-radius: 1rem;\n\tborder-bottom-left-radius: 1rem;\n\tjustify-content: center;\n`\n\nexport const HeaderSection = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    width:100%;\n    justify-content: space-between;\n    overflow: hidden;\n    align-content: center;\n    margin: 0.2rem 0;\n    /* position: absolute; */\n    /* right: 1rem; */\n\n`\n\nexport const HeaderSectionTitle = styled.h5`\n    text-align: center;\n    color: ${props => props.theme.bg.septenary};\n    font-family: ${props => props.theme.font.primary};\n`\n\nexport const RowContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n`\n\nexport const divider = styled.hr`\n    border-top: .05rem solid;\n    border-color: ${props => props.theme.bg.quaternary};\n    border-radius: .25rem;\n    width: 100%;\n    margin: 0;\n`\n","import styled, { css } from \"styled-components\";\n\nconst minHeight = \"10rem\"\n\nexport const RotationWrapperOuter = styled.div`\n  display: table;\n`\n\nexport const RotationWrapperInner = styled.div`\n  padding: 50% 0;\n`\nexport const LotDiv = styled.div`\n\n`\n\nexport const DragToDiv = styled.div`\n  width: 97%;\n  margin-top: .5rem;\n  margin-bottom: .5rem;\n  margin-left: 0.5rem;\n  min-height: ${props => !props.dragDivHeight ? '10rem' : props.dragDivHeight};\n  background: ${props => props.theme.bg.tertiary};\n\n  border: 0.2rem solid #dedfe3;\n  border-radius: 0.2rem;\n`\n\n\nexport const RotatedRouteName = styled.span`\n  display: block;\n  transform-origin: top left;\n  transform: rotate(90deg) translate(0, -110%);\n  margin-top: -50%;\n  max-width: 20rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nexport const StationContainerCss = css`\n\n`\n\nexport const StationContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    min-height: ${minHeight};\n\n    width: ${props => props.isCollapsed ? \"2rem\" : props.maxWidth};\n    max-width: ${props => props.isCollapsed ? \"2rem\" : props.maxWidth};\n    min-width: ${props => props.isCollapsed ? \"2rem\" : props.maxWidth};\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n    max-height: ${props => props.maxHeight && props.maxHeight};\n\n    border-radius: 0.5rem;\n    overflow: hidden;\n\n    color: ${props => props.theme.bg.octonary};\n`\n\nexport const StationHeader = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    background: ${props => props.theme.bg.secondary};\n`\n\nexport const TitleContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const RouteContainer = styled.div`\n\tdisplay: flex;\n\tborder-bottom: 1px solid black;\n\twidth: 100%;\n`\n\nexport const StationLabel = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz4};\n`\n\nexport const BodyContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n  height: 100%;\n\tmin-height: 10rem;\n  background: ${props => props.theme.bg.secondary};\n\tborder-bottom-right-radius: 0.5rem;\n\tborder-bottom-left-radius: 0.5rem;\n\n  // border-left: 0.2rem solid ${props => props.theme.schema.lots.solid};\n  // border-bottom: 0.2rem solid ${props => props.theme.schema.lots.solid};\n  // border-right: 0.2rem solid ${props => props.theme.schema.lots.solid};\n\n\tjustify-content: start;\n`\n","import React, { useEffect, useRef, useMemo, useState} from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport VisibilitySensor from 'react-visibility-sensor'\n\n// actions\nimport { putCard } from \"../../../../../../redux/actions/card_actions\";\nimport {\n\tsetDroppingLotId,\n\tsetLotHovering,\n\tsetDraggingLotId,\n\tsetDraggingStationId,\n\tsetDragFromBin,\n\tsetLotDivHeight,\n\tsetHideCard,\n} from \"../../../../../../redux/actions/card_page_actions\";\n\n// components external\nimport { Draggable, Container } from 'react-smooth-dnd';\n\n// components internal\nimport Lot from \"../../lot/lot\";\n\n// functions external\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {deepCopy} from \"../../../../../../methods/utils/utils\";\n\n// styles\nimport * as styled from \"./column.style\";\n\n/// utils\nimport { sortBy } from \"../../../../../../methods/utils/card_utils\";\nimport { immutableDelete, immutableReplace, isArray, isNonEmptyArray } from \"../../../../../../methods/utils/array_utils\";\nimport { getCustomFields, handleNextStationBins, handleCurrentStationBins, handleMergeParts } from \"../../../../../../methods/utils/lot_utils\";\nimport {findProcessStartNodes, findProcessEndNodes, isStationOnBranch } from '../../../../../../methods/utils/processes_utils'\nimport LotContainer from \"../../lot/lot_container\";\n\nconst Column = ((props) => {\n\n\tconst {\n\t\tstation_id,\n\t\tstationName = \"Unnamed\",\n\t\tonCardClick,\n\t\tselectedCards,\n\t\tprocessId,\n\t\tHeaderContent,\n\t\tisCollapsed,\n\t\tmaxWidth,\n\t\tmaxHeight,\n\t\tsortMode,\n\t\tsortDirection,\n\t\tsetSelectedCards,\n\t\tcontainerStyle\n\t} = props\n\n\t// redux state\n\tconst reduxCards = useSelector(state => { return state.cardsReducer.processCards[processId] }) || {}\n\tconst hoveringLotId = useSelector(state => { return state.cardPageReducer.hoveringLotId }) || null\n\tconst draggingLotId = useSelector(state => { return state.cardPageReducer.draggingLotId }) || null\n\tconst draggingStationId = useSelector(state => state.cardPageReducer.draggingStationId) || null\n\tconst lotDivHeight = useSelector(state => state.cardPageReducer.lotDivHeight) || null\n\tconst dragFromBin = useSelector(state => state.cardPageReducer.dragFromBin) || null\n\tconst routes = useSelector(state => state.tasksReducer.tasks)\n\tconst stations = useSelector(state => state.stationsReducer.stations)\n\tconst processes = useSelector(state => state.processesReducer.processes)\n\tconst kickoffDashboards = useSelector(state => { return state.dashboardsReducer.kickOffEnabledDashboards})\n\tconst showCardEditor = useSelector(state => { return state.cardsReducer.showEditor })\n\tconst hideCard = useSelector(state => state.cardPageReducer.hideCard)\n\tconst history = useHistory();\n  const pageName = history.location.pathname;\n  const isDashboard = !!pageName.includes(\"/locations\");\n\t// actions\n\tconst lotRef = useRef(null)\n\tconst dragContainerRef = useRef(null)\n\tconst dispatch = useDispatch()\n\tconst dispatchPutCard = async (card, ID) => await dispatch(putCard(card, ID))\n\tconst dispatchSetLotDivHeight = (height) => dispatch(setLotDivHeight(height))\n\tconst dispatchSetDroppingLotId = async (lotId, binId) => await dispatch(setDroppingLotId(lotId, binId))\n\tconst dispatchSetLotHovering = async (lotId) => await dispatch(setLotHovering(lotId))\n\tconst dispatchSetDraggingLotId = async (lotId) => await dispatch(setDraggingLotId(lotId))\n\tconst dispatchSetDraggingStationId = async (stationId) => await dispatch(setDraggingStationId(stationId))\n\tconst dispatchSetDragFromBin = async (stationId) => await dispatch(setDragFromBin(stationId))\n\tconst dispatchSetHideCard = async (card) => await dispatch(setHideCard(card))\n\n\t// component state\n\tconst [dragEnter, setDragEnter] = useState(false)\n\tconst [lotQuantitySummation, setLotQuantitySummation] = useState(0)\n\tconst [numberOfLots, setNumberOfLots] = useState(0)\n\tconst [cards, setCards] = useState([])\n\tconst [enableFlags, setEnableFlags] = useState(true)\n\tconst [isSourcee, setIsSource] = useState(false)\n\tconst [highlightStation, setHighlightStation] = useState(false)\n\tconst [acceptDrop, setAcceptDrop] = useState(false)//checks if the station should accept the drop when hovering over it\n\tconst [inDropZone, setInDropZone] = useState(false)\n\n\tuseEffect(() => {\n\t\tlet tempLotQuantitySummation = 0\n\t\tlet tempNumberOfLots = 0\n\t\tcards.forEach((currLot) => {\n\t\t\tconst {\n\t\t\t\tcount = 0\n\t\t\t} = currLot || {}\n\n\t\t\ttempNumberOfLots = parseInt(tempNumberOfLots) + 1\n\t\t\ttempLotQuantitySummation = parseInt(tempLotQuantitySummation) + parseInt(count)\n\t\t})\n\n\t\tsetNumberOfLots(tempNumberOfLots)\n\t\tsetLotQuantitySummation(tempLotQuantitySummation)\n\t}, [reduxCards])\n\n\tconst [isSelectedCardsNotEmpty, setIsSelectedCardsNotEmpty] = useState(false)\n\n\tuseEffect(() => {\n\t\tif(!hideCard){\n\t\tif (sortMode) {\n\t\t\tlet tempCards = [...props.cards] // *** MAKE MODIFIABLE COPY OF CARDS TO ALLOW SORTING ***\n\t\t\tsortBy(tempCards, sortMode, sortDirection)\n\t\t\tsetCards(tempCards)\n\t\t}\n\t\telse {\n\t\t\tsetCards(props.cards)\n\t\t}\n\t}\n}, [reduxCards, sortMode, sortDirection])\n\n\n\tuseEffect(() => {\n\t\tif(!!draggingLotId && !!dragFromBin && !!reduxCards[draggingLotId]){\n\t\t\tlet accDrop = shouldAcceptDrop(draggingLotId, dragFromBin, station_id)\n\t\t\tsetAcceptDrop(accDrop)\n\t\t}\n\t\tif(!draggingLotId) setHighlightStation(null)\n\n\t}, [draggingLotId])\n\n\tuseEffect(() => {\n\t\tif(draggingLotId === null && !!hideCard && station_id === dragFromBin && processId === hideCard.process_id){\n\t\t\tlet tempCards = deepCopy(cards)\n\t\t\tlet ind = tempCards.findIndex(card => card.cardId === hideCard.cardId)\n\t\t\ttempCards.splice(ind,1)\n\t\t\tsetCards(tempCards)\n\t\t}\n\t}, [draggingLotId])\n\n\tuseEffect(() => {\n\t\tif(draggingLotId === null && !!hideCard && station_id === draggingStationId && processId === hideCard.process_id){\n\t\t\tlet tempCards = deepCopy(cards)\n\t\t\ttempCards.push(hideCard)\n\t\t\tsetCards(tempCards)\n\t\t}\n\t}, [draggingLotId])\n\n\n\t//This function is now more limiting with split/merge\n\t// -dont allow moving lot to next stations(s) if current station disperses a lot\n\t//-dont allow movinga lot backwards if the previous node has routes merging into it or if it disperses a lot\n\t//-dont allow moving lot back if current node has routes merging into it\n\t//-These limitations ensure dragging lots around in cardZone dont mess merge/split functionality\n\t//-We should make it more flexible in the future with functions that handle the above cases...\n\t//-There is some functionality that i added where you can drag lots forward into their merging station and it will properly merge them\n\tconst shouldAcceptDrop = (cardId, binId, station_id) => {\n\t\tlet lastStationTraversed = false\n\t\tlet oldProcessId = reduxCards[cardId].process_id\n\n\t\tconst process = processes[reduxCards[cardId].process_id]\n\t\tconst processRoutes = process.routes.map(routeId => routes[routeId])\n\n\t\tif (reduxCards[cardId].process_id !== processId) return false\n\t\tif (!!showCardEditor) return false\n\n\t\t\tlet startNodes = findProcessStartNodes(processRoutes, stations)\n\t\t\tlet endNode = findProcessEndNodes(processRoutes)\n\n\t\t\tif (oldProcessId !== processId) return [false, lastStationTraversed]\n\t\t\tif(!!showCardEditor) return [false, lastStationTraversed]\n\t\t\t//if (process[oldProcessId] === undefined) return false\n\n\t\t \tif(binId === station_id) {\n\t\t\t\t//setHighlightStation(true)\n\t\t\t\treturn [true, lastStationTraversed]\n\t\t\t}\n\n\t\t\tconst forwardsTraverseCheck = (currentStationID) => {\n\t\t\t\tif(endNode.includes(currentStationID) && station_id =='FINISH'){//If you can traverse to the end node, also allow finish column\n\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\telse if(currentStationID === 'QUEUE' && (process.startDivergeType!=='split' || startNodes.length ===1)){\n\t\t\t\t\t//if lot is in queue and station is one of the the start nodes and start disperse isnt split then allow move\n\t\t\t\t\tif(startNodes.includes(station_id)){\n\t\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t\telse{//If the station is not one of the start nodes still traverse forwards from all the start nodes to see if you can get to station\n\t\t\t\t\t\tfor(const ind in startNodes){\n\t\t\t\t\t\t\tconst canMove = forwardsTraverseCheck(startNodes[ind])\n\t\t\t\t\t\t\tif(!!canMove) return true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst nextRoutes = processRoutes.filter(route => route.load === currentStationID)\n\t\t\t\tif(!!nextRoutes[0] && (!nextRoutes[0].divergeType || nextRoutes[0].divergeType!=='split')){//can't drag forward if station disperses lots\n\t\t\t\t\tfor(const ind in nextRoutes){\n\t\t\t\t\t\tif(nextRoutes[ind].unload === station_id){\n\t\t\t\t\t\t\t//If you are skipping over nodes and drag to a merge station we need to keep track of the station right before\n\t\t\t\t\t\t\t//the merge station as merge functions need this to find routeTravelled\n\t\t\t\t\t\t\tlastStationTraversed = nextRoutes[ind].load\n\t\t\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tconst mergingRoutes = processRoutes.filter((route) => route.unload === nextRoutes[ind].unload);\n\t\t\t\t\t\t\tif(mergingRoutes.length === 1){\n\t\t\t\t\t\t\t\tconst canMove = forwardsTraverseCheck(nextRoutes[ind].unload)\n\t\t\t\t\t\t\t\tif(!!canMove) return true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst backwardsTraverseCheck = (currentStationID) => {//dragging into Queue, make sure kickoff isnt dispersed\n\t\t\t\tif(startNodes.includes(currentStationID) && station_id === 'QUEUE' && (process.startDivergeType!=='split' || startNodes.length ===1)) {//can traverse back to queue\n\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\treturn true\n\n\t\t\t\t}\n\n\t\t\t\telse if(currentStationID === 'FINISH'){//dragging from Finish. Can drag into traversed stations provided theyre not a merge station\n\t\t\t\t\tif(endNode.includes(station_id)){\n\t\t\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tconst canMove = backwardsTraverseCheck(endNode)\n\t\t\t\t\t\tif(!!canMove) return true\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst mergingRoutes = processRoutes.filter((route) => route.unload === currentStationID);\n\t\t\t\tif(mergingRoutes.length===1){//Can't drag backwards from merge station\n\t\t\t\t\tfor(const ind in mergingRoutes){\n\t\t\t\t\t\tconst dispersingRoutes = processRoutes.filter((route) => route.load === mergingRoutes[ind].load);\n\t\t\t\t\t\tif(mergingRoutes[ind].load === station_id) {\n\t\t\t\t\t\t\tif(dispersingRoutes.length === 1 || dispersingRoutes[0].divergeType!=='split' || !dispersingRoutes[0].divergeType ){\n\t\t\t\t\t\t\t\tsetHighlightStation(true)\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tif(dispersingRoutes.length === 1 || !dispersingRoutes[0].divergeType || dispersingRoutes[0].divergeType!=='split'){\n\t\t\t\t\t\t\t\t\tconst canMove = backwardsTraverseCheck(mergingRoutes[ind].load)\n\t\t\t\t\t\t\t\t\tif(!!canMove) return true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tlet atMergeStation = false\n\t\t\tconst forwardsFound = forwardsTraverseCheck(binId)\n\t\t\tif(!!forwardsFound) return [true, lastStationTraversed]\n\n\t\t\tconst backwardsFound = backwardsTraverseCheck(binId)\n\t\t\tif(!!backwardsFound) return [true, lastStationTraversed]\n\n\t\t\treturn [false, lastStationTraversed]\n\n\t}\n\n\n\tconst onMouseEnter = (event, lotId) => {\n\t\tdispatchSetLotHovering(lotId)\n\t}\n\n\n\tconst onMouseLeave = (event) => {\n\n\t\tdispatchSetLotHovering(null)\n\t}\n\n\tconst handleDeleteDisabledLot = (card, binId, partId) => {\n\t\t\tlet currLot = reduxCards[card.cardId]\n\t\t\tlet currBin = currLot.bins[binId]\n\n\t\t\tdelete currBin[partId]\n\n\t\t\tlet submitLot = {\n\t\t\t\t...currLot,\n\t\t\t\tbins: {\n\t\t\t\t\t...currLot.bins,\n\t\t\t\t\t[binId]: currBin\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(Object.values(currBin).length===1 && currBin['count'] === 0) delete submitLot.bins[binId]\n\t\t\tdispatchPutCard(submitLot, submitLot._id)\n\t}\n\n\tconst handleRightClickDeleteLot = (card, binId) => {\n\t\t\tlet currLot = reduxCards[card.cardId]\n\t\t\tlet currBin = currLot.bins[binId]\n\n\t\t\tcurrBin['count'] = 0\n\n\t\t\tlet submitLot = {\n\t\t\t\t...currLot,\n\t\t\t\tbins: {\n\t\t\t\t\t...currLot.bins,\n\t\t\t\t\t[binId]: currBin\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(Object.values(currBin).length===1) delete submitLot.bins[binId]\n\t\t\tdispatchPutCard(submitLot, submitLot._id)\n\t}\n\n\tconst getLastSelectedIndex = () => {\n\t\tlet addedIndex = -1\n\n\t\tfor (var i = selectedCards.length - 1; i >= 0; i--) {\n\t\t\tconst currLot = selectedCards[i]\n\t\t\tconst {\n\t\t\t\tbinId: currBinId\n\t\t\t} = currLot || {}\n\n\t\t\tif ((currBinId === station_id) && (i > addedIndex)) {\n\t\t\t\taddedIndex = i\n\t\t\t}\n\t\t}\n\n\t\treturn addedIndex\n\t}\n\n\tconst getLastSelected = () => {\n\t\tconst lastSelectedIndex = getLastSelectedIndex()\n\t\treturn selectedCards[lastSelectedIndex]\n\t}\n\n\tconst getBetweenSelected = (lotId) => {\n\t\tconst lastSelected = getLastSelected() || {}\n\t\tconst {\n\t\t\tcardId: lastSelectedLotId,\n\t\t} = lastSelected\n\n\t\tconst selectedIndex = cards.findIndex((currLot) => {\n\t\t\tconst {\n\t\t\t\tcardId: currLotId,\n\t\t\t\tbinId: currBinId\n\t\t\t} = currLot\n\n\t\t\treturn (lastSelectedLotId === currLotId) && (station_id === currBinId)\n\t\t})\n\n\t\tconst existingIndex = cards.findIndex((currLot) => {\n\t\t\tconst {\n\t\t\t\tcardId: currLotId,\n\t\t\t\tbinId: currBinId\n\t\t\t} = currLot\n\n\t\t\treturn (lotId === currLotId) && (station_id === currBinId)\n\t\t})\n\n\t\tif (selectedIndex === -1) {\n\t\t\treturn [cards[existingIndex]]\n\t\t}\n\t\telse if (selectedIndex < existingIndex) {\n\t\t\treturn cards.slice(selectedIndex, existingIndex + 1)\n\t\t}\n\t\telse {\n\t\t\treturn cards.slice(existingIndex, selectedIndex + 1).reverse()\n\t\t}\n\t}\n\n\tconst handleDrop = async () => {\n\t\t\tlet [inDropZne, lastStn] = shouldAcceptDrop(draggingLotId, dragFromBin, draggingStationId)\n\t\t\tlet tempDragId = draggingLotId\n\t\t\tif(!!inDropZne){\n\t\t\t\t\tconst binId = dragFromBin\n\t\t\t\t\tconst droppedCard = reduxCards[draggingLotId] ? reduxCards[draggingLotId] : {}\n\t\t\t\t\tconst oldBins = droppedCard.bins ? droppedCard.bins : {}\n\t\t\t\t\tconst {\n\t\t\t\t\t\t[binId]: movedBin,\n\t\t\t\t\t\t...remainingOldBins\n\t\t\t\t\t} = oldBins || {}\n\n\t\t\t\t\tdispatchSetDraggingLotId(null)\n\n\t\t\t\t\tif (movedBin) {\n\t\t\t\t\t\tlet updatedLot = droppedCard\n\t\t\t\t\t\tlet stationBeforeMerge = !!lastStn ? lastStn : binId\n\t\t\t\t\t\tupdatedLot.bins = handleNextStationBins(updatedLot.bins, updatedLot.bins[binId]?.count, stationBeforeMerge, draggingStationId, processes[updatedLot.process_id], routes, stations)\n\t\t\t\t\t\tupdatedLot.bins = handleCurrentStationBins(updatedLot.bins, updatedLot.bins[binId]?.count, binId, processes[updatedLot.process_id], routes)\n\t\t\t\t\t\tif(!!updatedLot.bins[binId] && !updatedLot.bins[binId]['count']){\n\t\t\t\t\t\t\tupdatedLot.bins[binId] = {\n\t\t\t\t\t\t\t\t...updatedLot.bins[binId],\n\t\t\t\t\t\t\t\tcount: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//Bin exists but nothing in it. Delete the bin as this messes various things up.\n\t\t\t\t\t\tif(!!updatedLot.bins[binId] && updatedLot.bins[binId]['count'] === 0 && Object.values(updatedLot.bins[binId]).length === 1){\n\t\t\t\t\t\t\tdelete updatedLot.bins[binId]\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet result = dispatchPutCard(updatedLot, updatedLot._id)\n\n\t\t\t\t\t\tresult.then((res) => {\n\t\t\t\t\t\t\tdispatchSetHideCard(null)\n\t\t\t\t\t\t\tdispatchSetDragFromBin(null)\n\t\t\t\t\t\t\tdispatchSetDraggingStationId(null)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdispatchSetDraggingLotId(null)\n\t\t\t\tdispatchSetDragFromBin(null)\n\t\t\t\tdispatchSetDraggingStationId(null)\n\t\t\t\tdispatchSetHideCard(null)\n\t\t\t}\n\t}\n\n\tconst renderCards = () => {\n\t\treturn (\n\t\t\t\t<styled.BodyContainer\n\t\t\t\t\tclass = 'container'\n\t\t\t\t\tstyle={{ overflow: \"auto\", height: \"100%\", padding: \"1rem\",\n\t\t\t\t\t pointerEvents: !!draggingLotId && 'none',\n\t\t\t\t }}\n\n\t\t\t\t\t>\n\t\t\t\t\t{(!!highlightStation && !!draggingLotId && station_id!==dragFromBin) &&\n\t\t\t\t\t\t<styled.DragToDiv\n\t\t\t\t\t\tref = {dragContainerRef}\n\t\t\t\t\t\tdragDivHeight = {!!lotDivHeight ? (lotDivHeight-1) + 'rem' : '10rem'}\n\t\t\t\t\t\tclass = 'dragToDiv'\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\t\t{cards.map((card, index) => {\n\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t_id,\n\t\t\t\t\t\t\t\tcount = 0,\n\t\t\t\t\t\t\t\tleadTime,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tobject_id,\n\t\t\t\t\t\t\t\tcardId,\n\t\t\t\t\t\t\t\tflags,\n\t\t\t\t\t\t\t\tlotNum,\n\t\t\t\t\t\t\t\ttotalQuantity,\n\t\t\t\t\t\t\t\tprocessName,\n\t\t\t\t\t\t\t\tlotTemplateId,\n\t\t\t\t\t\t\t\t...rest\n\t\t\t\t\t\t\t} = card\n\n\t\t\t\t\t\t\t// const isSelected = (draggingLotId !== null) ? () : ()\n\t\t\t\t\t\t\tconst selectable = (hoveringLotId !== null) || (draggingLotId !== null) || isSelectedCardsNotEmpty\n\t\t\t\t\t\t\tif(!!reduxCards[card.cardId]?.bins[card.binId]){\n\t\t\t\t\t\t\t\tlet partBins = reduxCards[card.cardId].bins[card.binId]\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tObject.keys(partBins).map((part) => {\n\n\t\t\t\t\t\t\t\t\t\tconst isPartial = part !== 'count' ? true : false\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<VisibilitySensor partialVisibility = {true} offset = {{bottom: 50, top: 50}}>\n\t\t\t\t\t\t\t\t\t\t\t\t{({isVisible}) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!!isVisible ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{(partBins[part]>0 || (part === 'count' && partBins['count']>0)) &&\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<styled.LotDiv\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid = {'item'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tref = {lotRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass = 'item'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(event) => onMouseEnter(event, cardId)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseLeave={onMouseLeave}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonDragStart = {(e)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetHideCard(card)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!!lotRef && !!lotRef.current && !!lotRef.current.offsetHeight){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetLotDivHeight(lotRef.current.offsetHeight/16)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.target.style.opacity = '.001'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetDraggingLotId(cardId)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetDragFromBin(station_id)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonDragEnd = {(e)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!!dragFromBin && !!draggingStationId && dragFromBin!==draggingStationId) handleDrop()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetDraggingLotId(null)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetDragFromBin(null)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetDraggingStationId(null)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchSetHideCard(null)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.target.style.opacity = '1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackground: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tborderRadius: '1rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpointerEvents: 'none'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LotContainer\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisPartial = {isPartial}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonDeleteDisabledLot = {() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleDeleteDisabledLot(card, card.binId, part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonRightClickDeleteLot = {()=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleRightClickDeleteLot(card, card.binId)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableFlagSelector={enableFlags}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectable={selectable}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={cardId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// processName={processName}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalQuantity={totalQuantity}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlotNumber={lotNum}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={isPartial ? name + ` (${routes[part]?.part})` : name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount={isPartial ? partBins[part] : partBins['count']}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleadTime={leadTime}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={cardId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tflags={flags || []}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlotId={cardId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbinId={station_id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst payload = getBetweenSelected(cardId)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonCardClick(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlotId: cardId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprocessId: processId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbinId: station_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontainerStyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tborderBottom: draggingLotId === cardId && station_id === dragFromBin && '.25rem solid #b8b9bf',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tborderRight: draggingLotId === cardId && station_id === dragFromBin && '.2rem solid #b8b9bf',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tborderLeft: draggingLotId === cardId && station_id === dragFromBin && '.1rem solid #b8b9bf',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tborderTop: draggingLotId === cardId && station_id === dragFromBin && '.05rem solid #b8b9bf',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tboxShadow: draggingLotId === cardId && station_id === dragFromBin && '2px 3px 2px 1px rgba(0,0,0,0.2)',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tborderRadius: '0.2rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpadding: '0.2rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmargin: '.4rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '96%',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpointerEvents: !!draggingLotId && draggingLotId !== cardId && 'none',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</styled.LotDiv>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div style = {{minHeight:'15rem', width: '80%'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t...Loading\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</VisibilitySensor>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})}\n\t\t\t\t</styled.BodyContainer>\n\t\t)\n\t}\n\n\tif (isCollapsed) {\n\t\treturn (\n\t\t\t<styled.StationContainer\n\t\t\t\tmaxHeight={maxHeight}\n\t\t\t\tisCollapsed={isCollapsed}\n\t\t\t\tmaxWidth={maxWidth}\n\t\t\t>\n\t\t\t\t{HeaderContent(numberOfLots, lotQuantitySummation)}\n\n\t\t\t\t<styled.BodyContainer style={{\n\t\t\t\t\tpadding: \"1rem 0\",\n\t\t\t\t\twhiteSpace: \"nowrap\",\n\t\t\t\t\toverflow: \"hidden\",\n\t\t\t\t\ttextOverflow: \"ellipsis\",\n\n\t\t\t\t}}>\n\t\t\t\t\t<styled.RotationWrapperOuter>\n\t\t\t\t\t\t<styled.RotationWrapperInner>\n\t\t\t\t\t\t\t<styled.RotatedRouteName>{stationName}</styled.RotatedRouteName>\n\t\t\t\t\t\t</styled.RotationWrapperInner>\n\t\t\t\t\t</styled.RotationWrapperOuter>\n\t\t\t\t</styled.BodyContainer>\n\t\t\t</styled.StationContainer>\n\t\t)\n\t}\n\n\telse {\n\t\treturn (\n\n\t\t\t<styled.StationContainer\n\t\t\t\tonDragOver = {(e) => {\n\t\t\t\t if(!!dragContainerRef && !!dragContainerRef.current) dragContainerRef.current.style.minHeight = (lotDivHeight + 4) + 'rem'\n\t\t\t\t dispatchSetDraggingStationId(station_id)\n\t\t\t\t if(!!acceptDrop){\n\t\t\t\t\t setInDropZone(true)\n\t\t\t\t }\n\t\t\t\t e.preventDefault()\n\t\t\t }}\n\t\t\t onDragLeave={(e) => {\n\t\t\t\t\t setInDropZone(false)\n\t\t\t\t\t dispatchSetDraggingStationId(null)\n\t\t\t\t\t if(!!dragContainerRef && !!dragContainerRef.current) dragContainerRef.current.style.minHeight = (lotDivHeight -1) + 'rem'\n\t\t\t }}\n\t\t\t\tisCollapsed={isCollapsed}\n\t\t\t\tmaxWidth={maxWidth}\n\t\t\t\tmaxHeight={maxHeight}\n\t\t\t\tstyle={{\n\t\t\t\t\t...containerStyle\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div style = {{pointerEvents: !!draggingLotId && 'none'}}>\n\t\t\t\t\t{HeaderContent(numberOfLots, lotQuantitySummation)}\n\t\t\t\t</div>\n\t\t\t\t{!showCardEditor &&\n\t\t\t\t\trenderCards()\n\t\t\t\t}\n\t\t\t</styled.StationContainer>\n\t\t)\n\t}\n\n})\n\nexport default Column\n","import React, { useState, useMemo } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment';\nimport Switch from 'react-ios-switch';\n\nimport { useTheme } from \"styled-components\";\nimport * as styled from \"./station_column.style\";\n\n// Import Components\nimport TimePicker from \"rc-time-picker\";\nimport Button from '../../../../../basic/button/button'\nimport Column from \"../column/column\"\n\n// Import Actions\nimport { putStation } from '../../../../../../redux/actions/stations_actions'\n\n// Import Utils\nimport { deepCopy } from '../../../../../../methods/utils/utils'\nimport { convertSecondsToHHMMSS, convertHHMMSSStringToSeconds } from '../../../../../../methods/utils/time_utils'\n\nconst StationsColumn = ((props) => {\n    const {\n        id,\n        station_id,\n        stationName = \"Unnamed\",\n        onCardClick,\n        cards = [],\n        processId,\n        maxHeight,\n        sortMode,\n        sortDirection,\n        selectedCards,\n        setSelectedCards,\n        autoCycleTime,\n        containerStyle\n    } = props\n\n    const dispatch = useDispatch()\n    const dispatchPutStation = async (station) => await dispatch(putStation(station))\n\n    const stations = useSelector(state => state.stationsReducer.stations)\n    const theme = useTheme()\n\n    const [isCollapsed, setCollapsed] = useState(false)\n\n    const cycleTimeDisplayTime = useMemo(() => {\n\n        let time = '00:00:00'\n\n        // If there is a manual time and its enable then use that time\n        if (stations[station_id].cycle_time_mode === 'auto' && !!stations[station_id]?.cycle_time) {\n            time = convertSecondsToHHMMSS(stations[station_id].cycle_time);\n        } else if (stations[station_id].cycle_time_mode === 'manual' && !!stations[station_id]?.manual_cycle_time) {\n            time = convertSecondsToHHMMSS(stations[station_id]?.manual_cycle_time);\n        }\n\n        // Split the time up\n        const splitVal = time.split(':')\n\n        // Set it to a moment for the time picker\n        return moment().set({ 'hour': splitVal[0], 'minute': splitVal[1], 'second': splitVal[2] })\n    }, [stations[station_id]])\n\n\n    const handleSaveCycleTime = (time) => {\n        let station = deepCopy(stations[station_id])\n        station.manual_cycle_time = convertHHMMSSStringToSeconds(time)\n        dispatchPutStation(station)\n    }\n\n    const handleToggleManualCycleTime = (isManual) => {\n        let station = deepCopy(stations[station_id])\n        station.cycle_time_mode = isManual ? 'manual' : 'auto'\n        dispatchPutStation(station)\n    }\n\n    const renderCycleTime = () => {\n\n        return (\n            <>\n                <styled.divider />\n                <styled.HeaderSection style={{ marginTop: '.5rem' }}>\n                    <styled.HeaderSectionTitle>\n                        Cycle Time\n                    </styled.HeaderSectionTitle>\n                    <styled.RowContainer>\n                        <styled.QuantityText style={{ marginRight: '.25rem', display: 'flex', alignItems: 'center' }}>Auto</styled.QuantityText>\n                        <Switch\n                            onColor={theme.schema.lots.solid}\n                            style={{ transform: 'scale(0.8)' }}\n                            checked={stations[station_id]?.cycle_time_mode === 'manual'}\n                            onChange={switched => {\n                                handleToggleManualCycleTime(switched)\n                            }}\n                        />\n                        <styled.QuantityText style={{ marginLeft: '.25rem', display: 'flex', alignItems: 'center' }}>Manual</styled.QuantityText>\n                    </styled.RowContainer>\n\n\n                </styled.HeaderSection>\n\n                <styled.HeaderSection style={{ opacity: stations[station_id]?.cycle_time_mode === 'auto' && '70%', pointerEvents: stations[station_id]?.cycle_time_mode === 'auto' ? 'none' : 'auto', borderRadius: '0 3px 3px 0'}}>\n                    <styled.HeaderSectionTitle style={{ fontSize: '1rem' }}>\n                        (HH:MM:SS)\n                    </styled.HeaderSectionTitle>\n\n                    <TimePicker\n                        showHours={true}\n                        showMinutes={true}\n                        value={cycleTimeDisplayTime}\n                        onChange={(val) => {\n                            handleSaveCycleTime(val.format('HH:mm:ss'))\n                        }}\n                        style={{width: '5.5rem'}}\n                        allowEmpty={false}\n                        // disabled={stations[station_id]?.cycle_time_mode === 'auto'}\n                    />\n\n\n                </styled.HeaderSection>\n                <styled.divider />\n\n            </>\n        )\n    }\n\n    return (\n        <Column\n            setSelectedCards={setSelectedCards}\n            selectedCards={selectedCards}\n            sortDirection={sortDirection}\n            maxWidth={\"25rem\"}\n            sortMode={sortMode}\n            maxHeight={maxHeight}\n            id={id}\n            containerStyle={containerStyle}\n            HeaderContent={(numberOfLots = 0, lotQuantitySummation = 0) => {\n                if (isCollapsed) {\n                    return (\n                        <styled.StationHeader>\n                            <i className=\"fa fa-chevron-right\" aria-hidden=\"true\"\n                                onClick={() => setCollapsed(false)}\n                                style={{ cursor: 'pointer' }}\n                            />\n                        </styled.StationHeader>\n                    )\n                }\n                else {\n                    return (\n                        <styled.StationHeader>\n                            <styled.HeaderRow\n                                style={{\n                                    marginBottom: \"1rem\",\n                                    justifyContent: 'center'\n                                }}\n                            >\n                                <styled.LabelContainer>\n                                    <styled.StationTitle>{stationName}</styled.StationTitle>\n                                </styled.LabelContainer>\n\n                                <i className=\"fas fa-ellipsis-h\" style={{ opacity: 0 }}></i>\n\n                            </styled.HeaderRow>\n\n                            <styled.HeaderRow>\n                                <div>\n                                    <styled.QuantityText>Lots: </styled.QuantityText>\n                                    <styled.QuantityText>{numberOfLots}</styled.QuantityText>\n                                </div>\n\n                                <div>\n                                    <styled.QuantityText>Total Quantity: </styled.QuantityText>\n                                    <styled.QuantityText>{lotQuantitySummation}</styled.QuantityText>\n                                </div>\n\n                            </styled.HeaderRow>\n                            {renderCycleTime()}\n                        </styled.StationHeader>\n                    )\n                }\n            }}\n            station_id={station_id}\n            stationName={stationName}\n            onCardClick={onCardClick}\n            cards={cards}\n            processId={processId}\n            isCollapsed={isCollapsed}\n        />\n    )\n})\n\nexport default StationsColumn\n","import styled, { css } from \"styled-components\";\nimport {Container} from \"react-smooth-dnd\";\n\n// export const RouteContainer = styled.div`\n//     display: flex;\n//     flex: 1;\n//     flex-direction: column;\n//     background: yellow;\n// `\n\nconst minHeight = \"10rem\"\nexport const RotatedRouteName = styled.span`\n// background: red;\n\ttransform: rotate(-90deg);\n\t// transform: translateY(50%);\n`\n\n\nexport const StationContainerCss = css`\n\tdisplay: flex;\n    flex-direction: column;\n    min-height: ${minHeight};\n    \n    width: ${props => props.isCollapsed ? \"2rem\" : \"fit-content\"};\n    max-width: ${props => props.isCollapsed ? \"2rem\" : \"fit-content\"};\n    min-width: ${props => props.isCollapsed ? \"2rem\" : \"fit-content\"};\n    margin-right: 1rem;\n    \n    border-radius: 1rem;\n    overflow: hidden;\n    \n    color: ${props => props.theme.bg.octonary};\n`\n\nexport const StationContainer = styled.div`\n    ${StationContainerCss};\n`\n\nexport const StationHeader = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    background: ${props => props.theme.bg.secondary};\n    padding: 0.5rem 1rem;\n`\n\nexport const HeaderRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    align-self: stretch;\n`\n\nexport const QuantityText = styled.span`\n    font-size: 1rem;\n    color: ${props => props.theme.textColor};\n\n`\n\n\nexport const TitleContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\n\n\nexport const RouteContainer = styled.div`\n\tdisplay: flex;\n\tborder-bottom: 1px solid black;\n\twidth: 100%;\n`\n\nexport const LabelContainer = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n    margin: 0 2rem;\n\t// justify-content: space-between;\n`\n\nexport const StationLabel = styled.span`\n    text-align: center;\n    margin-right: 1rem;\n    \n    font-size: ${props => props.theme.fontSize.sz3};\n`\n\nexport const StationTitle = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz3};\n    color: ${props => props.theme.textColor};\n`\n\n\n\nexport const StationButton = styled.button`\n\n`\n\nexport const BodyContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\t// flex: 1;\n\tmin-height: ${minHeight};\n\toverflow: hidden;\n\tbackground: ${props => props.theme.bg.quaternary};\n\topacity: ${props => props.dragEnter ? 0.75 : 1};\n\tborder-bottom-right-radius: 1rem;\n\tborder-bottom-left-radius: 1rem;\n\tjustify-content: center;\n`\n","import React, {useState} from \"react\";\n\n// functions external\nimport PropTypes from 'prop-types';\n\n// components internal\nimport Column from \"../column/column\";\nimport Button from \"../../../../../basic/button/button\";\n\nimport * as styled from \"./lot_queue.style\";\n\nconst LotQueue = ((props) => {\n\tconst {\n\t\tstation_id = \"QUEUE\",\n\t\tstationName = \"Unnamed\",\n\t\tonCardClick,\n\t\tcards,\n\t\tonAddLotClick,\n\t\tprocessId,\n\t\tsetShowCardEditor,\n\t\tshowCardEditor,\n\t\tmaxHeight,\n\t\tsortMode,\n\t\tsortDirection,\n\t\tselectedCards,\n\t\tsetSelectedCards\n\t} = props\n\n\tconst [isCollapsed, setCollapsed] = useState(false)\n\n\treturn(\n\t\t<Column\n\t\t\tsetSelectedCards={setSelectedCards}\n\t\t\tselectedCards={selectedCards}\n\t\t\tsortDirection={sortDirection}\n\t\t\tsortMode={sortMode}\n\t\t\tmaxHeight={maxHeight}\n\t\t\tmaxWidth={\"24rem\"}\n\t\t\tHeaderContent={(numberOfLots = 0, lotQuantitySummation = 0) => {\n\t\t\t\tif(isCollapsed) {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<styled.StationHeader>\n\t\t\t\t\t\t\t<i className=\"fa fa-chevron-right\" aria-hidden=\"true\"\n\t\t\t\t\t\t\t   onClick={() => setCollapsed(false)}\n\t\t\t\t\t\t\t\t style = {{cursor: \"pointer\"}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</styled.StationHeader>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<styled.StationHeader>\n\t\t\t\t\t\t\t<styled.HeaderRow\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tmarginBottom: \"1rem\"\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<i className=\"fa fa-chevron-down\" aria-hidden=\"true\"\n\t\t\t\t\t\t\t\t   onClick={() => setCollapsed(true)}\n\t\t\t\t\t\t\t\t\t style = {{cursor: \"pointer\"}}\n\n\t\t\t\t\t\t\t\t/>\n\n\n\t\t\t\t\t\t\t\t<styled.LabelContainer>\n\t\t\t\t\t\t\t\t\t<styled.StationTitle>{stationName}</styled.StationTitle>\n\t\t\t\t\t\t\t\t</styled.LabelContainer>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={onAddLotClick}\n\t\t\t\t\t\t\t\t\tschema={'lots'}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t+ Lot\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</styled.HeaderRow>\n\t\t\t\t\t\t\t<styled.HeaderRow\n\t\t\t\t\t\t\t\tstyle={{justifyContent: \"space-between\"}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>Lots: </styled.QuantityText>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>{numberOfLots}</styled.QuantityText>\n\t\t\t\t\t\t\t\t</div>\n\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>Total Quantity: </styled.QuantityText>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>{lotQuantitySummation}</styled.QuantityText>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</styled.HeaderRow>\n\n\t\t\t\t\t\t</styled.StationHeader>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}}\n\t\t\tstation_id={station_id}\n\t\t\tstationName = {stationName}\n\t\t\tonCardClick={onCardClick}\n\t\t\tcards = {cards}\n\t\t\tprocessId={processId}\n\t\t\tisCollapsed={isCollapsed}\n\t\t/>\n\t)\n\n\n})\n\n// Specifies propTypes\nLotQueue.propTypes = {\n\tstationName: PropTypes.string,\n\tonCardClick: PropTypes.func,\n\tonAddLotClick: PropTypes.func,\n\tsetShowCardEditor: PropTypes.func,\n\tshowCardEditor: PropTypes.bool\n};\n\n// Specifies the default values for props:\nLotQueue.defaultProps = {\n\tstationName: \"Unnamed\",\n\tonCardClick: ()=>{},\n\tonAddLotClick: ()=>{},\n\tcards: [],\n\tsetShowCardEditor: ()=>{},\n\tshowCardEditor: false\n};\n\nexport default LotQueue\n","import styled, { css } from \"styled-components\";\nimport {Container} from \"react-smooth-dnd\";\n\n// export const RouteContainer = styled.div`\n//     display: flex;\n//     flex: 1;\n//     flex-direction: column;\n//     background: yellow;\n// `\n\nconst minHeight = \"10rem\"\nexport const RotatedRouteName = styled.span`\n// background: red;\n\ttransform: rotate(-90deg);\n\t// transform: translateY(50%);\n`\n\n\nexport const StationContainerCss = css`\n\tdisplay: flex;\n    flex-direction: column;\n    min-height: ${minHeight};\n    \n    width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    max-width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    min-width: ${props => props.isCollapsed ? \"2rem\" : \"15rem\"};\n    margin-right: 1rem;\n    \n    border-radius: 1rem;\n    overflow: hidden;\n    \n    color: ${props => props.theme.bg.octonary};\n`\n\nexport const StationContainer = styled.div`\n    ${StationContainerCss};\n`\n\nexport const StationHeader = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    background: ${props => props.theme.bg.secondary};\n    padding: .5rem 1rem;\n`\n\nexport const HeaderRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    align-self: stretch;\n`\n\nexport const QuantityText = styled.span`\n    font-size: 1rem;\n    color: ${props => props.theme.textColor};\n`\n\nexport const HeaderContent = styled.div`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    justify-content: space-between;\n    align-items: center;\n    padding-left: 1rem;\n    padding-right: 1rem;\n \n \n`\n\n\nexport const TitleContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\n\n\nexport const RouteContainer = styled.div`\n\tdisplay: flex;\n\tborder-bottom: 1px solid black;\n\twidth: 100%;\n`\n\nexport const LabelContainer = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\t// justify-content: space-between;\n`\n\nexport const StationLabel = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz4};\n`\n\nexport const StationTitle = styled.span`\n    text-align: center;\n    font-size: ${props => props.theme.fontSize.sz3};\n    color: ${props => props.theme.textColor};\n`\n\n\n\nexport const StationButton = styled.button`\n\n`\n\nexport const BodyContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\t// flex: 1;\n\tmin-height: ${minHeight};\n\toverflow: hidden;\n\tbackground: ${props => props.theme.bg.quaternary};\n\topacity: ${props => props.dragEnter ? 0.75 : 1};\n\tborder-bottom-right-radius: 1rem;\n\tborder-bottom-left-radius: 1rem;\n\tjustify-content: center;\n`\n","import {SortableContainer} from \"react-sortable-hoc\";\n\nimport * as styled from \"./finish_column.style\";\n\nimport React, {useState} from \"react\";\n\nimport Column from \"../column/column\"\n\nconst FinishColumn = ((props) => {\n\tconst {\n\t\tstation_id,\n\t\tstationName = \"Unnamed\",\n\t\tonCardClick,\n\t\tcards = [],\n\t\tprocessId,\n\t\tmaxHeight,\n\t\tsortMode,\n\t\tsortDirection,\n\t\tselectedCards,\n\t\tsetSelectedCards\n\t} = props\n\n\tconst [isCollapsed, setCollapsed] = useState(false)\n\n\treturn(\n\t\t<Column\n\t\t\tsetSelectedCards={setSelectedCards}\n\t\t\tselectedCards={selectedCards}\n\t\t\tsortDirection={sortDirection}\n\t\t\tmaxHeight={maxHeight}\n\t\t\tsortMode={sortMode}\n\t\t\tmaxWidth={\"24rem\"}\n\t\t\tHeaderContent={(numberOfLots = 0, lotQuantitySummation = 0)=>{\n\t\t\t\tif(isCollapsed) {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<styled.StationHeader>\n\t\t\t\t\t\t\t<i className=\"fa fa-chevron-right\" aria-hidden=\"true\"\n\t\t\t\t\t\t\t   onClick={() => setCollapsed(false)}\n\t\t\t\t\t\t\t\t style = {{cursor: \"pointer\"}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</styled.StationHeader>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<styled.StationHeader>\n\t\t\t\t\t\t\t<styled.HeaderRow style={{\n\t\t\t\t\t\t\t\tmarginBottom: \"1rem\",\n\t\t\t\t\t\t\t\tjustifyContent: 'center'\n\t\t\t\t\t\t\t}}>\n\n\t\t\t\t\t\t\t\t<styled.LabelContainer>\n\n\t\t\t\t\t\t\t\t\t<styled.StationTitle>{stationName}</styled.StationTitle>\n\t\t\t\t\t\t\t\t</styled.LabelContainer>\n\n\t\t\t\t\t\t\t\t<i className=\"fas fa-ellipsis-h\" style={{opacity: 0}}></i>\n\t\t\t\t\t\t\t</styled.HeaderRow>\n\n\t\t\t\t\t\t\t<styled.HeaderRow>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>Lots: </styled.QuantityText>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>{numberOfLots}</styled.QuantityText>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>Total Quantity: </styled.QuantityText>\n\t\t\t\t\t\t\t\t\t<styled.QuantityText>{lotQuantitySummation}</styled.QuantityText>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</styled.HeaderRow>\n\t\t\t\t\t\t</styled.StationHeader>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}}\n\t\t\tstation_id={station_id}\n\t\t\tstationName = {stationName}\n\t\t\tonCardClick={onCardClick}\n\t\t\tcards = {cards}\n\t\t\tprocessId={processId}\n\t\t\tisCollapsed={isCollapsed}\n\t\t/>\n\t)\n\n\n})\n\nexport default FinishColumn\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  // max-height: ${props => props.maxHeight};\n  display: flex;\n  flex-direction: row;\n  padding: 1rem;\n  justify-content:  flex-start;\n`\n\nexport const ColumnGroup = styled.div`\ndisplay: flex;\nflex-direction: row;\npadding: 1rem 0rem;\nmargin: 0 1rem;\n// border: 1px solid lightgrey;\n`","import React, { useEffect, useState, memo, useMemo } from \"react\"\nimport useWindowDimensions from \"../../../../../higher_order_components/react-window-size\";\n\n// components internal\nimport StationsColumn from \"../columns/station_column/station_column\"\nimport LotQueue from \"../columns/lot_queue/lot_queue\"\nimport FinishColumn from \"../columns/finish_column/finish_column\"\n\n// functions external\nimport { useDispatch, useSelector } from \"react-redux\"\nimport PropTypes from \"prop-types\"\n\n// utils\nimport { getLotTotalQuantity, checkCardMatchesFilter, getMatchesFilter } from \"../../../../../methods/utils/lot_utils\";\nimport { getLoadStationId, getUnloadStationId } from \"../../../../../methods/utils/route_utils\";\n\n//Actions\nimport {putCard} from '../../../../../redux/actions/card_actions'\n\n// styles\nimport * as styled from \"./card_zone.style\"\nimport { isObject } from \"../../../../../methods/utils/object_utils\";\nimport { isArray } from \"../../../../../methods/utils/array_utils\";\nimport { LOT_FILTER_OPTIONS, SORT_DIRECTIONS } from \"../../../../../constants/lot_contants\";\nimport { findProcessEndNodes } from \"../../../../../methods/utils/processes_utils\";\n\n\nconst CardZone = ((props) => {\n\n    // extract props\n    const {\n        handleCardClick,\n        processId,\n        setShowCardEditor,\n        showCardEditor,\n        maxHeight,\n        lotFilters,\n        lotFilterValue,\n        selectedFilterOption,\n        sortMode,\n        sortDirection,\n        selectedCards,\n        setSelectedCards,\n        handleAddLotClick,\n    } = props\n\n    const { height: windowHeight, width: windowWidth } = useWindowDimensions()\n    const dispatch = useDispatch()\n\n    // redux state\n    const currentProcess = useSelector(state => { return state.processesReducer.processes[processId] }) || {}\n    const showFinish = currentProcess.showFinish === undefined ? true: currentProcess.showFinish\n    const showQueue = currentProcess.showQueue === undefined ? true: currentProcess.showQueue\n\n    const dispatchPutCard = (card,cardId) => dispatch(putCard(card, cardId))\n    const routes = useSelector(state => { return state.tasksReducer.tasks })\n    const lotTemplates = useSelector(state => state.lotTemplatesReducer.lotTemplates)\n    const allCards = useSelector(state => { return state.cardsReducer.processCards }) || {}\n    const stations = useSelector(state => { return state.stationsReducer.stations })\n    const draggedLotInfo = useSelector(state => { return state.cardPageReducer.droppedLotInfo })\n    const { shiftDetails } = useSelector(state => state.settingsReducer.settings)\n    const multipleFilters = useSelector(state => state.settingsReducer.settings.enableMultipleLotFilters)\n    const {\n        lotId: draggingLotId = \"\",\n        binId: draggingBinId = \"\"\n    } = draggedLotInfo || {}\n    // component state\n    const [cardsSorted, setCardsSorted] = useState({})\n    const [bins, setBins] = useState({})\n    const [queue, setQueue] = useState([])\n    const [finished, setFinished] = useState([])\n    const [deleteStationCycleTime, setDeleteStationCycleTime] = useState({})\n\n    const {\n        name: processName = \"\"\n    } = currentProcess || {}\n\n    const doesProcessEndInAllWarehouses = useMemo(() => {\n        const processRoutes = currentProcess.routes.map(routeId => routes[routeId]);\n        const processEndNodes = findProcessEndNodes(processRoutes)\n\n        return processEndNodes.map(nodeId => stations[nodeId]?.type).every(type => type === 'warehouse')\n    }, [currentProcess.routes, stations])\n    // need to loop through the process's routes first and get all station ids involved in the process\n    // this must be done first in order to avoid showing lots that are in stations that are no longer a part of the process\n    useEffect(() => {\n        let prevLoadStationId\t\t// tracks previous load station id when looping through routes\n        let prevUnloadStationId\t\t// tracks previous unload station id when looping through routes\n        let tempBins = {}\t// temp var for storing sorted cards\n\n        // loop through routes, get load / unload station id and create entry in tempCardsSorted for each station\n        currentProcess.routes && currentProcess.routes.forEach((currRouteId, index) => {\n\n            // get current route and load / unload station ids\n            const currRoute = routes[currRouteId]\n            const loadStationId = getLoadStationId(currRoute)\n            const unloadStationId = getUnloadStationId(currRoute)\n\n            tempBins[loadStationId] = {\n                station_id: loadStationId,\n                cards: []\n            }\n\n            // add entry in tempCardsSorted\n            tempBins[unloadStationId] = {\n                station_id: unloadStationId,\n                cards: []\n            }\n\n            // update prevLoadStationId and prevUnloadStationId\n            prevLoadStationId = loadStationId\n            prevUnloadStationId = unloadStationId\n        })\n\n        setBins(tempBins)\n\n    }, [currentProcess, routes])\n\n\n    // now that the object keys have been made, loop through the process's cards and add them to the correct bins\n    useEffect(() => {\n        let tempQueue = []\t\t// temp var for storing queue lots\n        let tempFinished = []\t// temp var for storing finished lots\n        let tempCardsSorted = { ...bins }\n\n        const processCards = allCards[processId] || {}\n\n        Object.values(processCards).forEach((card) => {\n            // extract lot attributes\n            const {\n                bins: cardBins,\n                _id,\n                ...rest\n            } = card\n\n            const totalQuantity = getLotTotalQuantity(card)\n            // const matchesFilter = lotFilters.reduce((filter, matchesAll) => matchesAll && checkCardMatchesFilter(card, filter), true)\n            var matchesFilter = false\n            if(!!multipleFilters){\n              matchesFilter = lotFilters.reduce((matchesAll, filter) => matchesAll && checkCardMatchesFilter(card, filter), true)\n            }\n            else{\n              matchesFilter = getMatchesFilter(card, lotFilterValue, selectedFilterOption)\n            }\n\n            if (cardBins && matchesFilter) {\n\n                // loop through this lot's bins\n                Object.entries(cardBins).forEach((binEntry) => {\n\n                    // get bin attributes\n                    const binId = binEntry[0]\n                    const binValue = binEntry[1]\n                    const {\n                        count\n                    } = binValue\n\n                    if (!(count > -1)) return\n\n                    // don't render lot being dragged - prevents flicker bug after drop\n                    //if ((binId === draggingBinId) && (_id === draggingLotId)) return\n\n                    const lotItem = {\n                        ...rest,\n                        totalQuantity,\n                        binId,\n                        count,\n                        cardId: _id,\n                        processName\n                    }\n\n\n                    // if there is an entry in tempCardsSorted with key matching {binId}, add the lot to this bin\n                    if (bins[binId]) {\n                        // tempCardsSorted[binId].cards.push(lotItem)\n                        const currentObj = isObject(tempCardsSorted[binId]) ? tempCardsSorted[binId] : {}\n                        const existingCards = (isArray(currentObj.cards)) ? currentObj.cards : []\n\n                        tempCardsSorted = {\n                            ...tempCardsSorted,\n                            [binId]: {\n                                ...currentObj,\n                                cards: [...existingCards, lotItem]\n                            }\n                        }\n                    }\n\n                    // if {binId} is queue, add the lot to the queue\n                    else if (binId === \"QUEUE\") {\n                        tempQueue.push(lotItem)\n                    }\n\n                    // if the {binId} is finish, add the lot to the finished column\n                    else if (binId === \"FINISH\") {\n                        tempFinished.push(lotItem)\n                    }\n\n                })\n            }\n        })\n\n        setCardsSorted(tempCardsSorted)\n        setQueue(tempQueue)\n        setFinished(tempFinished)\n    }, [bins, allCards, processId, lotFilters, draggingBinId, draggingLotId, lotFilterValue, selectedFilterOption])\n\n    const renderStationColumns = useMemo(() => {\n\n        const columns = currentProcess.flattened_stations.map((stationNode, idx) => (\n\n            <div id={`column-${stationNode.stationID}`}>\n                <StationsColumn\n                    containerStyle={{marginTop: `${stationNode.depth*2}rem`, position: 'relative'}}\n                    setSelectedCards={setSelectedCards}\n                    selectedCards={selectedCards}\n                    sortMode={sortMode}\n                    sortDirection={sortDirection}\n                    maxHeight={maxHeight}\n                    id={processId + \"+\" + stationNode.stationID}\n                    station_id={stationNode.stationID}\n                    stationName={stations[stationNode.stationID].name}\n                    processId={processId}\n                    cards={cardsSorted[stationNode.stationID]?.cards || []}\n                    onCardClick={handleCardClick}\n                    autoCycleTime={deleteStationCycleTime[stationNode.stationID]}\n                />\n            </div>\n\n        ))\n\n        // const pathsBoxWidth = 26*(currentProcess.flattened_stations.length + 2)\n        // const pathsBoxHeight = 2*Math.max(...currentProcess.flattened_stations.map(node => node.depth))\n        // const paths = (\n        //     <div style={{zIndex: 1000, background: 'red', width: '400rem', top: 0, left: 0}}>\n        //     {/* <svg style={{background: 'rgba(0,0,0.3,0.3)', position: 'absolute'}} fill='yellow' viewBox={`0 0 ${100*pathsBoxWidth} ${100*pathsBoxHeight}`} width={`${pathsBoxWidth}rem`} height={`${pathsBoxHeight}rem`} >\n        //         {currentProcess.routes.map(routeId => {\n        //             const route = routes[routeId];\n        //             const loadIdx = currentProcess.flattened_stations.findIndex(node => node.stationID === route.load)\n        //             const unloadIdx = currentProcess.flattened_stations.findIndex(node => node.stationID === route.unload)\n\n        //             return <line x1={`${26*100*loadIdx}`} y1={200*currentProcess.flattened_stations[loadIdx].depth} x2={`${26*100*unloadIdx}`} y2={200*currentProcess.flattened_stations[unloadIdx].depth} stroke=\"black\" strokeWidth=\"10\"/>\n        //         })}\n        //     </svg> */}\n        //     </div>\n        // )\n\n        return (\n            <>\n                {columns}\n                {/* {paths} */}\n            </>\n        )\n\n    }, [cardsSorted, currentProcess])\n\n    return (\n        <styled.Container style={{ background: 'white' }}>\n\n            <LotQueue\n                setSelectedCards={setSelectedCards}\n                selectedCards={selectedCards}\n                key={\"QUEUE\"}\n                sortMode={sortMode}\n                sortDirection={sortDirection}\n                maxHeight={maxHeight}\n                station_id={\"QUEUE\"}\n                setShowCardEditor={setShowCardEditor}\n                showCardEditor={showCardEditor}\n                stationName={\"Queue\"}\n                processId={processId}\n                cards={queue}\n                onCardClick={handleCardClick}\n                onAddLotClick={() => handleAddLotClick(processId)}\n            />\n\n            {renderStationColumns}\n\n            {!doesProcessEndInAllWarehouses &&\n                <FinishColumn\n                    setSelectedCards={setSelectedCards}\n                    selectedCards={selectedCards}\n                    key={\"FINISH\"}\n                    sortMode={sortMode}\n                    sortDirection={sortDirection}\n                    maxHeight={maxHeight}\n                    station_id={\"FINISH\"}\n                    setShowCardEditor={setShowCardEditor}\n                    showCardEditor={showCardEditor}\n                    stationName={\"Finished\"}\n                    processId={processId}\n                    cards={finished}\n                    onCardClick={handleCardClick}\n                />\n            }\n        </styled.Container>\n    )\n})\n\n// Specifies propTypes\nCardZone.propTypes = {\n    handleCardClick: PropTypes.func,\n    setShowCardEditor: PropTypes.func,\n    processId: PropTypes.string,\n    lotFilters: PropTypes.array,\n    lotFilterValue: PropTypes.any,\n    showCardEditor: PropTypes.bool,\n    maxHeight: PropTypes.any\n}\n\n// Specifies the default values for props:\nCardZone.defaultProps = {\n    handleCardClick: () => { },\n    processId: null,\n    setShowCardEditor: () => { },\n    showCardEditor: false,\n    maxHeight: null,\n    lotFilterValue: \"\",\n    selectedFilterOption: LOT_FILTER_OPTIONS.name,\n    lotFilters: [],\n    sortMode: LOT_FILTER_OPTIONS.name,\n    sortDirection: SORT_DIRECTIONS.ASCENDING,\n}\n\nexport default memo(CardZone)\n","// Import Store\nimport store from '../../redux/store/index'\nimport moment from 'moment';\n\nexport const getMinutesFromMoment = (m) => {\n    return m.minutes() + m.hours() * 60;\n}\n\n/**\n * Takes in time12h which is a string: 1:30 pm\n * Converts that string into a 24h string: 13:30\n * @param {*} time12h \n */\nexport const convert12hto24h = (time12h) => {\n    const [numericTime, modifier] = time12h.split(' ');\n\n    let [hours, minutes] = numericTime.split(':');\n\n    if (hours === '12' && (modifier === 'AM' || modifier === 'am')) {\n        hours = '00';\n    } else if (hours === '12' && (modifier === 'PM' || modifier === 'pm')) {\n        hours = '12';\n    }\n\n    if ((modifier === 'PM' || modifier === 'pm') && hours !== '12') {\n        hours = parseInt(hours, 10) + 12;\n    }\n    return `${hours}:${minutes}`\n}\n\n/**\n * Takes in a string time24h: 13:30\n * Converts that string into a 12h string: 1:30 pm\n * @param {*} time24h \n */\nexport const convert24hto12h = (time24h) => {\n    let modifier = 'am'\n\n    let [hours, minutes] = time24h.split(':');\n\n    hours = parseInt(hours)\n\n    if (hours >= 12) {\n        if (hours > 12) {\n            hours = hours - 12\n        }\n        modifier = 'pm'\n    }\n\n    if (minutes.length === 1) {\n        minutes = `0${minutes}`\n    }\n\n    return `${hours}:${minutes} ${modifier}`\n\n}\n\n/**\n * Takes in a string: 1 pm\n * Converts that string to 24 hours: 13:000\n * @param {*} string \n */\nexport const convertTimeStringto24h = (string) => {\n    let [hour, modifier] = string.split(' ');\n    hour = parseInt(hour)\n\n    // If pm and not 12pm then add 12\n    if (modifier === 'pm' && hour !== 12) {\n        hour = hour + 12\n    }\n\n    // If hour is 12pmm, then set to 0\n    if (hour === 12 && modifier === 'pm') {\n        hour = 0\n    }\n\n    // Convert back to string\n    // Add 0 to front if need be\n    if (hour < 10) {\n        hour = hour.toString()\n        hour = `0${hour}`\n    }\n    else {\n        hour = hour.toString()\n    }\n\n    return `${hour}:00`\n\n}\n\nexport const convertEpochTo12h = (epoch) => {\n\n    let convertedTime = new Date(epoch * 1000)\n    let hour = convertedTime.getHours()\n    let minute = convertedTime.getMinutes()\n\n    hour = parseInt(hour)\n    minute = parseInt(minute)\n\n    if (hour < 10) {\n        hour = hour.toString()\n        hour = `0${hour}`\n    }\n    else {\n        hour = hour.toString()\n    }\n\n    if (minute < 10) {\n        minute = minute.toString()\n        minute = `0${minute}`\n    }\n    else {\n        minute = minute.toString()\n    }\n\n    return `${hour}:${minute}`\n}\n\n/**\n * Converts 24h string to int\n * '13:00' is converted to 1300\n * @param {*} time24h \n */\nexport const convert24htoInt = (time24h) => {\n    const [hour, minute] = time24h.split(':')\n    return parseInt(`${hour}${minute}`)\n}\n\n/**\n * Converts into to 24h\n * 1300 is converted to '13:00'\n * @param {*} int \n */\nexport const convertIntto24h = (int) => {\n    let hour\n    let minute\n\n    // If the string length is 3, then the hour must start with a 0\n    if (int.toString().length === 3) {\n        hour = `0${int.toString()[0]}`\n        minute = `${int.toString()[1]}${int.toString()[2]}`\n    }\n    else {\n        hour = `${int.toString()[0]}${int.toString()[1]}`\n        minute = `${int.toString()[2]}${int.toString()[3]}`\n    }\n    return `${hour}:${minute}`\n}\n\n/**\n * Converts strings into time\n * time24h string format: 13:00\n * date string format: May 13, 1993\n * @param {*} time24h \n * @param {*} date \n */\nexport const convert24htoEpoch = (time24h, date) => {\n    const epochTime = Date.parse(`${date} ${time24h}`)\n\n    return epochTime\n}\n\nexport const convertDateToLocaleTimeZone = (date, timezone) => {\n    return new Date(date.toLocaleString(\"en-US\", { timeZone: timezone }))\n}\n\nexport const convertDateto12h = (date) => {\n    const settingState = store.getState().settingsReducer\n\n    if (!!settingState?.settings?.timezone?.label) {\n        date = convertDateToLocaleTimeZone(date, settingState?.settings?.timezone?.label)\n    }\n\n    return convert24hto12h(`${date.getHours()}:${date.getMinutes()}`)\n\n}\n\n\nexport const isDateToday = (date) => {\n    const today = new Date()\n    const incomingDate = new Date(date)\n    // call setHours to take the time out of the comparison\n    if (incomingDate.setHours(0, 0, 0, 0) === today.setHours(0, 0, 0, 0)) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n// Takes shift details and returns total work time in seconds\nexport const convertShiftDetailsToWorkingTime = (shiftDetails) => {\n    let totalBreakTime = 0\n\n    Object.values(shiftDetails.breaks)\n        .sort((a, b) => a.startOfBreak - b.startOfBreak)\n        .forEach(br => {\n            if (br.enabled) {\n\n                const start = moment.duration(br.startOfBreak).asSeconds()\n                const end = moment.duration(br.endOfBreak).asSeconds()\n\n                const breakLength = end - start\n                totalBreakTime += breakLength\n\n            }\n        })\n\n\n    const startOfShift = moment.duration(shiftDetails.startOfShift).asSeconds()\n    const endOfShift = moment.duration(shiftDetails.endOfShift).asSeconds()\n\n    const workingTime = endOfShift - startOfShift - totalBreakTime\n    return workingTime\n\n}\n\n// Converts time string to \nexport const convertHHMMSSStringToSeconds = (timeStr) => {\n    let [hour, minute, second] = timeStr.split(':')\n\n    hour = parseInt(hour)\n    minute = parseInt(minute)\n    second = parseInt(second)\n\n    const totalSeconds = hour * 60 * 60 + minute * 60 + second\n    return totalSeconds\n}\n\n// Convert Seconds to HHMMSS\nexport const convertSecondsToHHMMSS = (seconds) => {\n    const date = new Date(seconds * 1000).toISOString().substr(11, 8)\n    return date\n}\n\nexport const secondsToReadable = (seconds, short=false) => {\n\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = Math.round(seconds % 60)\n\n    let readable = '';\n    if (short) {\n        if (days) readable += `${days}d `;\n        if (hours) readable += `${hours}h `;\n        if (!days) readable += `${minutes}m`;\n        if (!days && !hours) readable += ` ${remainingSeconds}s`;\n    } else {\n        if (days) readable += `${days} days `;\n        if (hours) readable += `${hours} hrs `;\n        if (!days) readable += `${minutes} min`;\n        if (!days && !hours) readable += ` ${remainingSeconds} sec`;\n    }\n\n    return readable;\n\n}"],"sourceRoot":""}