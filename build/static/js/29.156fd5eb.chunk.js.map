{"version":3,"sources":["components/side_bar/content/statistics/statistics_selector.style.js","components/side_bar/content/statistics/statistics_selector.js","methods/utils/time_utils.js","components/basic/charts/nivo_theme.js"],"names":["Page","styled","div","props","theme","bg","secondary","Header","Container","ProcessCard","IconContainer","LabelContainer","Label","textColor","primary","SubLabel","Dot","Chevron","i","StatisticsSelector","processes","useSelector","state","processesReducer","history","useHistory","Object","values","map","process","onClick","push","_id","style","width","className","color","production_rate","name","flattened_stations","length","flexGrow","background","secondsToReadable","convert12hto24h","time12h","split","numericTime","modifier","hours","minutes","parseInt","convertHHMMSSStringToSeconds","timeStr","hour","minute","second","convertSecondsToHHMMSS","seconds","Date","toISOString","substr","short","days","Math","floor","remainingSeconds","round","readable","defaultColors"],"mappings":"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","file":"static/js/29.156fd5eb.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Page = styled.div`\n    height: 100%;\n    width: 100%;\n    background: ${props => props.theme.bg.secondary};\n\n    display: flex;\n    flex-direction: column;\n    padding: 0.5rem;\n`\n\nexport const Header = styled.div`\n    margin: 0.5rem;\n    margin-bottom: 0.5rem;\n    font-size: 1.2rem;\n    color: #a1a1b5;\n`\n\nexport const Container = styled.div`\n    display: flex;\n    align-items: center;\n`\n\nexport const ProcessCard = styled.div`\n    height: 5rem;\n    cursor: pointer;\n\n    background: white;\n    box-shadow: 0px 4px 8px 4px rgba(200, 206, 222, 0.25);\n    border-radius: 0.5rem;\n\n    margin: 0.4rem 0.5rem;\n    display: flex;\n    align-items: center;\n\n    &:hover {\n        transform: scale(1.0025);\n        box-shadow: 0px 6px 10px 6px rgba(200, 206, 222, 0.25);\n    }\n\n    transition: all 200ms;\n`\n\nexport const IconContainer = styled.div`\n    width: 3rem;\n    height: 3rem;\n    margin: 1rem 2rem;\n    font-size: 1rem;\n    background: #f5f5ff;\n    border-radius: 50%;\n\n    display: flex;\n    justify-content: center;\n    align-content: center;\n    align-items: center;\n`\n\nexport const LabelContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: 100%;\n`\n\nexport const Label = styled.div`\n    font-size: 1.1rem;\n    color: ${props => props.theme.textColor.primary};\n    font-weight: bold;\n`\n\nexport const SubLabel = styled.div`\n    font-size: 0.9rem;\n    color: #a1a1b5;\n`\n\nexport const Dot = styled.div`\n    height: 0.65rem;\n    width: 0.65rem;\n    border-radius: 50%;\n    margin: 0.5rem;\n`\n\nexport const Chevron = styled.i`\n    font-size: 1.5rem;\n    color: #a1a1b5;\n    margin: 0 1rem;\n`","import { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport * as styled from './statistics_selector.style';\nimport { defaultColors } from '../../../basic/charts/nivo_theme';\nimport { secondsToReadable } from '../../../../methods/utils/time_utils';\n\nconst StatisticsSelector = (props) => {\n\n    const processes = useSelector(state => state.processesReducer.processes)\n\n    const history = useHistory()\n\n    return (\n        <styled.Page>\n            <styled.Header>Processes</styled.Header>\n            {Object.values(processes).map((process, i) => (\n                <styled.ProcessCard onClick={() => history.push('/statistics/' + process._id + \"/statistics\")}>\n                    <styled.Container style={{width: '50%'}}>\n                        <styled.IconContainer className={'fas fa-route'} style={{color: process?.production_rate > 0 ? '#81d690' : '#ff6363' }}/>\n                        <styled.LabelContainer>\n                            <styled.Label>{process.name}</styled.Label>\n                            <styled.SubLabel>{process?.flattened_stations?.length || null} Stations</styled.SubLabel>\n                        </styled.LabelContainer>\n                    </styled.Container>\n                    <styled.Container style={{flexGrow: '1'}}>\n                        <styled.Dot style={{background: process?.production_rate > 0 ? '#81d690' : '#ff6363'}} />\n                        <styled.SubLabel>{secondsToReadable(process?.production_rate || 0)} per part</styled.SubLabel>\n                    </styled.Container>\n                    <styled.Chevron className=\"fas fa-chevron-right\" />\n                </styled.ProcessCard>\n            ))}\n        </styled.Page>\n    )\n}\n\nexport default StatisticsSelector","// Import Store\nimport store from '../../redux/store/index'\nimport moment from 'moment';\n\nexport const getMinutesFromMoment = (m) => {\n    return m.minutes() + m.hours() * 60;\n}\n\n/**\n * Takes in time12h which is a string: 1:30 pm\n * Converts that string into a 24h string: 13:30\n * @param {*} time12h \n */\nexport const convert12hto24h = (time12h) => {\n    const [numericTime, modifier] = time12h.split(' ');\n\n    let [hours, minutes] = numericTime.split(':');\n\n    if (hours === '12' && (modifier === 'AM' || modifier === 'am')) {\n        hours = '00';\n    } else if (hours === '12' && (modifier === 'PM' || modifier === 'pm')) {\n        hours = '12';\n    }\n\n    if ((modifier === 'PM' || modifier === 'pm') && hours !== '12') {\n        hours = parseInt(hours, 10) + 12;\n    }\n    return `${hours}:${minutes}`\n}\n\n/**\n * Takes in a string time24h: 13:30\n * Converts that string into a 12h string: 1:30 pm\n * @param {*} time24h \n */\nexport const convert24hto12h = (time24h) => {\n    let modifier = 'am'\n\n    let [hours, minutes] = time24h.split(':');\n\n    hours = parseInt(hours)\n\n    if (hours >= 12) {\n        if (hours > 12) {\n            hours = hours - 12\n        }\n        modifier = 'pm'\n    }\n\n    if (minutes.length === 1) {\n        minutes = `0${minutes}`\n    }\n\n    return `${hours}:${minutes} ${modifier}`\n\n}\n\n/**\n * Takes in a string: 1 pm\n * Converts that string to 24 hours: 13:000\n * @param {*} string \n */\nexport const convertTimeStringto24h = (string) => {\n    let [hour, modifier] = string.split(' ');\n    hour = parseInt(hour)\n\n    // If pm and not 12pm then add 12\n    if (modifier === 'pm' && hour !== 12) {\n        hour = hour + 12\n    }\n\n    // If hour is 12pmm, then set to 0\n    if (hour === 12 && modifier === 'pm') {\n        hour = 0\n    }\n\n    // Convert back to string\n    // Add 0 to front if need be\n    if (hour < 10) {\n        hour = hour.toString()\n        hour = `0${hour}`\n    }\n    else {\n        hour = hour.toString()\n    }\n\n    return `${hour}:00`\n\n}\n\nexport const convertEpochTo12h = (epoch) => {\n\n    let convertedTime = new Date(epoch * 1000)\n    let hour = convertedTime.getHours()\n    let minute = convertedTime.getMinutes()\n\n    hour = parseInt(hour)\n    minute = parseInt(minute)\n\n    if (hour < 10) {\n        hour = hour.toString()\n        hour = `0${hour}`\n    }\n    else {\n        hour = hour.toString()\n    }\n\n    if (minute < 10) {\n        minute = minute.toString()\n        minute = `0${minute}`\n    }\n    else {\n        minute = minute.toString()\n    }\n\n    return `${hour}:${minute}`\n}\n\n/**\n * Converts 24h string to int\n * '13:00' is converted to 1300\n * @param {*} time24h \n */\nexport const convert24htoInt = (time24h) => {\n    const [hour, minute] = time24h.split(':')\n    return parseInt(`${hour}${minute}`)\n}\n\n/**\n * Converts into to 24h\n * 1300 is converted to '13:00'\n * @param {*} int \n */\nexport const convertIntto24h = (int) => {\n    let hour\n    let minute\n\n    // If the string length is 3, then the hour must start with a 0\n    if (int.toString().length === 3) {\n        hour = `0${int.toString()[0]}`\n        minute = `${int.toString()[1]}${int.toString()[2]}`\n    }\n    else {\n        hour = `${int.toString()[0]}${int.toString()[1]}`\n        minute = `${int.toString()[2]}${int.toString()[3]}`\n    }\n    return `${hour}:${minute}`\n}\n\n/**\n * Converts strings into time\n * time24h string format: 13:00\n * date string format: May 13, 1993\n * @param {*} time24h \n * @param {*} date \n */\nexport const convert24htoEpoch = (time24h, date) => {\n    const epochTime = Date.parse(`${date} ${time24h}`)\n\n    return epochTime\n}\n\nexport const convertDateToLocaleTimeZone = (date, timezone) => {\n    return new Date(date.toLocaleString(\"en-US\", { timeZone: timezone }))\n}\n\nexport const convertDateto12h = (date) => {\n    const settingState = store.getState().settingsReducer\n\n    if (!!settingState?.settings?.timezone?.label) {\n        date = convertDateToLocaleTimeZone(date, settingState?.settings?.timezone?.label)\n    }\n\n    return convert24hto12h(`${date.getHours()}:${date.getMinutes()}`)\n\n}\n\n\nexport const isDateToday = (date) => {\n    const today = new Date()\n    const incomingDate = new Date(date)\n    // call setHours to take the time out of the comparison\n    if (incomingDate.setHours(0, 0, 0, 0) === today.setHours(0, 0, 0, 0)) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n// Takes shift details and returns total work time in seconds\nexport const convertShiftDetailsToWorkingTime = (shiftDetails) => {\n    let totalBreakTime = 0\n\n    Object.values(shiftDetails.breaks)\n        .sort((a, b) => a.startOfBreak - b.startOfBreak)\n        .forEach(br => {\n            if (br.enabled) {\n\n                const start = moment.duration(br.startOfBreak).asSeconds()\n                const end = moment.duration(br.endOfBreak).asSeconds()\n\n                const breakLength = end - start\n                totalBreakTime += breakLength\n\n            }\n        })\n\n\n    const startOfShift = moment.duration(shiftDetails.startOfShift).asSeconds()\n    const endOfShift = moment.duration(shiftDetails.endOfShift).asSeconds()\n\n    const workingTime = endOfShift - startOfShift - totalBreakTime\n    return workingTime\n\n}\n\n// Converts time string to \nexport const convertHHMMSSStringToSeconds = (timeStr) => {\n    let [hour, minute, second] = timeStr.split(':')\n\n    hour = parseInt(hour)\n    minute = parseInt(minute)\n    second = parseInt(second)\n\n    const totalSeconds = hour * 60 * 60 + minute * 60 + second\n    return totalSeconds\n}\n\n// Convert Seconds to HHMMSS\nexport const convertSecondsToHHMMSS = (seconds) => {\n    const date = new Date(seconds * 1000).toISOString().substr(11, 8)\n    return date\n}\n\nexport const secondsToReadable = (seconds, short=false) => {\n\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = Math.round(seconds % 60)\n\n    let readable = '';\n    if (short) {\n        if (days) readable += `${days}d `;\n        if (hours) readable += `${hours}h `;\n        if (!days) readable += `${minutes}m`;\n        if (!days && !hours) readable += ` ${remainingSeconds}s`;\n    } else {\n        if (days) readable += `${days} days `;\n        if (hours) readable += `${hours} hrs `;\n        if (!days) readable += `${minutes} min`;\n        if (!days && !hours) readable += ` ${remainingSeconds} sec`;\n    }\n\n    return readable;\n\n}","export const theme = {\n    \"background\": \"#ffffff\",\n    \"textColor\": \"#c1c5e0\",\n    \"fontSize\": 14,\n    \"axis\": {\n        \"domain\": {\n            \"line\": {\n                \"stroke\": \"#777777\",\n                \"strokeWidth\": 0\n            }\n        },\n        \"ticks\": {\n            \"line\": {\n                \"stroke\": \"#777777\",\n                \"strokeWidth\": 0\n            }\n        }\n    },\n    \"grid\": {\n        \"line\": {\n            \"stroke\": \"#dddddd\",\n            \"strokeWidth\": 0\n        }\n    }\n}\n\nexport const defaultColors = ['#8577FF', '#01F0E2', '#FEBA69', '#FF718B', '#349CFB', '#AC1FFC']"],"sourceRoot":""}