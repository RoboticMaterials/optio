// import external dependencies
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams } from "react-router-dom";

// Import Actions
import { getMaps } from "../../redux/actions/map_actions";
import { getTaskQueue } from "../../redux/actions/task_queue_actions";
import { getLocations } from "../../redux/actions/locations_actions";
import { getObjects } from "../../redux/actions/objects_actions";
import { getTasks, deleteTask } from "../../redux/actions/tasks_actions";
import {
  getDashboards,
  deleteDashboard,
} from "../../redux/actions/dashboards_actions";
import { getSounds } from "../../redux/actions/sounds_actions";
import {
  getProcesses,
  putProcesses,
} from "../../redux/actions/processes_actions";

import { getSchedules } from "../../redux/actions/schedule_actions";
import { getDevices, putDevices } from "../../redux/actions/devices_actions";
import { getStatus } from "../../redux/actions/status_actions";

import { getSettings } from "../../redux/actions/settings_actions";
import { getLocalSettings } from "../../redux/actions/local_actions";
import { getLoggers } from "../../redux/actions/local_actions";
import { getRefreshToken } from "../../redux/actions/authentication_actions";

import {
  deletePosition,
  putPosition,
} from "../../redux/actions/positions_actions";
import {
  putStation,
  deleteStationByID,
} from "../../redux/actions/stations_actions";

import { postLocalSettings } from "../../redux/actions/local_actions";

// Import components
import Textbox from "../../components/basic/textbox/textbox";
import Button from "../../components/basic/button/button";
import Switch from "react-ios-switch";
import SplashScreen from "../../components/misc/splash_screen/splash_screen";

// import utils
import { getPageNameFromPath } from "../../methods/utils/router_utils";
import { isEquivalent, deepCopy, uuidv4 } from "../../methods/utils/utils";

// import logger
import logger from "../../logger.js";
import { getMap } from "../../api/map_api";
import SideBar from "../side_bar/side_bar";
import localReducer from "../../redux/reducers/local_reducer";
import { postCard } from "../../redux/actions/card_actions";
import { putJunk } from "../../redux/actions/test_actions";
import axios from "axios";
import { apiIPAddress } from "../../settings/settings";

var count = 0;

function getRandomInt(max) {
  return Math.floor(Math.random() * Math.floor(max));
}

const TestsContainer = (props) => {
  const dispatch = useDispatch();

  const foo_map = {
    allowed_methods: ["PUT", "GET", "DELETE"],
    _id: "blah-blah",
    created_by: "/v2.0.0/users/mirconst-guid-0000-0004-users0000000",
    created_by_id: "mirconst-guid-0000-0004-users0000000",
    created_by_name: "Distributor",
    guid: "51131f98-bfb5-11ea-a742-94c691a739e9",
    map:
      "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",
    metadata:
      "",
    name: "Robotic Materials",
    one_way_map:
      "iVBORw0KGgoAAAANSUhEUgAAAhAAAAKyAQAAAACsr9rBAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAnRSTlMAAHaTzTgAAAACYktHRAAB3YoTpAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAAd0SU1FB+QHBhQ5JYjlIqkAAABESURBVHja7cExAQAAAMKg9U9tBn+gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAzwC0lgABJg+sEgAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMC0wNy0wNlQyMjo1NzozNyswMjowMOars2YAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjAtMDctMDZUMjI6NTc6MzcrMDI6MDCX9gvaAAAAAElFTkSuQmCC",
    origin_theta: 0,
    origin_x: 0,
    origin_y: 0,
    path_guides:
      "/v2.0.0/maps/51131f98-bfb5-11ea-a742-94c691a739e9/path_guides",
    paths: "/v2.0.0/maps/51131f98-bfb5-11ea-a742-94c691a739e9/paths",
    positions: "/v2.0.0/maps/51131f98-bfb5-11ea-a742-94c691a739e9/positions",
    resolution: 0.05,
    session_id: "d469ada1-7e3c-11e9-9d34-94c691a739e9",
    d3: {
      scale: 1,
      translate: [0, 0],
      boundingClientHeight: null,
    },
  };

  const postLot = async () => {
    try {
      const response = await axios({
        method: "POST",
        url: apiIPAddress() + "site_maps",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        data: foo_map,
      });

      // Success 🎉
      // log.debug('response',response);
      const data = response.data;
      const dataJson = JSON.parse(data);
      // log.debug('response data json',dataJson);

      return dataJson;
    } catch (error) {
      console.error("error", error);
    }
  };

  return <button onClick={postLot}>CREATE MAP</button>;
};

export default TestsContainer;
