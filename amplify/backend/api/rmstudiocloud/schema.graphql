# User related

type User 
  @model(queries: null)
  @auth(rules: [
    # allow all authenticated users to read posts
    { allow: owner },
    { allow: private, operations: [read]}
    ])
  @key(name: "UsersbyOrg", fields: ["organizationId"], queryField: "UsersbyOrg" )
  @key(name: "UsersbyId", fields: ["id"], queryField: "UsersbyId" )
{
  id: ID!
  organizationId: ID!
  username: String!
  organization: Organization @connection(fields: ["organizationId"])
}

type Organization 
  @model(queries: null)
  @key(name: "OrgsById", fields: ["organizationId"], queryField: "OrgsById" )
  @key(name: "OrgsByKey", fields: ["key"], queryField: "OrgsByKey" )
  @auth(rules: [
    { allow: private }
    ]) 
{
  id: ID!
  organizationId: ID!
  name: String!
  key: String!
  users: [User] @connection(keyName: "UsersbyOrg", fields: ["organizationId"])

  # Organization's data
  stations: [Station] @connection(keyName: "StationsByOrgId", fields: ["organizationId"])
}

# Data related

type Station
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "StationsByOrgId", fields: ["organizationId"], queryField: "StationsByOrgId" )
{
  # IDs
  id: ID!
  _id: String!
  organizationId: ID!

  # Data
  name: String!
  schema: String!
  type:String!
  pos_x: Float
  pos_y: Float
  rotation: Int!
  x: Float!
  y: Float!
  map_id: String!
  children: AWSJSON!
  dashboards: AWSJSON!
}

type Position
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "PositionsByOrgId", fields: ["organizationId"], queryField: "PositionsByOrgId" )
{
  # IDs
  id: ID!
  _id: String!
  organizationId: ID!
  
  # Data
  change_key: String!
  map_id: String!
  name: String!
  parent: String
  pos_x: Float
  pos_y: Float
  rotation: Int
  schema: String!
  type: String!
  x: Int!
  y: Int!
}

type Task
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "TasksByOrgId", fields: ["organizationId"], queryField: "TasksByOrgId" )
{
  # IDs
  id: ID!
  _id: String!
  organizationId: ID!

  # Data
  device_types: AWSJSON!
  handoff: Boolean!
  load: AWSJSON!
  map_id: String!
  name: String!
  processes: AWSJSON!
  quantity: Int!
  track_quantity: Boolean!
  type: String!
  unload: AWSJSON!
  obj: String!
  route_object: AWSJSON
}

type Process
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "ProcessesByOrgId", fields: ["organizationId"], queryField: "ProcessesByOrgId" )
{
  # IDs
  id: ID!
  _id: String!
  organizationId: ID!
  
  # Data
  name: String!
  broken: Int
  routes: AWSJSON!
  map_id: String
}

type Object 
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "ObjectsByOrgId", fields: ["organizationId"], queryField: "ObjectsByOrgId" )
{
  # IDs
  id: ID!
  _id: String!
  organizationId: ID!
  
  # Data
  description: String!
  map_id: String!
  modelName: String!
  name: String!
  dimensions: String
  quantity: String
}

type Card
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "CardsByOrgId", fields: ["organizationId"], queryField: "CardsByOrgId" )
  @key(name: "getCardById", fields: ["organizationId"], queryField: "getCardById" )
{
  # IDs
  id: ID!
  _id: ID!
  organizationId: ID!

  # Data
  bins: AWSJSON!
  dates: AWSJSON!
  description: String!
  flags: AWSJSON!
  lotNumber: Int!
  lotTemplateId: String!
  name: String!
  process_id: String!
  totalQuantity: Int
  processName: String
}

# Data stream

type Device
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "DevicesByOrgId", fields: ["organizationId"], queryField: "DevicesByOrgId" )
{
  # IDs
  id: ID!
  _id: String!
  organizationId: ID!
  
  # Data
  battery_percentage: Int!
  connected: Boolean!, 
  current_task_queue_id: String
  dashboards: AWSJSON!
  device_model: String!
  device_name: String!
  distance_to_next_target: Int!
  idle_location: String!
  map_id: String!
  position: AWSJSON!
  shelf_attached: Int!
  state_text: String!
}

type Status 
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "StatusByOrgId", fields: ["organizationId"], queryField: "StatusByOrgId" )
{
  # IDs
  id: ID!
  _id: String!
  organizationId: ID!
  
  # Data
  active_map: Boolean
  mir_connection: String
  pause_status: Boolean
}

type TaskQueue 
  @model(queries: null)
  @auth(rules: [{ allow: private }])
  @key(name: "TaskQueueByOrgId", fields: ["organizationId"], queryField: "TaskQueueByOrgId" )
{
  # IDs
  id: ID!
  _id: String!
  organizationId: ID!
  
  # Data
  device_type: String!
  mission_status: String
  owner: String
  task_id: String!
  custom_task: AWSJSON
}

# Subs
type Subscription {
    onDeltaStation(id: ID): Station
      @aws_subscribe(mutations: ["createStation","updateStation","deleteStation"])

    onDeltaPosition(id: ID): Position
      @aws_subscribe(mutations: ["createPosition","updatePosition","deletePosition"])

    onDeltaTask(id: ID): Task
      @aws_subscribe(mutations: ["createTask","updateTask","deleteTask"])

    onDeltaProcess(id: ID): Process
      @aws_subscribe(mutations: ["createProcess","updateProcess","deleteProcess"])

    onDeltaObject(id: ID): Object
      @aws_subscribe(mutations: ["createObject","updateObject","deleteObject"])

    onDeltaCard(id: ID): Card
      @aws_subscribe(mutations: ["createCard","updateCard","deleteCard"])

    ## Data Stream Subscriptions  

    onDeltaDevice(id: ID): Device
      @aws_subscribe(mutations: ["createDevice","updateDevice","deleteDevice"])

    onDeltaStatus(id: ID): Status
      @aws_subscribe(mutations: ["createStatus","updateStatus","deleteStatus"])

    onDeltaTasQueue(id: ID): TaskQueue
      @aws_subscribe(mutations: ["createTaskQueue","updateTaskQueue","deleteTaskQueue"])
}

# Analysis Queries
# type Query {
#     taskAnalysis(id: ID): Task @function
# }